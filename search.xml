<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IDEA启动直接是进入项目，而不能选择项目</title>
      <link href="/2022/09/16/IDEA%E5%90%AF%E5%8A%A8%E7%9B%B4%E6%8E%A5%E6%98%AF%E8%BF%9B%E5%85%A5%E9%A1%B9%E7%9B%AE%EF%BC%8C%E8%80%8C%E4%B8%8D%E8%83%BD%E9%80%89%E6%8B%A9%E9%A1%B9%E7%9B%AE/"/>
      <url>/2022/09/16/IDEA%E5%90%AF%E5%8A%A8%E7%9B%B4%E6%8E%A5%E6%98%AF%E8%BF%9B%E5%85%A5%E9%A1%B9%E7%9B%AE%EF%BC%8C%E8%80%8C%E4%B8%8D%E8%83%BD%E9%80%89%E6%8B%A9%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>开机第一次启动IDEA</p><p>直接进入上次关闭的项目，而不是出现对话框让你自己选择进入哪个项目</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p><img src="/2022/09/16/IDEA%E5%90%AF%E5%8A%A8%E7%9B%B4%E6%8E%A5%E6%98%AF%E8%BF%9B%E5%85%A5%E9%A1%B9%E7%9B%AE%EF%BC%8C%E8%80%8C%E4%B8%8D%E8%83%BD%E9%80%89%E6%8B%A9%E9%A1%B9%E7%9B%AE/image-20220916065156230.png"></p>]]></content>
      
      
      <categories>
          
          <category> 疑难解答 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>c++学习</title>
      <link href="/2022/09/15/c-%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/09/15/c-%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="C-从键盘输入，和打印"><a href="#C-从键盘输入，和打印" class="headerlink" title="C++从键盘输入，和打印."></a>C++从键盘输入，和打印.</h2><p>c++要包含头文件<code>#include&lt;iostream&gt;</code></p><p>和C语言一样C++可以使用<code>scanf()</code>和<code>printf()</code>输入输出</p><p>c++有新的输入输出.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//使用cout和cin输入输出要使用命名空间</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;num;</span><br><span class="line">    cout&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//不在上面写命名空间可以这样写</span></span><br><span class="line">    std::cin&gt;&gt;num;</span><br><span class="line">    std::cout&lt;&lt;num&lt;&lt;std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="c-内存区域的划分"><a href="#c-内存区域的划分" class="headerlink" title="c++内存区域的划分"></a>c++内存区域的划分</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>栈存放局部变量，函数的形参，</p><p>程序结束由系统自动释放内存.</p><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>使用new，创建的数据存放在堆区</p><p>实例化的对象，存放在堆区</p><p>需要程序员手动释放</p><p>不释放会造成内存泄露</p><h4 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h4><p>指程序中已动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p><h3 id="代码区"><a href="#代码区" class="headerlink" title="代码区"></a>代码区</h3><p>代码区是共享的</p><p>存放代码，只读.不管程序会运行几次，只有一份.</p><p>存放函数体的二进制代码，由操作系统管理</p><p>程序编译后，生成.exe可执行程序，在未执行前分成2个区域，代码区和全局区</p><h3 id="全局区"><a href="#全局区" class="headerlink" title="全局区"></a>全局区</h3><p>全局变量和静态变量（static）存放在全局区</p><p>全局区还包含常量区，字符常量等其他常量</p><p>全局区在程序结束后由操作系统释放</p><h3 id="const修饰的局部变量、常量、字符串常量等"><a href="#const修饰的局部变量、常量、字符串常量等" class="headerlink" title="const修饰的局部变量、常量、字符串常量等"></a>const修饰的局部变量、常量、字符串常量等</h3><p>const只会让数据能不能修改，不会改变各种数据存放的位置.</p><p>原来存在哪个区被const修饰后还在哪个区</p><h2 id="new的使用"><a href="#new的使用" class="headerlink" title="new的使用"></a>new的使用</h2><p>c++使用new操作符在堆区开辟内存</p><p>使用delete释放</p><p>（动态内存开辟如malloc等开辟的用free释放）</p><p>new和delete总是成对出现.</p><p>用完就释放，避免造成内存泄露</p><p>也记得将指针置为NULL，否则会造成野指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//new的返回值是对应数据类型的指针</span></span><br><span class="line"><span class="type">int</span> *p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">p == <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *arr = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">delete</span>[] arr;</span><br><span class="line">arr = null;</span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据类型 &amp;变量名 = 变量名</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> &amp;b = a;</span><br><span class="line"><span class="comment">//修改b会改变a的值</span></span><br></pre></td></tr></table></figure><p>引用可以当做给另一个变量取别名</p><p>引用需要一个合法的内存空间，意思就是数据需要在栈或者堆上。在常量区的不行.</p><h3 id="引用的底层"><a href="#引用的底层" class="headerlink" title="引用的底层"></a>引用的底层</h3><p>引用和指针是有区别的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> &amp;b = a;<span class="comment">//底层是int* const b = &amp;a;</span></span><br><span class="line"><span class="type">int</span> *c = &amp;a;</span><br><span class="line">cout&lt;&lt;&amp;c&lt;&lt;endl;<span class="comment">//1</span></span><br><span class="line">cout&lt;&lt;&amp;a&lt;&lt;endl;<span class="comment">//2</span></span><br><span class="line">cout&lt;&lt;&amp;a&lt;&lt;endl;<span class="comment">//3</span></span><br><span class="line"><span class="comment">//2和3的地址相同</span></span><br><span class="line"><span class="comment">//引用不会新开辟内存.</span></span><br><span class="line"><span class="comment">//引用相当于a和b是同一块内存</span></span><br><span class="line"><span class="comment">//而指针是，用一块新的内存，存了a的地址.</span></span><br></pre></td></tr></table></figure><blockquote><p>对于引用，不用过多的对他怎么实现的下功夫，会熟练使用就行.</p><p>引用本身不开辟新的空间，但是<code>sizeof()</code>计算的时候是4，因为引用和变量用的是同一块地址.</p></blockquote><h3 id="对常量进行引用"><a href="#对常量进行引用" class="headerlink" title="对常量进行引用"></a>对常量进行引用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;a = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//底层是编译器会创建一个临时变量存放常量.然后在对其取地址</span></span><br><span class="line"><span class="comment">//int tmp = 100;</span></span><br><span class="line"><span class="comment">//int* const a = &amp;tmp;</span></span><br></pre></td></tr></table></figure><h3 id="引用的注意事项"><a href="#引用的注意事项" class="headerlink" title="引用的注意事项"></a>引用的注意事项</h3><p>引用在创建的时候必须初始化</p><p>创建好的引用的值可以改变，引用不可以改变.（引用在底层被const修饰了）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="number">50</span>;</span><br><span class="line"><span class="type">int</span> &amp;b = a;</span><br><span class="line">b = <span class="number">100</span>;<span class="comment">//可以改变值</span></span><br><span class="line">b = c;<span class="comment">//改变的是值,这里的底层是*b = c;*b = 50;</span></span><br></pre></td></tr></table></figure><h3 id="引用作为函数参数"><a href="#引用作为函数参数" class="headerlink" title="引用作为函数参数"></a>引用作为函数参数</h3><p>函数传参分成值传递和地址传递</p><p>当引用作为函数参数时，就是地址传递</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tnp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = tnp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">func</span>(a,b);<span class="comment">//会改变a和b的值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用作为函数返回值"><a href="#引用作为函数返回值" class="headerlink" title="引用作为函数返回值"></a>引用作为函数返回值</h3><h4 id="不要返回局部变量的引用"><a href="#不要返回局部变量的引用" class="headerlink" title="不要返回局部变量的引用"></a>不要返回局部变量的引用</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//a是func里的局部变量，函数执行结束就会被释放</span></span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//静态变量就可以作为返回值</span></span><br><span class="line">    <span class="type">static</span> b = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> &amp;ret = <span class="built_in">func</span>();</span><br><span class="line">    <span class="comment">//第一次打印是因为编译器的原因，编译器会保留一次a的值</span></span><br><span class="line">    <span class="comment">//其实a在func函数结束时就已经变成随机值了.</span></span><br><span class="line">    cout&lt;&lt;ret&lt;&lt;endl;<span class="comment">//第一次是会打印a的值0</span></span><br><span class="line">    cout&lt;&lt;ret&lt;&lt;endl;<span class="comment">//第二次就是随机值了</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数的调用可以作为左值"><a href="#函数的调用可以作为左值" class="headerlink" title="函数的调用可以作为左值"></a>函数的调用可以作为左值</h4><p>什么是左值？</p><p>粗俗的认为在“&#x3D;”左边的就是左值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数返回值是引用</span></span><br><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//变量是静态的</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> a = <span class="number">500</span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//正常调用</span></span><br><span class="line">    <span class="type">int</span> &amp;ret = <span class="built_in">func</span>();</span><br><span class="line">    cout&lt;&lt;ret&lt;&lt;endl;<span class="comment">//打印500</span></span><br><span class="line">    ret = <span class="number">300</span>; </span><br><span class="line">    cout&lt;&lt;ret&lt;&lt;endl;<span class="comment">//打印300</span></span><br><span class="line">    <span class="comment">//作为左值调用</span></span><br><span class="line">    <span class="built_in">func</span>() = <span class="number">100</span>;</span><br><span class="line">    count&lt;&lt;ret&lt;&lt;endl;<span class="comment">//打印100；</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为函数<code>func()</code>的返回值是<code>int&amp;</code></p><p>那么<code>func() = 100;</code>是不是可以变成 <code>a = 100</code>.a是一个引用类型（int&amp;）的变量.</p><p>而上面<code>int &amp;ret = func();</code>是不是可以看成<code>int &amp;ret = a;</code></p><p>最后的结果就是ret是a的别名，ret和静态变量a的地址是同一块.</p><p>当函数作为左值并被赋值后，那a&#x3D;100，所以ret也变成了100</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a>函数默认参数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当出现第一个参数为默认参数时，后面的参数也必须有默认参数</span></span><br><span class="line"><span class="comment">//在形参中直接赋值，就是函数默认参数.、</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b = <span class="number">10</span>,<span class="type">int</span> c = <span class="number">20</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>);<span class="comment">//传参时，如果没写后面的参数，就适用默认参数</span></span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>,<span class="number">30</span>);<span class="comment">//传参时，如果写了，就优先用写的参数值.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意点：如果在函数声明中有默认参数，那么函数定义中就不能有默认参数.</p><p>反过来也一样.</p></blockquote><h3 id="函数占位参数"><a href="#函数占位参数" class="headerlink" title="函数占位参数"></a>函数占位参数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数定义形参中不写变量名，只写数据类型，就是函数占位参数</span></span><br><span class="line"><span class="comment">//在函数传参时，需要填写对应的数据类型的值，虽然填了是不起作用的。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span>,<span class="type">int</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>);<span class="comment">//报错，占位参数的位置没参.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//虽然后面的20和30其实没什么用，但是函数定义中有占位参数.所以就要填</span></span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><p>要求：</p><p>1.同一个作用域中</p><p>2.函数名称和返回值相同</p><p>3.函数形参的数据类型、形参个数、形参顺序不同.</p><h4 id="函数重载的注意事项"><a href="#函数重载的注意事项" class="headerlink" title="函数重载的注意事项"></a>函数重载的注意事项</h4><p> 在使用引用作为参数或者，使用函数默认参数的时候，注意不要出现二议性.</p><p>什么是二义性？</p><p>在函数重载定义的时候没报错</p><p>但是调用函数的时候，重载的两个函数甚至三个都可以被调用.编译器不知到该调用哪个.</p><p>比如<code>void func(int a)</code>和<code>void func(int a, int b = 10)</code>和<code>void func(const int &amp;a)</code></p><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>封装的意义：</p><ul><li>将某一事物的属性和行为作为一个整体.来表现事物</li><li>将封装起来的属性和行为加以权限控制</li></ul><h4 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h4><ol><li>public：公共权限，类内可以访问，类外可以访问</li><li>protected：保护权限，类内可以访问，类外不可以访问，继承的子类可以访问</li><li>private：私有权限，类内可以访问， 类外不可以访问，继承的子类不可以访问</li></ol><blockquote><p>c++中没有default这个权限，java有.</p><p>C语言没有类和对象这个概念.</p></blockquote><h4 id="结构体（struct）和类（class）的区别"><a href="#结构体（struct）和类（class）的区别" class="headerlink" title="结构体（struct）和类（class）的区别"></a>结构体（struct）和类（class）的区别</h4><p>访问权限不同</p><p>struct默认是公共权限（public）</p><p>class默认是私有权限（private）</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>基本语法：</p><ul><li>没有返回值</li><li>函数名和类名完全相等</li><li>只会在调用对象的时候，调用一次.</li><li>系统自动调用.</li><li>有参数列表，可以发生重载</li></ul><h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><p>基本语法：</p><ul><li>在构造函数前面写一个’~‘，就是析构函数</li><li>没有返回值</li><li>对象销毁前会调用析构函数，系统自动调用，只会调用一次.</li><li>没有参数列表，不可以重载.</li></ul><h3 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h3><p>理解为有参构造函数.</p><p>就是构造函数的形参是自己类的引用，然后在构造函数里将传入的类的属性赋值给自己的类属性.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数,构造函数可以重载</span></span><br><span class="line">    <span class="built_in">Person</span>() &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//析构函数:不能有形参.</span></span><br><span class="line">    ~<span class="built_in">Person</span>() &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//拷贝构造函数:就是构造函数的重载</span></span><br><span class="line">    <span class="comment">//因为只是拷贝，所以用const修饰传进来的参</span></span><br><span class="line">    <span class="comment">//拷贝构造函数要用传引用的方式传进来，所以是&amp;p.为什么以后在讲</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">const</span> Person &amp;p) &#123;</span><br><span class="line">        <span class="comment">//类中，类的成员前面默认带一个this指针</span></span><br><span class="line">        <span class="comment">//也就是this-&gt;age = p.age;</span></span><br><span class="line">        age = p.age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造函数初始化列表"><a href="#构造函数初始化列表" class="headerlink" title="构造函数初始化列表"></a>构造函数初始化列表</h3><h3 id="构造、析构、拷贝构造的调用"><a href="#构造、析构、拷贝构造的调用" class="headerlink" title="构造、析构、拷贝构造的调用"></a>构造、析构、拷贝构造的调用</h3><p><em><strong>例子中的Person对应的是上面创建的Person</strong></em></p><p>1.括号法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person p1;<span class="comment">//默认构造函数</span></span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;<span class="comment">//有参构造函数</span></span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(p2)</span></span>;<span class="comment">//拷贝构造函数</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：在调用默认构造函数实例化对象的时候不要加括号.不然编译器会理解成这是函数声明</p><p>例：<code>Person p1();</code>编译器理解成函数声明，而不是实例化对象.</p></blockquote><p>2.显示法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person p1 = <span class="built_in">Person</span>();<span class="comment">//默认构造函数</span></span><br><span class="line">Person p2 = <span class="built_in">Person</span>(<span class="number">10</span>);<span class="comment">//有参构造函数</span></span><br><span class="line">Person p3 = <span class="built_in">Person</span>(p2);<span class="comment">//拷贝构造函数</span></span><br></pre></td></tr></table></figure><p>3.隐式转换法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p1 = <span class="number">10</span>;<span class="comment">//相当于写了Person p1 = Person(10);</span></span><br><span class="line">Person p2 = p4;</span><br></pre></td></tr></table></figure><p>底层就是编译器自动帮你写成显示法了</p><h3 id="拷贝构造函数的调用时机"><a href="#拷贝构造函数的调用时机" class="headerlink" title="拷贝构造函数的调用时机"></a>拷贝构造函数的调用时机</h3><p>1.使用已经创建完毕的对象来初始化一个新对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p1;<span class="comment">//先创建一个对象</span></span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;<span class="comment">//调用拷贝构造函数创建另一个对象</span></span><br></pre></td></tr></table></figure><p>2.值传递的方式给函数参数传值</p><p>因为函数传参的本质是，将main中传入的参数拷贝一份到形参.</p><p>所以当类作为函数参数的时候就会调用拷贝构造函数.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里的p不是p1本身，而是拷贝的一份p1的数据.</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(Person p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person p1;</span><br><span class="line">    <span class="built_in">func</span>(p1);<span class="comment">//调研拷贝构造函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.值方式返回局部对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Person <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person p1;<span class="comment">//调用默认构造函数</span></span><br><span class="line">    <span class="keyword">return</span> p1;<span class="comment">//当函数返回时，这里创建的p1会被析构函数结束掉</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//这段代码其实可以变成：Person p1 = p1;</span></span><br><span class="line">    <span class="comment">//这样就相当于隐式转换法创建了一个新的p1</span></span><br><span class="line">    Person p1 = <span class="built_in">func</span>();<span class="comment">//调用拷贝构造函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Person</span>(<span class="number">10</span>);<span class="comment">//匿名对象</span></span><br></pre></td></tr></table></figure><p>特点：当前行执行结束，系统会回收掉匿名对象</p><blockquote><p>注意：不要使用拷贝构造函数，初始化匿名对象</p><p>因为编译器会将<code>Person(p2);</code>解读为<code>Person p2;</code></p><p>而p2是在上面已经定义过一次了.编译器会报错p2重定义</p></blockquote><h3 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h3><p>浅拷贝：编译器提供的各种拷贝方法基本都是浅拷贝.</p><p>比如类中的，默认拷贝构造函数就是浅拷贝</p><p>什么是浅拷贝？</p><p>浅拷贝就是简单的把数据复制一份.</p><p>什么是深拷贝？</p><p>深拷贝在堆区申请新的空间再把数据复制过去.</p><hr><p>深拷贝和浅拷贝有什么区别？</p><p>当进行普通简单的变量拷贝的时候，没什么太大区别.</p><p>但是，当进行和指针相关的数据拷贝的时候就有问题了</p><p>浅拷贝，在拷贝指针类型数据的时候，只会把指针里存的地址拷贝过去.</p><p>假设原来的叫p1，拷贝过去的叫p2.</p><p>那么p1里指针的指向和p2里指针的指向是同一块内存.</p><p>当p1被调用完后，p1申请的内存会被释放.p2就变成了野指针.</p><p>深拷贝，在拷贝的时候，会在堆区申请新的一块空间.然后把p1中指针指向的值放到新的空间中，在将新空间的地址赋值给p2</p><p>这样当p1被释放后，p2任然是存在的.</p><h3 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h3><p>作用是直接对类中的属性赋值</p><p>语法：<code>构造函数():成员属性名1(值)，成员属性名2(值),成员属性名3(值)，......</code>{}</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="built_in">Person</span>():<span class="built_in">a</span>(<span class="number">10</span>),<span class="built_in">b</span>(<span class="number">20</span>),<span class="built_in">c</span>(<span class="number">30</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//另一种方式</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c):<span class="built_in">a</span>(a),<span class="built_in">b</span>(b),<span class="built_in">c</span>(c)</span><br><span class="line">    &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//成员属性a,b,c</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类成员作为类对象"><a href="#类成员作为类对象" class="headerlink" title="类成员作为类对象"></a>类成员作为类对象</h3><p>一个类可以作为另一个类的成员</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line">    A a1;<span class="comment">//A类作为B类的成员</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    B b1;<span class="comment">//当实例化对象时，会优先构造成员类</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     调用过程是：</span></span><br><span class="line"><span class="comment">     A的构造;</span></span><br><span class="line"><span class="comment">     B的构造;</span></span><br><span class="line"><span class="comment">     B的析构;</span></span><br><span class="line"><span class="comment">     A的析构;</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>先构造类内的，在构造自己</p><p>先析构自己，在析构类内的.</p></blockquote><h3 id="类中静态成员"><a href="#类中静态成员" class="headerlink" title="类中静态成员"></a>类中静态成员</h3><h4 id="静态成员变量"><a href="#静态成员变量" class="headerlink" title="静态成员变量"></a>静态成员变量</h4><p>1.静态成员变量在编译时分配内存.</p><ul><li><p>编译时分配内存的有全局区和代码区.</p></li><li><p>静态变量存在全局区、静态区.</p></li></ul><p>2.所有对象共享同一块数据</p><p>3.在类中写静态成员变量要类内声明，类外初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//static int a = 10;//静态变量直接在类内初识化不行</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> a;<span class="comment">//只能先声明</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> A::a = <span class="number">10</span>;<span class="comment">//在类外初始化，并标注这个a是类A的</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//当静态成员变量是private时，类外是不能访问</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//调用方式1：通过对象访问</span></span><br><span class="line">    cout&lt;&lt;A.a&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//调用方式2：通过类名访问</span></span><br><span class="line">    cout&lt;&lt;A::a&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h4><p>对类中的函数用static修饰就是静态成员函数</p><ul><li><p>静态成员函数可以在类中实现，静态成员函数中只能使用静态的成员变量.</p></li><li><p>所有类共享静态成员函数</p></li><li><p>通过对象访问 <code>先实例化对象，然后.函数名（）</code></p></li><li><p>通过类名访问 <code>类名::静态函数名（）</code></p></li><li><p>静态成员函数中只能使用静态成员变量.</p></li><li><p>静态成员函数也有访问权限</p></li></ul><h3 id="类所占内存空间大小"><a href="#类所占内存空间大小" class="headerlink" title="类所占内存空间大小"></a>类所占内存空间大小</h3><p>空类占一个字节.</p><p>除了非静态成员变量</p><p>其他的都不算在类所占内存大小.</p><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>this本质是一个指针</p><p>this指向自己类中的成员属性、成员函数.（默认的，没写也是指向的）</p><p>this不需要定义，直接使用.</p><p>在类的非静态成员函数可以用<code>return *this</code>返回对象本身.</p><h4 id="this的主要作用"><a href="#this的主要作用" class="headerlink" title="this的主要作用"></a>this的主要作用</h4><p>1.解决名称冲突</p><p>当类的成员函数的参数和类中成员属性同名的时候，可以加以区分</p><p>2.可以在类的非静态成员函数中返回对象本身，<code>return *this;</code></p><h3 id="空指针访问成员函数"><a href="#空指针访问成员函数" class="headerlink" title="空指针访问成员函数"></a>空指针访问成员函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        num = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A *a = <span class="literal">NULL</span>;</span><br><span class="line">    a-&gt;<span class="built_in">func1</span>();<span class="comment">//正常运行</span></span><br><span class="line">    </span><br><span class="line">    a-&gt;<span class="built_in">func2</span>();<span class="comment">//出错，原因：用空指针访问类内成员</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用func2出错了，因为其实在func2中的<code>num = 10</code>;其实是<code>this-&gt;num = 10;</code></p><p>而a是一个空指针.用一个空指针去访问所以就报错了.</p><h3 id="const修饰类、成员函数-mutable"><a href="#const修饰类、成员函数-mutable" class="headerlink" title="const修饰类、成员函数(mutable)"></a>const修饰类、成员函数(mutable)</h3><h4 id="const修饰成员函数"><a href="#const修饰成员函数" class="headerlink" title="const修饰成员函数"></a>const修饰成员函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//成员函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//this指针的本质是指针常量，是`类名 * const this;`</span></span><br><span class="line">        <span class="comment">//指针常量：指针指向不可以修改.指针指向的值可以修改</span></span><br><span class="line">        </span><br><span class="line">        num1 = <span class="number">10</span>;<span class="comment">//错误，加上const后函数内的变量不允许修改</span></span><br><span class="line">        num2 = <span class="number">20</span>;<span class="comment">//可以修改，如果想让常函数中的变量可以修改，在创建变量前面加mutable修饰</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> num1;</span><br><span class="line">    <span class="keyword">mutable</span> <span class="type">int</span> num2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="const修饰对象"><a href="#const修饰对象" class="headerlink" title="const修饰对象"></a>const修饰对象</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    consr Person p;<span class="comment">//在对象前面加const，变成常对象</span></span><br><span class="line">    p.num1 = <span class="number">10</span>;<span class="comment">//常对象中的变量不可以修改</span></span><br><span class="line">    p.num2 = <span class="number">20</span>；<span class="comment">//被mutable修饰过的常对象中的变量可以修改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="友元函数（friend）"><a href="#友元函数（friend）" class="headerlink" title="友元函数（friend）"></a>友元函数（friend）</h3><h4 id="全局函数做友元"><a href="#全局函数做友元" class="headerlink" title="全局函数做友元"></a>全局函数做友元</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">visit</span><span class="params">(Building&amp; building)</span></span>;</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="built_in">Building</span>()</span><br><span class="line">&#123;</span><br><span class="line">b_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">b_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string b_SittingRoom;<span class="comment">//客厅</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string b_BedRoom;<span class="comment">//卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//全局函数访问</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">(Building &amp;building)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;基友访问&quot;</span> &lt;&lt; building.b_SittingRoom &lt;&lt; endl;</span><br><span class="line"><span class="comment">//在建筑物类中申明该函数并用friend修饰，就可以访问private权限的属性</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;基友访问&quot;</span> &lt;&lt; building.b_BedRoom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Building building;</span><br><span class="line"><span class="built_in">visit</span>(building);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类做友元"><a href="#类做友元" class="headerlink" title="类做友元"></a>类做友元</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoodGay</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//类内声明，类外实现构造函数</span></span><br><span class="line"><span class="built_in">GoodGay</span>();</span><br><span class="line"><span class="comment">//类内声明，类外实现</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">()</span></span>;<span class="comment">//用来访问Building类中的属性</span></span><br><span class="line"><span class="comment">//建筑物指针</span></span><br><span class="line">Building *building;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//建筑物类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//在Building中声明友元，GoodGay的成员函数就可以访问Building中的私有成员属性</span></span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">GoodGay</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类内声明构造函数，类外实现</span></span><br><span class="line"><span class="built_in">Building</span>();</span><br><span class="line"></span><br><span class="line">string b_SittingRoom;<span class="comment">//客厅</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string b_BedRoom;<span class="comment">//卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//类外实现构造函数</span></span><br><span class="line">Building::<span class="built_in">Building</span>()</span><br><span class="line">&#123;</span><br><span class="line">b_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">b_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//基友构造函数</span></span><br><span class="line">GoodGay::<span class="built_in">GoodGay</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//在基友类中创建一个建筑物类</span></span><br><span class="line">building = <span class="keyword">new</span> Building;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类外实现类内函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GoodGay::visit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; building-&gt;b_SittingRoom &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; building-&gt;b_BedRoom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GoodGay gg;</span><br><span class="line">gg.<span class="built_in">visit</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="成员函数做友元"><a href="#成员函数做友元" class="headerlink" title="成员函数做友元"></a>成员函数做友元</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在Building类里声明GoodGay类中的一个函数是友元函数</span></span><br><span class="line"><span class="comment">//GoodGay类中被声明的那个函数就可以访问Building中的私有成员    </span></span><br></pre></td></tr></table></figure><h3 id="运算符重载operator"><a href="#运算符重载operator" class="headerlink" title="运算符重载operator"></a>运算符重载operator</h3><h4 id="号运算符重载"><a href="#号运算符重载" class="headerlink" title="+ 号运算符重载"></a>+ 号运算符重载</h4><h5 id="成员函数重载"><a href="#成员函数重载" class="headerlink" title="成员函数重载"></a>成员函数重载</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="comment">//通过成员函数重载运算符</span></span><br><span class="line">Person <span class="keyword">operator</span>+(Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">Person tmp;</span><br><span class="line">tmp.age = <span class="keyword">this</span>-&gt;age + p.age;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在外面调用的本质是：p3 = p1.operator+(p2);</span></span><br><span class="line"><span class="comment">被简化成了：p3 = p1 + p2; </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line">Person p1, p2,p3;</span><br><span class="line">p1.age = <span class="number">10</span>;</span><br><span class="line">p2.age = <span class="number">20</span>;</span><br><span class="line">p3 = p1 + p2;</span><br><span class="line">cout &lt;&lt; p3.age &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="全局函数重载"><a href="#全局函数重载" class="headerlink" title="全局函数重载"></a>全局函数重载</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过全局函数重载运算符</span></span><br><span class="line">Person <span class="keyword">operator</span>+(Person&amp; p1, Person&amp; p2)</span><br><span class="line">&#123;</span><br><span class="line">Person tmp;</span><br><span class="line">tmp.age = p1.age + p2.age;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    在外面调用的本质是：p3 = operator(p1,p2);</span></span><br><span class="line"><span class="comment">    被简化成:p3 = p1 + p2;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line">Person p1, p2,p3;</span><br><span class="line">p1.age = <span class="number">10</span>;</span><br><span class="line">p2.age = <span class="number">20</span>;</span><br><span class="line">p3 = p1 + p2;</span><br><span class="line">cout &lt;&lt; p3.age &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="左移运算符（-lt-lt-）重载"><a href="#左移运算符（-lt-lt-）重载" class="headerlink" title="左移运算符（&lt;&lt;）重载"></a>左移运算符（&lt;&lt;）重载</h4><p>作用是打印自定义类型的数据</p><p>用全局函数重载左移运算符，不用成员函数重载</p><h5 id="成员函数重载-1"><a href="#成员函数重载-1" class="headerlink" title="成员函数重载"></a>成员函数重载</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用成员函数重载会变成：p.operator&lt;&lt;(cout)</span></span><br><span class="line"><span class="comment">//简化为:p &lt;&lt; cout;</span></span><br><span class="line"><span class="comment">//无法使p在右边</span></span><br><span class="line"><span class="comment">//所以一般不使用成员函数重载左移运算符</span></span><br></pre></td></tr></table></figure><h5 id="全局函数重载-1"><a href="#全局函数重载-1" class="headerlink" title="全局函数重载"></a>全局函数重载</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//通过&quot;转到定义&quot;可以知道cout是ostream类型的</span></span><br><span class="line"><span class="comment">//因为cout对象只能有一个，所以要传引用</span></span><br><span class="line"><span class="comment">//现在这么写的重载符号只可以输出一个，想要连续输入要改返回值</span></span><br><span class="line"><span class="comment">//void operator&lt;&lt;(ostream &amp;cout, Person &amp;p)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; p.age &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//下面的就可以通过链式访问来一次输出多个</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; p.age &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当类的成员是private的时候，可以将全局函数做友元.</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p1,p2;</span><br><span class="line">p1.age = <span class="number">333</span>;</span><br><span class="line">p2.age = <span class="number">666</span>;</span><br><span class="line">    <span class="comment">//void 返回值的只能输出一次.</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;p1;</span></span><br><span class="line">    <span class="comment">//第二种可以连续输出</span></span><br><span class="line">cout &lt;&lt; p1 &lt;&lt; p2 &lt;&lt; endl;;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运算符重载"><a href="#运算符重载" class="headerlink" title="++运算符重载"></a>++运算符重载</h4><h5 id="成员函数重载-2"><a href="#成员函数重载-2" class="headerlink" title="成员函数重载"></a>成员函数重载</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="comment">//重载左++</span></span><br><span class="line">Person&amp; <span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;age++;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重载右++</span></span><br><span class="line"><span class="comment">//怎么区分前置和后置？</span></span><br><span class="line"><span class="comment">//后置++的参数中多了一个int占位符来区分</span></span><br><span class="line"><span class="comment">//后置++要返回值，不能返回引用，因为tmp使用完就会被释放</span></span><br><span class="line">Person <span class="keyword">operator</span>++(<span class="type">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">Person tmp;</span><br><span class="line">tmp = *<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;age++;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p1;</span><br><span class="line">p1.age = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//本质p1.operator++()</span></span><br><span class="line">++p1;</span><br><span class="line">p1++;</span><br><span class="line">cout &lt;&lt; p1.age &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="全局函数重载-2"><a href="#全局函数重载-2" class="headerlink" title="全局函数重载"></a>全局函数重载</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Person&amp; <span class="keyword">operator</span>++(Person&amp; p1)</span><br><span class="line">&#123;</span><br><span class="line">p1.age++;</span><br><span class="line"><span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person <span class="keyword">operator</span>++(Person&amp; p1, <span class="type">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">Person p2;</span><br><span class="line">p2 = p1;</span><br><span class="line">p1.age++;</span><br><span class="line"><span class="keyword">return</span> p2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p1;</span><br><span class="line">p1.age = <span class="number">5</span>;</span><br><span class="line"><span class="comment">//本质p1.operator++()</span></span><br><span class="line">++p1;</span><br><span class="line">p1++;</span><br><span class="line">cout &lt;&lt; p1.age &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="x3D-运算符重载"><a href="#x3D-运算符重载" class="headerlink" title="&#x3D; 运算符重载"></a>&#x3D; 运算符重载</h4><p>c++编译器至少给一个类添加4个函数</p><ul><li>1.默认构造函数</li><li>2.默认析构函数</li><li>3.默认拷贝构造函数</li><li>4.赋值运算符 ”operator&#x3D;“ 对属性进行值拷贝</li></ul><blockquote><p>c++提供的默认拷贝构造函数，和赋值运算符函数都是浅拷贝</p><p>如果类中有属性指向堆区，做赋值时也会出现深浅拷贝的问题</p></blockquote><h5 id="成员函数重载-3"><a href="#成员函数重载-3" class="headerlink" title="成员函数重载"></a>成员函数重载</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//堆区开的内存要用delete释放</span></span><br><span class="line">age = <span class="keyword">new</span> <span class="built_in">int</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* age;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//释放堆区内存</span></span><br><span class="line"><span class="keyword">delete</span> age;</span><br><span class="line">age = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重载运算符</span></span><br><span class="line">Person&amp; <span class="keyword">operator</span>=(Person&amp; p1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//先判断自身的属性有没有在堆区有内存</span></span><br><span class="line"><span class="keyword">if</span> (age != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> age;</span><br><span class="line">age = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//然后复制</span></span><br><span class="line">age = <span class="keyword">new</span> <span class="built_in">int</span>(*p1.age);</span><br><span class="line"><span class="comment">//为了保证可以链式操作，所以返回自身引用</span></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//没有在析构中用delete释放，这段代码就没问题.</span></span><br><span class="line"><span class="comment">//但是释放了就会报错，因为堆区的内存被重复释放</span></span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="number">30</span>)</span></span>;</span><br><span class="line"><span class="comment">//本质是：p3.operator=(p2.operator=(p1))</span></span><br><span class="line">p3 = p2 = p1;</span><br><span class="line">cout &lt;&lt; *p1.age &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; *p2.age &lt;&lt;<span class="string">&quot;  &quot;</span> &lt;&lt;*p3.age&lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="全局函数重载-3"><a href="#全局函数重载-3" class="headerlink" title="全局函数重载"></a>全局函数重载</h5><blockquote><p>&#x3D;运算符必须是成员函数</p></blockquote><h4 id="x3D-和-x3D-x3D-关系运算符重载"><a href="#x3D-和-x3D-x3D-关系运算符重载" class="headerlink" title="!&#x3D;和&#x3D;&#x3D; 关系运算符重载"></a>!&#x3D;和&#x3D;&#x3D; 关系运算符重载</h4><h5 id="成员函数重载-4"><a href="#成员函数重载-4" class="headerlink" title="成员函数重载"></a>成员函数重载</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(Person&amp; p1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;age == p1.age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p1;</span><br><span class="line">p1.age = <span class="number">10</span>;</span><br><span class="line">Person p2;</span><br><span class="line">p2.age = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (p1 == p2)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;不相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="全局函数重载-4"><a href="#全局函数重载-4" class="headerlink" title="全局函数重载"></a>全局函数重载</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(Person&amp; p1,Person&amp; p2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p1.age == p2.age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p1;</span><br><span class="line">p1.age = <span class="number">10</span>;</span><br><span class="line">Person p2;</span><br><span class="line">p2.age = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (p1 == p2)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;不相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数调用运算符重载"><a href="#函数调用运算符重载" class="headerlink" title="函数调用运算符重载"></a>函数调用运算符重载</h4><ul><li>函数调用运算符是<code>()</code></li><li>因为重载后的使用方式像在用函数，所以也称为仿函数</li><li>放函数没有固定写法，非常灵活</li><li>在以后的STL中会使用</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyPrint</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//重载函数调用运算符</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string str = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">MyPrint mp;</span><br><span class="line">mp.<span class="built_in">operator</span>()(str);</span><br><span class="line"><span class="comment">//简化成</span></span><br><span class="line"><span class="built_in">mp</span>(str);</span><br><span class="line">    <span class="comment">//匿名对象调用</span></span><br><span class="line"><span class="built_in">MyPrint</span>()(str);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承的好处：减少代码的复用</p><h4 id="继承语法"><a href="#继承语法" class="headerlink" title="继承语法"></a>继承语法</h4><p><img src="/2022/09/15/c-%E5%AD%A6%E4%B9%A0/image-20220928141645864.png"></p><p><img src="/2022/09/15/c-%E5%AD%A6%E4%B9%A0/image-20220928142410151.png"></p><h4 id="继承下来的东西"><a href="#继承下来的东西" class="headerlink" title="继承下来的东西"></a>继承下来的东西</h4><p>父类中所有非静态成员都会被继承下去（类中的函数和静态成员都不算类的大小）</p><p>父类中的私有成员属性，是被编译器隐藏了.所以访问不到，但是还是继承下去的.</p><h4 id="Vs开发人员命令提示工具查看类的继承"><a href="#Vs开发人员命令提示工具查看类的继承" class="headerlink" title="Vs开发人员命令提示工具查看类的继承"></a>Vs开发人员命令提示工具查看类的继承</h4><h5 id="1-在win开始菜单中找到vs自带的开发人员命令提示工具"><a href="#1-在win开始菜单中找到vs自带的开发人员命令提示工具" class="headerlink" title="1.在win开始菜单中找到vs自带的开发人员命令提示工具"></a>1.在win开始菜单中找到vs自带的开发人员命令提示工具</h5><p><img src="/2022/09/15/c-%E5%AD%A6%E4%B9%A0/image-20220928153044931.png"></p><p><img src="/2022/09/15/c-%E5%AD%A6%E4%B9%A0/image-20220928153103932.png"></p><h5 id="2-找到当前文件的路径"><a href="#2-找到当前文件的路径" class="headerlink" title="2.找到当前文件的路径"></a>2.找到当前文件的路径</h5><p><img src="/2022/09/15/c-%E5%AD%A6%E4%B9%A0/image-20220928153222429.png"></p><h5 id="3-cd到当前文件路径下"><a href="#3-cd到当前文件路径下" class="headerlink" title="3.cd到当前文件路径下"></a>3.cd到当前文件路径下</h5><p>打开所在文件夹后，复制文件路径</p><p><img src="/2022/09/15/c-%E5%AD%A6%E4%B9%A0/image-20220928153519144.png"></p><p>回到开发人员命令工具里用cd来到当前文件路径下</p><p><code>cd E:\Vs_studio_C++_Test\C++_Test1\C++_Test1</code></p><p><img src="/2022/09/15/c-%E5%AD%A6%E4%B9%A0/image-20220928153759174.png"></p><p>可以看到cd后的路径变了.</p><p>最后输入dir显示当前路径下的文件，看看是否有你写的.cpp文件</p><p><img src="/2022/09/15/c-%E5%AD%A6%E4%B9%A0/image-20220928154008420.png"></p><h5 id="4-输入指令查看类的对象模型"><a href="#4-输入指令查看类的对象模型" class="headerlink" title="4.输入指令查看类的对象模型"></a>4.输入指令查看类的对象模型</h5><p>指令为：</p><p><code>cl /d1 reportSingleClassLayoutSon &quot;test3.cpp&quot;</code></p><p>cpp文件名或者类名不同自行替换</p><p><img src="/2022/09/15/c-%E5%AD%A6%E4%B9%A0/image-20220928155235479.png"></p><p><img src="/2022/09/15/c-%E5%AD%A6%E4%B9%A0/image-20220928155324383.png"></p><h5 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h5><p>写好了类没有编译.直接查看布局.</p><p><img src="/2022/09/15/c-%E5%AD%A6%E4%B9%A0/image-20220928155442527.png"></p><h4 id="继承中构造和析构顺序"><a href="#继承中构造和析构顺序" class="headerlink" title="继承中构造和析构顺序"></a>继承中构造和析构顺序</h4><p>父类构造调用</p><p>子类构造调用</p><p>子类析构调用</p><p>父类析构调用</p><h4 id="继承同名成员处理和同名静态成员处理"><a href="#继承同名成员处理和同名静态成员处理" class="headerlink" title="继承同名成员处理和同名静态成员处理"></a>继承同名成员处理和同名静态成员处理</h4><h5 id="同名成员属性处理"><a href="#同名成员属性处理" class="headerlink" title="同名成员属性处理"></a>同名成员属性处理</h5><p>访问子类同名属性，直接调用就可以。因为默认优先使用子类的成员</p><p>调用父类的同名成员，需要加上父类的作用域.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> : <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//实例化对象</span></span><br><span class="line">    Son s;</span><br><span class="line">    <span class="comment">//默认访问子类的成员属性</span></span><br><span class="line">    cout &lt;&lt; s.num &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//加上父类的作用域，就访问父类的成员属性</span></span><br><span class="line">    cout &lt;&lt; s.Base::num &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="同名成员属性函数"><a href="#同名成员属性函数" class="headerlink" title="同名成员属性函数"></a>同名成员属性函数</h5><p>同名函数比同名属性多一个点</p><p>函数如果重载会怎么样？</p><p>结论，子类的函数重载，照样用。父类加作用域.</p><p>普通成员函数必须使用对象访问</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//父类中函数重载</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> : <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//子类中函数重载</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//实例化对象</span></span><br><span class="line">    Son s;</span><br><span class="line">    <span class="comment">//默认访问子类的成员函数</span></span><br><span class="line">    s.<span class="built_in">func</span>();</span><br><span class="line">    <span class="comment">//加上父类的作用域，就可以调用父类的函数</span></span><br><span class="line">    s.Base::<span class="built_in">func</span>();</span><br><span class="line">    <span class="comment">//子类的直接调用</span></span><br><span class="line">    s.<span class="built_in">func</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//父类加作用域</span></span><br><span class="line">    s.Base::<span class="built_in">func</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="静态同名属性处理"><a href="#静态同名属性处理" class="headerlink" title="静态同名属性处理"></a>静态同名属性处理</h5><p>首先回顾下静态成员：</p><ul><li>所有对象共享同一块数据，（如果一个类中修改了他，那么其他用到这个静态函数或者属性的类中的值也会一起变）</li><li>在编译阶段分配内存</li><li>类内声明，类外初始化</li><li>等….</li></ul><blockquote><p>静态同名成员属性和普通同性成员属性的使用和规则是一样的.</p></blockquote><p>比普通不同的是，静态可以用类名访问</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//不需要实例化对象</span></span><br><span class="line">    cout &lt;&lt; Son::age &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//访问父类的静态成员属性</span></span><br><span class="line">    cout &lt;&lt; Son::Base::age &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/15/c-%E5%AD%A6%E4%B9%A0/image-20220928214549149.png"></p><h5 id="静态同名成员函数"><a href="#静态同名成员函数" class="headerlink" title="静态同名成员函数"></a>静态同名成员函数</h5><p>回顾一下静态成员函数：</p><ul><li>可以在类中定义</li><li>静态成员函数里只能用静态成员变量</li><li>所有对象共享同一块</li></ul><p>和普通成员函数不同的是静态成员函数可以使用类名访问</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//不需要实例化对象</span></span><br><span class="line">    cout &lt;&lt; Son::<span class="built_in">func</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//访问父类的静态成员属性</span></span><br><span class="line">    cout &lt;&lt; Son::Base::<span class="built_in">func</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果子类中出现了和父类同名的静态成员函数，那就会把父类的同名函数全盖住，不管父类是不是静态函数</p><p>重载的也会覆盖</p><p>想要调用，就加父类作用域</p></blockquote><h4 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h4><h5 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h5><p><img src="/2022/09/15/c-%E5%AD%A6%E4%B9%A0/image-20220928215908783.png"></p><h5 id="多继承占用内存空间"><a href="#多继承占用内存空间" class="headerlink" title="多继承占用内存空间"></a>多继承占用内存空间</h5><p>自己的加上所有父类的大小</p><h5 id="多继承的调用"><a href="#多继承的调用" class="headerlink" title="多继承的调用"></a>多继承的调用</h5><p>和普通继承一样，优先使用子类，父类成员被覆盖。</p><p>想调用父类就要标注作用域</p><h5 id="菱形继承"><a href="#菱形继承" class="headerlink" title="菱形继承"></a>菱形继承</h5><p>什么是菱形继承？</p><p>类B继承了类A</p><p>类C继承了类A</p><p>类D继承了BC</p><p><img src="/2022/09/15/c-%E5%AD%A6%E4%B9%A0/image-20220928222528949.png"></p><p>当有同名的成员属性的时候，就会出现二义性.那怎么解决呢？</p><p>使用虚继承</p><p>关键词virtual</p><p>在继承的时候加上关键字，变成虚继承</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//虚继承以后，这个类变成了虚基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//虚继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:<span class="keyword">virtual</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//虚继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>:<span class="keyword">virtual</span> <span class="keyword">public</span> B</span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>:<span class="keyword">public</span> B,<span class="keyword">public</span> C</span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    D d;</span><br><span class="line">    cout &lt;&lt; d.B::age &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; d.C::age &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; d.age &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/15/c-%E5%AD%A6%E4%B9%A0/image-20220928233541373.png"></p><blockquote><p>虚继承以后，D继承的不是BC的属性，而是BC的虚基类指针.</p><p>虚基类指针通过偏移量找到虚基类表</p><p>虚基类表中有唯一的一份数据.就解决了二义性的问题</p></blockquote><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p><img src="/2022/09/15/c-%E5%AD%A6%E4%B9%A0/image-20220928234235438.png"></p><h5 id="多态的好处"><a href="#多态的好处" class="headerlink" title="多态的好处"></a>多态的好处</h5><ul><li>代码组织结构清晰</li><li>可读性强</li><li>利于前后期的维护和拓展</li></ul><h5 id="多态的使用"><a href="#多态的使用" class="headerlink" title="多态的使用"></a>多态的使用</h5><p>1.先让父类变成抽象类（虚基类）</p><ul><li>加虚函数（virtual），或者纯虚函数</li></ul><p>2.子类中重写父类中的所有抽象方法（虚函数）</p><ul><li>java中抽象类中的方法不能定义.c++中是虚函数可以定义，纯虚不能定义</li><li>c++有虚函数或者纯虚函数，类都会变成抽象类</li></ul><p>3.父类引用引用子类对象，</p><h5 id="多态的底层"><a href="#多态的底层" class="headerlink" title="多态的底层"></a>多态的底层</h5><p><img src="/2022/09/15/c-%E5%AD%A6%E4%B9%A0/image-20220929094648231.png"></p><h5 id="纯虚函数和抽象类"><a href="#纯虚函数和抽象类" class="headerlink" title="纯虚函数和抽象类"></a>纯虚函数和抽象类</h5><p>上面的例子用的是虚函数</p><p>可以发现，父类中的虚函数，就是定义了也不会调用他，而是直接被子类重写的函数覆盖掉</p><p>所以纯虚函数就诞生了</p><p>一个类中有纯虚函数，这个类就是抽象类</p><ul><li><p>抽象类不可以被实例化</p></li><li><p>抽象类中的函数不可以具体实现</p></li><li><p>抽象类就是为了被继承的，用于多态的操作</p></li><li><p>继承了抽象类的子类，必须重写抽象类中的所有纯虚函数.不然这个子类也变成抽象类</p></li></ul><h6 id="纯虚函数的使用"><a href="#纯虚函数的使用" class="headerlink" title="纯虚函数的使用"></a>纯虚函数的使用</h6><p><img src="/2022/09/15/c-%E5%AD%A6%E4%B9%A0/image-20220929110844056.png"></p><h5 id="虚析构和纯虚析构"><a href="#虚析构和纯虚析构" class="headerlink" title="虚析构和纯虚析构"></a>虚析构和纯虚析构</h5><h6 id="虚析构"><a href="#虚析构" class="headerlink" title="虚析构"></a>虚析构</h6><p>多态使用时，在子类中有属性开辟到堆区了，那么父类指针在释放时无法调用到子类的析构代码</p><p>所以虚析构和纯虚析构就诞生了</p><ul><li>虚析构和纯虚析构都可以解决父类指针释放问题</li><li>都需要有具体的实现</li><li>不同的是，如果有纯虚析构，那这个类不能被实例化，这个类属于抽象类</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="built_in">A</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A的构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//纯虚函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//普通析构函数会导致子类的析构函数不被调用</span></span><br><span class="line">    <span class="comment">//~A()</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//    cout &lt;&lt; &quot;A的析构函数调用&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用虚析构，子类的析构函数就会被调用.就可以释放堆区的内存了</span></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">A</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;A的虚析构函数调用&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> :<span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="built_in">B</span>(string name)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B的构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//用new在构造函数中在堆区开内存存放数据</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;name = <span class="keyword">new</span> <span class="built_in">string</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写父类纯虚函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B的func函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">B</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B的析构函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;name != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> name;</span><br><span class="line">            name = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    string* name;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//父类引用，引用子类对象.发生多态.调用子类的构造函数</span></span><br><span class="line">    A* a = <span class="keyword">new</span> <span class="built_in">B</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    a-&gt;<span class="built_in">func</span>();</span><br><span class="line">    <span class="keyword">delete</span> a;</span><br><span class="line">    a = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的运行结果是：</p><p>A的构造函数调用<br>B的构造函数调用<br>B的func()函数<br>A的析构函数调用</p><p>可以看到，并没有调用B的析构函数，没有调用B的析构，那也就是说B里面new的那个string并没有释放</p><p>所以需要用虚析构，他就会调用B中的析构函数了</p><h6 id="纯虚析构"><a href="#纯虚析构" class="headerlink" title="纯虚析构"></a>纯虚析构</h6><p>需要类内声明</p><p>类外实现.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="built_in">A</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A的构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//纯虚函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//普通析构函数会导致子类的析构函数不被调用</span></span><br><span class="line">    <span class="comment">//~A()</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//    cout &lt;&lt; &quot;A的析构函数调用&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用虚析构，子类的析构函数就会被调用.就可以释放堆区的内存了</span></span><br><span class="line">    <span class="comment">//virtual ~A()</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//    cout&lt;&lt;&quot;A的虚析构函数调用&quot;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//和虚析构不同的地方就这里一个</span></span><br><span class="line">    <span class="comment">//类内声明纯虚析构</span></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">A</span>() = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//类外来实现纯虚析构</span></span><br><span class="line">A::~<span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;A的虚析构调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>文件操作5步走：</p><ul><li><p>1.包含头文件<code>#include&lt;fstream&gt;</code></p></li><li><p>2.创建流对象</p><ul><li>ofstream:写操作</li><li>ifstream:读操作</li><li>fstream:读写操作</li></ul></li><li><p>3.打开文件<code>ofs.open(&quot;文件路径&quot;,打开方式);</code></p><ul><li>读文件时需要判断文件是否成功打开.</li></ul></li><li><p>4.写入数据<code>ofs&lt;&lt;&quot;写入的数据&quot;;</code></p></li><li><p>5.关闭文件<code>ofs.close();</code></p></li></ul><p><img src="/2022/09/15/c-%E5%AD%A6%E4%B9%A0/image-20220929145600611.png"></p><h3 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.包含头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//2.创建流对象</span></span><br><span class="line">ofstream ofs;</span><br><span class="line"><span class="comment">//3.打开文件</span></span><br><span class="line">ofs.<span class="built_in">open</span>(<span class="string">&quot;test001.txt&quot;</span>, ios::out);</span><br><span class="line"><span class="comment">//4.写入文件</span></span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;zhangsan,18&quot;</span> &lt;&lt; endl;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;张三 18&quot;</span> &lt;&lt; endl;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;666&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//5.关闭文件</span></span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.包含头文件#include&lt;fstream&gt;</span></span><br><span class="line"><span class="comment">//2.创建流对象ifstream ifs;</span></span><br><span class="line"><span class="comment">//3.打开文件ifs.open(&quot;文件路径&quot;，打开方式);</span></span><br><span class="line"><span class="comment">//      并判断是否打开成功ifs.is_open();返回值是bool类型</span></span><br><span class="line"><span class="comment">//4.读数据，4种读取方式</span></span><br><span class="line"><span class="comment">//5.关闭文件ifs.close();</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建流对象</span></span><br><span class="line">ifstream ifs;</span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">ifs.<span class="built_in">open</span>(<span class="string">&quot;test001.txt&quot;</span>, ios::in);</span><br><span class="line"><span class="comment">//判断是否打开成功</span></span><br><span class="line"><span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件打开失败&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//读数据</span></span><br><span class="line"><span class="comment">////第一种方式：创建一个足够大的字符数组，用循环把文件中的数据读到数组中打印.</span></span><br><span class="line"><span class="comment">//char buf[1024] = &#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">////读不到数据了，就返回假，循环停止.</span></span><br><span class="line"><span class="comment">//while (ifs &gt;&gt; buf)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; buf &lt;&lt; endl;;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">////第二种方式:使用ifs提供的getline(读取的数据存放在哪里，最多读多少字节)函数，这个函数是获取一行的意思</span></span><br><span class="line"><span class="comment">//char buf[1024] = &#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">//while (ifs.getline(buf,sizeof(buf)))</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">////第三种方式：使用字符串类型和getline函数，getline(基础输入流ifs,读取的数据存放的位置)</span></span><br><span class="line"><span class="comment">//string str;</span></span><br><span class="line"><span class="comment">//while (getline(ifs, str))</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; str &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">////第四种方式：使用ifs提供的get函数一个一个读取，然后一个一个打印</span></span><br><span class="line"><span class="comment">////遇到空格、\0、回车符、endl等会导致打印的乱七八糟。读的还慢，不推荐这种.</span></span><br><span class="line"><span class="comment">//char ch;</span></span><br><span class="line"><span class="comment">//while ((ch = ifs.get()) != EOF)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; ch;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>函数模板的作用：</p><p>建立一个通用函数，其函数返回值和参数类型可以不确定，用一个虚拟的类型来代表</p><p>c++另一种编程思想叫<strong>泛型编程</strong>，主要利用的技术就是模板</p><p>c++提供了两种模板机制：函数模板和类模板</p><p>函数模板的好处：</p><h3 id="函数模板的语法"><a href="#函数模板的语法" class="headerlink" title="函数模板的语法"></a>函数模板的语法</h3><p><img src="/2022/09/15/c-%E5%AD%A6%E4%B9%A0/image-20220929163615842.png"></p><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">func</span><span class="params">(T t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数模板的使用"><a href="#函数模板的使用" class="headerlink" title="函数模板的使用"></a>函数模板的使用</h3><p>自动类型推导，必须推导出一致的数据类型T，才可以使用</p><p>模板必须要确定出T的数据类型才能用</p><h5 id="1-自动类型推导"><a href="#1-自动类型推导" class="headerlink" title="1.自动类型推导"></a>1.自动类型推导</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模板，这里用typename还是class不影响，都可以使用</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="comment">//因为要交换两个数，所以传引用</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">my_Swap</span><span class="params">(T &amp;a, T &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T tmp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//模板会根据你输入数据类型，自动推导出数据类型</span></span><br><span class="line"><span class="built_in">my_Swap</span>(a, b);</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-显示指定类型"><a href="#2-显示指定类型" class="headerlink" title="2.显示指定类型"></a>2.显示指定类型</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//指定他T是什么数据类型</span></span><br><span class="line">    <span class="built_in">my_Swap</span>&lt;<span class="type">int</span>&gt;(a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="普通函数与函数模板的区别"><a href="#普通函数与函数模板的区别" class="headerlink" title="普通函数与函数模板的区别"></a>普通函数与函数模板的区别</h3><p>1.普通函数调用，可以发生隐式类型转化</p><ul><li>比如一个字符数据类型和一个整形相加，传到函数中会被当成整形计算，再通过返回值确定是返回字符还是整形.</li></ul><p>函数模板，用自动类型推导，不可以发生隐式类型转换</p><p>函数模板，用显示指定类型，可以发生隐式类型转换</p><h3 id="普通函数与函数模板的调用区别"><a href="#普通函数与函数模板的调用区别" class="headerlink" title="普通函数与函数模板的调用区别"></a>普通函数与函数模板的调用区别</h3><p>1.如果函数模板和普通函数都可以实现，优先调用普通函数</p><ul><li>如果说普通函数只有函数声明，而没有具体实现，那么编译器会直接报错，而不是去调用模板函数</li></ul><p>2.可以通过空模板参数列表来强制掉用函数模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//空模板参数列表</span></span><br><span class="line">    func&lt;&gt;(<span class="type">int</span> a,<span class="type">int</span> b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.函数模板也可以发生重载</p><p>4.如果函数模板可以产生更好的匹配，优先调用函数模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//普通函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;普通函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数模板</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;函数模板调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//当参数和普通函数匹配，会优先调用普通函数</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">func</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为char类型传入普通函数，要发生隐式类型转换.</span></span><br><span class="line"><span class="comment">//而传入函数模板,只要推断出T是char类型就可以了，所以选择了调用函数模板</span></span><br><span class="line"><span class="type">char</span> ch1 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">char</span> ch2 = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="built_in">func</span>(ch1, ch2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模板的局限性"><a href="#模板的局限性" class="headerlink" title="模板的局限性"></a>模板的局限性</h3><p>当数据类型是自定义类型的时候，模板就会出问题.</p><p>代码写上去的时候不会报错，运行起来就会报错.</p><p>因为T是运行的时候才判断T是什么数据类型.</p><p>那怎么办呢？</p><p>答案是：利用具体化的模板，可以解决自定义类型的通用化</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typroa+hexo+github插入图片教程(已解决上传后无法显示图片的问题)</title>
      <link href="/2022/07/31/Typroa-hexo-github%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%95%99%E7%A8%8B-%E5%B7%B2%E8%A7%A3%E5%86%B3%E4%B8%8A%E4%BC%A0%E5%90%8E%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2022/07/31/Typroa-hexo-github%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%95%99%E7%A8%8B-%E5%B7%B2%E8%A7%A3%E5%86%B3%E4%B8%8A%E4%BC%A0%E5%90%8E%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="前景回顾"><a href="#前景回顾" class="headerlink" title="前景回顾"></a>前景回顾</h2><p>一开始我使用Vscode+<img src="/2022/07/31/Typroa-hexo-github%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%95%99%E7%A8%8B-%E5%B7%B2%E8%A7%A3%E5%86%B3%E4%B8%8A%E4%BC%A0%E5%90%8E%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/image-20220731160001703.png"></p><p>这个是插件，使用这个插件，只要将图片复制，或者qq截的图，按快捷键ctrl+alt+v就可以自动插入vocode中.</p><p>插入的效果是这样的<img src="/2022/07/31/Typroa-hexo-github%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%95%99%E7%A8%8B-%E5%B7%B2%E8%A7%A3%E5%86%B3%E4%B8%8A%E4%BC%A0%E5%90%8E%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/image-20220731160204350.png" alt="image-20220731160204350"></p><p>这种插入方式，图片是会保存在你markdown当前文件夹下.</p><p>具体效果是这样的：<img src="/2022/07/31/Typroa-hexo-github%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%95%99%E7%A8%8B-%E5%B7%B2%E8%A7%A3%E5%86%B3%E4%B8%8A%E4%BC%A0%E5%90%8E%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/image-20220731160723150.png" alt="image-20220731160723150"></p><p><img src="/2022/07/31/Typroa-hexo-github%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%95%99%E7%A8%8B-%E5%B7%B2%E8%A7%A3%E5%86%B3%E4%B8%8A%E4%BC%A0%E5%90%8E%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/image-20220731160400322.png" alt="image-20220731160400322"></p><p>图片和markdown在一起，多了之后会很烦.</p><p>而且还有一个重要的问题.</p><p>在这个文件下放着的图片，在本体预览是没问题的.但是上传到github后，通过在线的博客，图片是加载不出来的.</p><p>换个说法，在_posts里的图片，上传到github后是加载不出来的.</p><p>那怎么才能加载出来呢</p><p><img src="/2022/07/31/Typroa-hexo-github%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%95%99%E7%A8%8B-%E5%B7%B2%E8%A7%A3%E5%86%B3%E4%B8%8A%E4%BC%A0%E5%90%8E%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/image-20220731161047901.png" alt="image-20220731161047901"></p><p>这么操作后，出现的效果是，你每次使用hexo创建（new）新的markdown时会自动创建一个和你markdown文件相同名字的文件夹.</p><p>然后把图片<strong>复制并放进</strong>这个相同名字的文件夹里.就可以在线访问图片了.</p><p><img src="/2022/07/31/Typroa-hexo-github%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%95%99%E7%A8%8B-%E5%B7%B2%E8%A7%A3%E5%86%B3%E4%B8%8A%E4%BC%A0%E5%90%8E%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/image-20220731162058632.png" alt="image-20220731162058632"></p><blockquote><p>问：为什么我不一开始就把图片放到对应的文件夹里，而是先放到_posts，在复制进对应的文件夹里</p><p>答：因为，如果你在vscode代码里是<img src="/2022/07/31/Typroa-hexo-github%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%95%99%E7%A8%8B-%E5%B7%B2%E8%A7%A3%E5%86%B3%E4%B8%8A%E4%BC%A0%E5%90%8E%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/image-20220731162328194.png" alt="image-20220731162328194">这么写的图片就预览不出来.（预览是安装的插件，才有的预览.)</p></blockquote><blockquote><p>问：既然上面的方法本地或在线访问都没问题，为什么还要改别的方法呢？</p><p>答:上面的方法，随着图片和markdown越来越多，那打开文件会越来越卡.还会特别乱，还不如下面要说的方法快捷.</p></blockquote><ul><li>主要原因是当时刚学，弄不懂才用的这个偏方.</li></ul><h2 id="使用typora插入图片，保证上传github还能被访问"><a href="#使用typora插入图片，保证上传github还能被访问" class="headerlink" title="使用typora插入图片，保证上传github还能被访问."></a>使用typora插入图片，保证上传github还能被访问.</h2><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>1.已经设置好了创建markdown时会自动创建和markdown相同名字的文件夹.（没设置的看前景回顾里有）</p><p>2.使用Typora</p><p>3.是使用github+hexo搭建的博客，</p><p>4.图片是在本地的.而不是上传或者使用图床.</p><h2 id="开始设置"><a href="#开始设置" class="headerlink" title="开始设置"></a>开始设置</h2><p>1.打开Typora，找到文件，往下翻找到偏好设置.点进去.</p><p><img src="/2022/07/31/Typroa-hexo-github%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%95%99%E7%A8%8B-%E5%B7%B2%E8%A7%A3%E5%86%B3%E4%B8%8A%E4%BC%A0%E5%90%8E%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/image-20220731163453970.png" alt="image-20220731163453970"></p><hr><p><img src="/2022/07/31/Typroa-hexo-github%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%95%99%E7%A8%8B-%E5%B7%B2%E8%A7%A3%E5%86%B3%E4%B8%8A%E4%BC%A0%E5%90%8E%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/image-20220731165248345.png" alt="image-20220731165248345"></p><p><img src="/2022/07/31/Typroa-hexo-github%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%95%99%E7%A8%8B-%E5%B7%B2%E8%A7%A3%E5%86%B3%E4%B8%8A%E4%BC%A0%E5%90%8E%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/image-20220731164823999.png" alt="image-20220731164823999"></p><h3 id="设置完成"><a href="#设置完成" class="headerlink" title="设置完成"></a>设置完成</h3><p>按照上面的设置完成后就可以在Typora插入图片了</p><p>Typora插入图片快捷键ctrl+shift+i</p><p>不过你上面那些设置好后，你只需要复制图片，或者说qq截图的图片直接在typora里ctrl+v就可以了.</p><p>设置完全后你用ctrl+v插入图片是这样的</p><p><img src="/2022/07/31/Typroa-hexo-github%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%95%99%E7%A8%8B-%E5%B7%B2%E8%A7%A3%E5%86%B3%E4%B8%8A%E4%BC%A0%E5%90%8E%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/image-20220731165842197.png" alt="image-20220731165842197"></p><p><img src="/2022/07/31/Typroa-hexo-github%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%95%99%E7%A8%8B-%E5%B7%B2%E8%A7%A3%E5%86%B3%E4%B8%8A%E4%BC%A0%E5%90%8E%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/image-20220731170223120.png" alt="image-20220731170223120"></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>错误: 类***是公共的, 应在名为 ***.java 的文件中声明</title>
      <link href="/2022/07/20/%E9%94%99%E8%AF%AF-%E7%B1%BB-%E6%98%AF%E5%85%AC%E5%85%B1%E7%9A%84-%E5%BA%94%E5%9C%A8%E5%90%8D%E4%B8%BA-java-%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%AD%E5%A3%B0%E6%98%8E/"/>
      <url>/2022/07/20/%E9%94%99%E8%AF%AF-%E7%B1%BB-%E6%98%AF%E5%85%AC%E5%85%B1%E7%9A%84-%E5%BA%94%E5%9C%A8%E5%90%8D%E4%B8%BA-java-%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%AD%E5%A3%B0%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h2 id="错误描述"><a href="#错误描述" class="headerlink" title="错误描述"></a>错误描述</h2><p>使用javac命令编译.java文件的时候报错：错误: 类***是公共的, 应在名为 ***.java 的文件中声明</p><h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h2><p>类名和.java的文件名不相同</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>找到<code>public class 类名</code>，将这个类名修改和.java文件名一致</p>]]></content>
      
      
      <categories>
          
          <category> 疑难解答 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>命名规范建议</title>
      <link href="/2022/07/19/%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%E5%BB%BA%E8%AE%AE/"/>
      <url>/2022/07/19/%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%E5%BB%BA%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="驼峰法"><a href="#驼峰法" class="headerlink" title="驼峰法"></a>驼峰法</h2><p>定义、命名函数或变量时，第一个单词以小写开始，第二个单词首字母大写.<br>或者第一个单词小写开始，之后的单词首字母全部大写.</p><h2 id="小驼峰法（变量命名）"><a href="#小驼峰法（变量命名）" class="headerlink" title="小驼峰法（变量命名）"></a>小驼峰法（变量命名）</h2><p>除第一个单词之外，其他单词首字母大写<br>常用于变量、函数名等</p><h2 id="大驼峰法（函数命名）"><a href="#大驼峰法（函数命名）" class="headerlink" title="大驼峰法（函数命名）"></a>大驼峰法（函数命名）</h2><p>每个单词的首字母都大写<br>常用于类名、属性等</p>]]></content>
      
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>通用文档</title>
      <link href="/2022/07/19/%E9%80%9A%E7%94%A8%E6%96%87%E6%A1%A3/"/>
      <url>/2022/07/19/%E9%80%9A%E7%94%A8%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="ASCLL码表"><a href="#ASCLL码表" class="headerlink" title="ASCLL码表"></a>ASCLL码表</h2><table><thead><tr><th>十进制 DEC</th><th>八进制 OCT</th><th>十六进制 HEX</th><th>二进制 BIN</th><th>符号 Symbol</th><th>HTML 实体编码</th><th>中文解释 Description</th></tr></thead><tbody><tr><td>0</td><td>000</td><td>00</td><td>00000000</td><td>NUL</td><td>&amp;#000;</td><td>空字符</td></tr><tr><td>1</td><td>001</td><td>01</td><td>00000001</td><td>SOH</td><td>&amp;#001;</td><td>标题开始</td></tr><tr><td>2</td><td>002</td><td>02</td><td>00000010</td><td>STX</td><td>&amp;#002;</td><td>正文开始</td></tr><tr><td>3</td><td>003</td><td>03</td><td>00000011</td><td>ETX</td><td>&amp;#003;</td><td>正文结束</td></tr><tr><td>4</td><td>004</td><td>04</td><td>00000100</td><td>EOT</td><td>&amp;#004;</td><td>传输结束</td></tr><tr><td>5</td><td>005</td><td>05</td><td>00000101</td><td>ENQ</td><td>&amp;#005;</td><td>询问</td></tr><tr><td>6</td><td>006</td><td>06</td><td>00000110</td><td>ACK</td><td>&amp;#006;</td><td>收到通知</td></tr><tr><td>7</td><td>007</td><td>07</td><td>00000111</td><td>BEL</td><td>&amp;#007;</td><td>铃</td></tr><tr><td>8</td><td>010</td><td>08</td><td>00001000</td><td>BS</td><td>&amp;#008;</td><td>退格</td></tr><tr><td>9</td><td>011</td><td>09</td><td>00001001</td><td>HT</td><td>&amp;#009;</td><td>水平制表符</td></tr><tr><td>10</td><td>012</td><td>0A</td><td>00001010</td><td>LF</td><td>&amp;#010;</td><td>换行键</td></tr><tr><td>11</td><td>013</td><td>0B</td><td>00001011</td><td>VT</td><td>&amp;#011;</td><td>垂直制表符</td></tr><tr><td>12</td><td>014</td><td>0C</td><td>00001100</td><td>FF</td><td>&amp;#012;</td><td>换页键</td></tr><tr><td>13</td><td>015</td><td>0D</td><td>00001101</td><td>CR</td><td>&amp;#013;</td><td>回车键</td></tr><tr><td>14</td><td>016</td><td>0E</td><td>00001110</td><td>SO</td><td>&amp;#014;</td><td>移出</td></tr><tr><td>15</td><td>017</td><td>0F</td><td>00001111</td><td>SI</td><td>&amp;#015;</td><td>移入</td></tr><tr><td>16</td><td>020</td><td>10</td><td>00010000</td><td>DLE</td><td>&amp;#016;</td><td>数据链路转义</td></tr><tr><td>17</td><td>021</td><td>11</td><td>00010001</td><td>DC1</td><td>&amp;#017;</td><td>设备控制 1</td></tr><tr><td>18</td><td>022</td><td>12</td><td>00010010</td><td>DC2</td><td>&amp;#018;</td><td>设备控制 2</td></tr><tr><td>19</td><td>023</td><td>13</td><td>00010011</td><td>DC3</td><td>&amp;#019;</td><td>设备控制 3</td></tr><tr><td>20</td><td>024</td><td>14</td><td>00010100</td><td>DC4</td><td>&amp;#020;</td><td>设备控制 4</td></tr><tr><td>21</td><td>025</td><td>15</td><td>00010101</td><td>NAK</td><td>&amp;#021;</td><td>拒绝接收</td></tr><tr><td>22</td><td>026</td><td>16</td><td>00010110</td><td>SYN</td><td>&amp;#022;</td><td>同步空闲</td></tr><tr><td>23</td><td>027</td><td>17</td><td>00010111</td><td>ETB</td><td>&amp;#023;</td><td>传输块结束</td></tr><tr><td>24</td><td>030</td><td>18</td><td>00011000</td><td>CAN</td><td>&amp;#024;</td><td>取消</td></tr><tr><td>25</td><td>031</td><td>19</td><td>00011001</td><td>EM</td><td>&amp;#025;</td><td>介质中断</td></tr><tr><td>26</td><td>032</td><td>1A</td><td>00011010</td><td>SUB</td><td>&amp;#026;</td><td>替换</td></tr><tr><td>27</td><td>033</td><td>1B</td><td>00011011</td><td>ESC</td><td>&amp;#027;</td><td>换码符</td></tr><tr><td>28</td><td>034</td><td>1C</td><td>00011100</td><td>FS</td><td>&amp;#028;</td><td>文件分隔符</td></tr><tr><td>29</td><td>035</td><td>1D</td><td>00011101</td><td>GS</td><td>&amp;#029;</td><td>组分隔符</td></tr><tr><td>30</td><td>036</td><td>1E</td><td>00011110</td><td>RS</td><td>&amp;#030;</td><td>记录分离符</td></tr><tr><td>31</td><td>037</td><td>1F</td><td>00011111</td><td>US</td><td>&amp;#031;</td><td>单元分隔符</td></tr></tbody></table><h3 id="ASCII码表（打印字符）"><a href="#ASCII码表（打印字符）" class="headerlink" title="ASCII码表（打印字符）"></a>ASCII码表（打印字符）</h3><table><thead><tr><th>十进制 DEC</th><th>八进制 OCT</th><th>十六进制 HEX</th><th>二进制 BIN</th><th>符号 Symbol</th><th>HTML 实体编码</th><th>中文解释 Description</th></tr></thead><tbody><tr><td>32</td><td>040</td><td>20</td><td>00100000</td><td></td><td>&amp;#032;</td><td>空格</td></tr><tr><td>33</td><td>041</td><td>21</td><td>00100001</td><td>!</td><td>&amp;#033;</td><td>感叹号</td></tr><tr><td>34</td><td>042</td><td>22</td><td>00100010</td><td>“</td><td>&amp;#034;</td><td>双引号</td></tr><tr><td>35</td><td>043</td><td>23</td><td>00100011</td><td>#</td><td>&amp;#035;</td><td>井号</td></tr><tr><td>36</td><td>044</td><td>24</td><td>00100100</td><td>$</td><td>&amp;#036;</td><td>美元符</td></tr><tr><td>37</td><td>045</td><td>25</td><td>00100101</td><td>%</td><td>&amp;#037;</td><td>百分号</td></tr><tr><td>38</td><td>046</td><td>26</td><td>00100110</td><td>&amp;</td><td>&amp;#038;</td><td>与</td></tr><tr><td>39</td><td>047</td><td>27</td><td>00100111</td><td>‘</td><td>&amp;#039;</td><td>单引号</td></tr><tr><td>40</td><td>050</td><td>28</td><td>00101000</td><td>(</td><td>&amp;#040;</td><td>左括号</td></tr><tr><td>41</td><td>051</td><td>29</td><td>00101001</td><td>)</td><td>&amp;#041;</td><td>右括号</td></tr><tr><td>42</td><td>052</td><td>2A</td><td>00101010</td><td>*</td><td>&amp;#042;</td><td>星号</td></tr><tr><td>43</td><td>053</td><td>2B</td><td>00101011</td><td>+</td><td>&amp;#043;</td><td>加号</td></tr><tr><td>44</td><td>054</td><td>2C</td><td>00101100</td><td>,</td><td>&amp;#044;</td><td>逗号</td></tr><tr><td>45</td><td>055</td><td>2D</td><td>00101101</td><td>-</td><td>&amp;#045;</td><td>连字号或减号</td></tr><tr><td>46</td><td>056</td><td>2E</td><td>00101110</td><td>.</td><td>&amp;#046;</td><td>句点或小数点</td></tr><tr><td>47</td><td>057</td><td>2F</td><td>00101111</td><td>&#x2F;</td><td>&amp;#047;</td><td>斜杠</td></tr><tr><td>48</td><td>060</td><td>30</td><td>00110000</td><td>0</td><td>&amp;#048;</td><td>0</td></tr><tr><td>49</td><td>061</td><td>31</td><td>00110001</td><td>1</td><td>&amp;#049;</td><td>1</td></tr><tr><td>50</td><td>062</td><td>32</td><td>00110010</td><td>2</td><td>&amp;#050;</td><td>2</td></tr><tr><td>51</td><td>063</td><td>33</td><td>00110011</td><td>3</td><td>&amp;#051;</td><td>3</td></tr><tr><td>52</td><td>064</td><td>34</td><td>00110100</td><td>4</td><td>&amp;#052;</td><td>4</td></tr><tr><td>53</td><td>065</td><td>35</td><td>00110101</td><td>5</td><td>&amp;#053;</td><td>5</td></tr><tr><td>54</td><td>066</td><td>36</td><td>00110110</td><td>6</td><td>&amp;#054;</td><td>6</td></tr><tr><td>55</td><td>067</td><td>37</td><td>00110111</td><td>7</td><td>&amp;#055;</td><td>7</td></tr><tr><td>56</td><td>070</td><td>38</td><td>00111000</td><td>8</td><td>&amp;#056;</td><td>8</td></tr><tr><td>57</td><td>071</td><td>39</td><td>00111001</td><td>9</td><td>&amp;#057;</td><td>9</td></tr><tr><td>58</td><td>072</td><td>3A</td><td>00111010</td><td>:</td><td>&amp;#058;</td><td>冒号</td></tr><tr><td>59</td><td>073</td><td>3B</td><td>00111011</td><td>;</td><td>&amp;#059;</td><td>分号</td></tr><tr><td>60</td><td>074</td><td>3C</td><td>00111100</td><td>&lt;</td><td>&amp;#060;</td><td>小于</td></tr><tr><td>61</td><td>075</td><td>3D</td><td>00111101</td><td>&#x3D;</td><td>&amp;#061;</td><td>等号</td></tr><tr><td>62</td><td>076</td><td>3E</td><td>00111110</td><td>&gt;</td><td>&amp;#062;</td><td>大于</td></tr><tr><td>63</td><td>077</td><td>3F</td><td>00111111</td><td>?</td><td>&amp;#063;</td><td>问号</td></tr><tr><td>64</td><td>100</td><td>40</td><td>01000000</td><td>@</td><td>&amp;#064;</td><td>电子邮件符号</td></tr><tr><td>65</td><td>101</td><td>41</td><td>01000001</td><td>A</td><td>&amp;#065;</td><td>大写字母 A</td></tr><tr><td>66</td><td>102</td><td>42</td><td>01000010</td><td>B</td><td>&amp;#066;</td><td>大写字母 B</td></tr><tr><td>67</td><td>103</td><td>43</td><td>01000011</td><td>C</td><td>&amp;#067;</td><td>大写字母 C</td></tr><tr><td>68</td><td>104</td><td>44</td><td>01000100</td><td>D</td><td>&amp;#068;</td><td>大写字母 D</td></tr><tr><td>69</td><td>105</td><td>45</td><td>01000101</td><td>E</td><td>&amp;#069;</td><td>大写字母 E</td></tr><tr><td>70</td><td>106</td><td>46</td><td>01000110</td><td>F</td><td>&amp;#070;</td><td>大写字母 F</td></tr><tr><td>71</td><td>107</td><td>47</td><td>01000111</td><td>G</td><td>&amp;#071;</td><td>大写字母 G</td></tr><tr><td>72</td><td>110</td><td>48</td><td>01001000</td><td>H</td><td>&amp;#072;</td><td>大写字母 H</td></tr><tr><td>73</td><td>111</td><td>49</td><td>01001001</td><td>I</td><td>&amp;#073;</td><td>大写字母 I</td></tr><tr><td>74</td><td>112</td><td>4A</td><td>01001010</td><td>J</td><td>&amp;#074;</td><td>大写字母 J</td></tr><tr><td>75</td><td>113</td><td>4B</td><td>01001011</td><td>K</td><td>&amp;#075;</td><td>大写字母 K</td></tr><tr><td>76</td><td>114</td><td>4C</td><td>01001100</td><td>L</td><td>&amp;#076;</td><td>大写字母 L</td></tr><tr><td>77</td><td>115</td><td>4D</td><td>01001101</td><td>M</td><td>&amp;#077;</td><td>大写字母 M</td></tr><tr><td>78</td><td>116</td><td>4E</td><td>01001110</td><td>N</td><td>&amp;#078;</td><td>大写字母 N</td></tr><tr><td>79</td><td>117</td><td>4F</td><td>01001111</td><td>O</td><td>&amp;#079;</td><td>大写字母 O</td></tr><tr><td>80</td><td>120</td><td>50</td><td>01010000</td><td>P</td><td>&amp;#080;</td><td>大写字母 P</td></tr><tr><td>81</td><td>121</td><td>51</td><td>01010001</td><td>Q</td><td>&amp;#081;</td><td>大写字母 Q</td></tr><tr><td>82</td><td>122</td><td>52</td><td>01010010</td><td>R</td><td>&amp;#082;</td><td>大写字母 R</td></tr><tr><td>83</td><td>123</td><td>53</td><td>01010011</td><td>S</td><td>&amp;#083;</td><td>大写字母 S</td></tr><tr><td>84</td><td>124</td><td>54</td><td>01010100</td><td>T</td><td>&amp;#084;</td><td>大写字母 T</td></tr><tr><td>85</td><td>125</td><td>55</td><td>01010101</td><td>U</td><td>&amp;#085;</td><td>大写字母 U</td></tr><tr><td>86</td><td>126</td><td>56</td><td>01010110</td><td>V</td><td>&amp;#086;</td><td>大写字母 V</td></tr><tr><td>87</td><td>127</td><td>57</td><td>01010111</td><td>W</td><td>&amp;#087</td><td>大写字母 W</td></tr><tr><td>88</td><td>130</td><td>58</td><td>01011000</td><td>X</td><td>&amp;#088;</td><td>大写字母 X</td></tr><tr><td>89</td><td>131</td><td>59</td><td>01011001</td><td>Y</td><td>&amp;#089;</td><td>大写字母 Y</td></tr><tr><td>90</td><td>132</td><td>5A</td><td>01011010</td><td>Z</td><td>&amp;#090;</td><td>大写字母 Z</td></tr><tr><td>91</td><td>133</td><td>5B</td><td>01011011</td><td>[</td><td>&amp;#091;</td><td>左中括号</td></tr><tr><td>92</td><td>134</td><td>5C</td><td>01011100</td><td>\</td><td>&amp;#092;</td><td>反斜杠</td></tr><tr><td>93</td><td>135</td><td>5D</td><td>01011101</td><td>]</td><td>&amp;#093;</td><td>右中括号</td></tr><tr><td>94</td><td>136</td><td>5E</td><td>01011110</td><td>^</td><td>&amp;#094;</td><td>音调符号</td></tr><tr><td>95</td><td>137</td><td>5F</td><td>01011111</td><td>_</td><td>&amp;#095;</td><td>下划线</td></tr><tr><td>96</td><td>140</td><td>60</td><td>01100000</td><td>&#96;</td><td>&amp;#096;</td><td>重音符</td></tr><tr><td>97</td><td>141</td><td>61</td><td>01100001</td><td>a</td><td>&amp;#097;</td><td>小写字母 a</td></tr><tr><td>98</td><td>142</td><td>62</td><td>01100010</td><td>b</td><td>&amp;#098;</td><td>小写字母 b</td></tr><tr><td>99</td><td>143</td><td>63</td><td>01100011</td><td>c</td><td>&amp;#099;</td><td>小写字母 c</td></tr><tr><td>100</td><td>144</td><td>64</td><td>01100100</td><td>d</td><td>&amp;#100;</td><td>小写字母 d</td></tr><tr><td>101</td><td>145</td><td>65</td><td>01100101</td><td>e</td><td>&amp;#101;</td><td>小写字母 e</td></tr><tr><td>102</td><td>146</td><td>66</td><td>01100110</td><td>f</td><td>&amp;#102;</td><td>小写字母 f</td></tr><tr><td>103</td><td>147</td><td>67</td><td>01100111</td><td>g</td><td>&amp;#103;</td><td>小写字母 g</td></tr><tr><td>104</td><td>150</td><td>68</td><td>01101000</td><td>h</td><td>&amp;#104;</td><td>小写字母 h</td></tr><tr><td>105</td><td>151</td><td>69</td><td>01101001</td><td>i</td><td>&amp;#105;</td><td>小写字母 i</td></tr><tr><td>106</td><td>152</td><td>6A</td><td>01101010</td><td>j</td><td>&amp;#106;</td><td>小写字母 j</td></tr><tr><td>107</td><td>153</td><td>6B</td><td>01101011</td><td>k</td><td>&amp;#107;</td><td>小写字母 k</td></tr><tr><td>108</td><td>154</td><td>6C</td><td>01101100</td><td>l</td><td>&amp;#108;</td><td>小写字母 l</td></tr><tr><td>109</td><td>155</td><td>6D</td><td>01101101</td><td>m</td><td>&amp;#109;</td><td>小写字母 m</td></tr><tr><td>110</td><td>156</td><td>6E</td><td>01101110</td><td>n</td><td>&amp;#110;</td><td>小写字母 n</td></tr><tr><td>111</td><td>157</td><td>6F</td><td>01101111</td><td>o</td><td>&amp;#111;</td><td>小写字母 o</td></tr><tr><td>112</td><td>160</td><td>70</td><td>01110000</td><td>p</td><td>&amp;#112;</td><td>小写字母 p</td></tr><tr><td>113</td><td>161</td><td>71</td><td>01110001</td><td>q</td><td>&amp;#113;</td><td>小写字母 q</td></tr><tr><td>114</td><td>162</td><td>72</td><td>01110010</td><td>r</td><td>&amp;#114;</td><td>小写字母 r</td></tr><tr><td>115</td><td>163</td><td>73</td><td>01110011</td><td>s</td><td>&amp;#115;</td><td>小写字母 s</td></tr><tr><td>116</td><td>164</td><td>74</td><td>01110100</td><td>t</td><td>&amp;#116;</td><td>小写字母 t</td></tr><tr><td>117</td><td>165</td><td>75</td><td>01110101</td><td>u</td><td>&amp;#117;</td><td>小写字母 u</td></tr><tr><td>118</td><td>166</td><td>76</td><td>01110110</td><td>v</td><td>&amp;#118;</td><td>小写字母 v</td></tr><tr><td>119</td><td>167</td><td>77</td><td>01110111</td><td>w</td><td>&amp;#119;</td><td>小写字母 w</td></tr><tr><td>120</td><td>170</td><td>78</td><td>01111000</td><td>x</td><td>&amp;#120;</td><td>小写字母 x</td></tr><tr><td>121</td><td>171</td><td>79</td><td>01111001</td><td>y</td><td>&amp;#121;</td><td>小写字母 y</td></tr><tr><td>122</td><td>172</td><td>7A</td><td>01111010</td><td>z</td><td>&amp;#122;</td><td>小写字母 z</td></tr><tr><td>123</td><td>173</td><td>7B</td><td>01111011</td><td>{</td><td>&amp;#123;</td><td>左大括号</td></tr><tr><td>124</td><td>174</td><td>7C</td><td>01111100</td><td>|</td><td>&amp;#124;</td><td>垂直线</td></tr><tr><td>125</td><td>175</td><td>7D</td><td>01111101</td><td>}</td><td>&amp;#125;</td><td>右大括号</td></tr><tr><td>126</td><td>176</td><td>7E</td><td>01111110</td><td>~</td><td>&amp;#126;</td><td>波浪号</td></tr><tr><td>127</td><td>177</td><td>7F</td><td>01111111</td><td></td><td>&amp;#127;</td><td>删除</td></tr></tbody></table><h3 id="ASCII码表（扩展字符）"><a href="#ASCII码表（扩展字符）" class="headerlink" title="ASCII码表（扩展字符）"></a>ASCII码表（扩展字符）</h3><table><thead><tr><th>十进制 DEC</th><th>八进制 OCT</th><th>十六进制 HEX</th><th>二进制 BIN</th><th>符号 Symbol</th><th>HTML 实体编码</th><th>中文解释 Description</th></tr></thead><tbody><tr><td>128</td><td>200</td><td>80</td><td>10000000</td><td>€</td><td>&amp;#128;</td><td>欧盟符号</td></tr><tr><td>129</td><td>201</td><td>81</td><td>10000001</td><td></td><td></td><td></td></tr><tr><td>130</td><td>202</td><td>82</td><td>10000010</td><td>‚</td><td>&amp;#130;</td><td>单低 9 引号</td></tr><tr><td>131</td><td>203</td><td>83</td><td>10000011</td><td>ƒ</td><td>&amp;#131;</td><td>带钩的 拉丁小写字母f</td></tr><tr><td>132</td><td>204</td><td>84</td><td>10000100</td><td>„</td><td>&amp;#132;</td><td>双低 9 引号</td></tr><tr><td>133</td><td>205</td><td>85</td><td>10000101</td><td>…</td><td>&amp;#133;</td><td>水平省略号</td></tr><tr><td>134</td><td>206</td><td>86</td><td>10000110</td><td>†</td><td>&amp;#134;</td><td>剑号</td></tr><tr><td>135</td><td>207</td><td>87</td><td>10000111</td><td>‡</td><td>&amp;#135;</td><td>双剑号</td></tr><tr><td>136</td><td>210</td><td>88</td><td>10001000</td><td>ˆ</td><td>&amp;#136;</td><td>修正字符 抑扬音符号</td></tr><tr><td>137</td><td>211</td><td>89</td><td>10001001</td><td>‰</td><td>&amp;#137;</td><td>千分号</td></tr><tr><td>138</td><td>212</td><td>8A</td><td>10001010</td><td>Š</td><td>&amp;#138;</td><td>带弯音号的 拉丁大写字母 S</td></tr><tr><td>139</td><td>213</td><td>8B</td><td>10001011</td><td>‹</td><td>&amp;#139;</td><td>左单书名号</td></tr><tr><td>140</td><td>214</td><td>8C</td><td>10001100</td><td>Œ</td><td>&amp;#140;</td><td>拉丁大写组合 OE</td></tr><tr><td>141</td><td>215</td><td>8D</td><td>10001101</td><td></td><td></td><td></td></tr><tr><td>142</td><td>216</td><td>8E</td><td>10001110</td><td>Ž</td><td>&amp;#142;</td><td>带弯音号的 拉丁大写字母 z</td></tr><tr><td>143</td><td>217</td><td>8F</td><td>10001111</td><td></td><td></td><td></td></tr><tr><td>144</td><td>220</td><td>90</td><td>10010000</td><td></td><td></td><td></td></tr><tr><td>145</td><td>221</td><td>91</td><td>10010001</td><td>‘</td><td>&amp;#145;</td><td>左单引号</td></tr><tr><td>146</td><td>222</td><td>92</td><td>10010010</td><td>’</td><td>&amp;#146;</td><td>右单引号</td></tr><tr><td>147</td><td>223</td><td>93</td><td>10010011</td><td>“</td><td>&amp;#147;</td><td>左双引号</td></tr><tr><td>148</td><td>224</td><td>94</td><td>10010100</td><td>”</td><td>&amp;#148;</td><td>右双引号</td></tr><tr><td>149</td><td>225</td><td>95</td><td>10010101</td><td>•</td><td>&amp;#149;</td><td></td></tr><tr><td>150</td><td>226</td><td>96</td><td>10010110</td><td>–</td><td>&amp;#150;</td><td>半长破折号</td></tr><tr><td>151</td><td>227</td><td>97</td><td>10010111</td><td>—</td><td>&amp;#151;</td><td>全长破折号</td></tr><tr><td>152</td><td>230</td><td>98</td><td>10011000</td><td>˜</td><td>&amp;#152;</td><td>小波浪线</td></tr><tr><td>153</td><td>231</td><td>99</td><td>10011001</td><td>™</td><td>&amp;#153;</td><td></td></tr><tr><td>154</td><td>232</td><td>9A</td><td>10011010</td><td>š</td><td>&amp;#154;</td><td>带弯音号的 拉丁小写字母 s</td></tr><tr><td>155</td><td>233</td><td>9B</td><td>10011011</td><td>›</td><td>&amp;#155;</td><td>右单书名号</td></tr><tr><td>156</td><td>234</td><td>9C</td><td>10011100</td><td>œ</td><td>&amp;#156;</td><td>拉丁小写组合 oe</td></tr><tr><td>157</td><td>235</td><td>9D</td><td>10011101</td><td></td><td></td><td></td></tr><tr><td>158</td><td>236</td><td>9E</td><td>10011110</td><td>ž</td><td>&amp;#158;</td><td>带弯音号的 拉丁小写字母 z</td></tr><tr><td>159</td><td>237</td><td>9F</td><td>10011111</td><td>Ÿ</td><td>&amp;#159;</td><td>带弯音号的 拉丁大写字母 Y</td></tr><tr><td>160</td><td>240</td><td>A0</td><td>10100000</td><td></td><td>&amp;#160;</td><td></td></tr><tr><td>161</td><td>241</td><td>A1</td><td>10100001</td><td>¡</td><td>&amp;#161;</td><td>反向感叹号</td></tr><tr><td>162</td><td>242</td><td>A2</td><td>10100010</td><td>¢</td><td>&amp;#162;</td><td>分币符号</td></tr><tr><td>163</td><td>243</td><td>A3</td><td>10100011</td><td>£</td><td>&amp;#163;</td><td>英磅符号</td></tr><tr><td>164</td><td>244</td><td>A4</td><td>10100100</td><td>¤</td><td>&amp;#164;</td><td></td></tr><tr><td>165</td><td>245</td><td>A5</td><td>10100101</td><td>¥</td><td>&amp;#165;</td><td>人民币符号</td></tr><tr><td>166</td><td>246</td><td>A6</td><td>10100110</td><td>¦</td><td>&amp;#166;</td><td></td></tr><tr><td>167</td><td>247</td><td>A7</td><td>10100111</td><td>§</td><td>&amp;#167;</td><td>章节符号</td></tr><tr><td>168</td><td>250</td><td>A8</td><td>10101000</td><td>¨</td><td>&amp;#168;</td><td>通用货币符号</td></tr><tr><td>169</td><td>251</td><td>A9</td><td>10101001</td><td>©</td><td>&amp;#169;</td><td>版权符号</td></tr><tr><td>170</td><td>252</td><td>AA</td><td>10101010</td><td>ª</td><td>&amp;#170;</td><td>阴性顺序 指示符号</td></tr><tr><td>171</td><td>253</td><td>AB</td><td>10101011</td><td>«</td><td>&amp;#171;</td><td>左角引号</td></tr><tr><td>172</td><td>254</td><td>AC</td><td>10101100</td><td>¬</td><td>&amp;#172;</td><td></td></tr><tr><td>173</td><td>255</td><td>AD</td><td>10101101</td><td>­</td><td>&amp;#173;</td><td></td></tr><tr><td>174</td><td>256</td><td>AE</td><td>10101110</td><td>®</td><td>&amp;#174;</td><td></td></tr><tr><td>175</td><td>257</td><td>AF</td><td>10101111</td><td>¯</td><td>&amp;#175;</td><td></td></tr><tr><td>176</td><td>260</td><td>B0</td><td>10110000</td><td>°</td><td>&amp;#176;</td><td>温度符号</td></tr><tr><td>177</td><td>261</td><td>B1</td><td>10110001</td><td>±</td><td>&amp;#177;</td><td>加&#x2F;减号</td></tr><tr><td>178</td><td>262</td><td>B2</td><td>10110010</td><td>²</td><td>&amp;#178;</td><td>上标 2</td></tr><tr><td>179</td><td>263</td><td>B3</td><td>10110011</td><td>³</td><td>&amp;#179;</td><td>上标 3</td></tr><tr><td>180</td><td>264</td><td>B4</td><td>10110100</td><td>´</td><td>&amp;#180;</td><td></td></tr><tr><td>181</td><td>265</td><td>B5</td><td>10110101</td><td>µ</td><td>&amp;#181;</td><td>微符号</td></tr><tr><td>182</td><td>266</td><td>B6</td><td>10110110</td><td>¶</td><td>&amp;#182;</td><td>段落符号， pilcrow</td></tr><tr><td>183</td><td>267</td><td>B7</td><td>10110111</td><td>·</td><td>&amp;#183;</td><td>中点</td></tr><tr><td>184</td><td>270</td><td>B8</td><td>10111000</td><td>¸</td><td>&amp;#184;</td><td></td></tr><tr><td>185</td><td>271</td><td>B9</td><td>10111001</td><td>¹</td><td>&amp;#185;</td><td>上标 1</td></tr><tr><td>186</td><td>272</td><td>BA</td><td>10111010</td><td>º</td><td>&amp;#186;</td><td>阳性顺序 指示符</td></tr><tr><td>187</td><td>273</td><td>BB</td><td>10111011</td><td>»</td><td>&amp;#187;</td><td>右角引号</td></tr><tr><td>188</td><td>274</td><td>BC</td><td>10111100</td><td>¼</td><td>&amp;#188;</td><td>分数四分之一</td></tr><tr><td>189</td><td>275</td><td>BD</td><td>10111101</td><td>½</td><td>&amp;#189;</td><td>分数二分之一</td></tr><tr><td>190</td><td>276</td><td>BE</td><td>10111110</td><td>¾</td><td>&amp;#190;</td><td></td></tr><tr><td>191</td><td>277</td><td>BF</td><td>10111111</td><td>¿</td><td>&amp;#191;</td><td>反向问号</td></tr><tr><td>192</td><td>300</td><td>C0</td><td>11000000</td><td>À</td><td>&amp;#192;</td><td>带重音符 的大写字母 A</td></tr><tr><td>193</td><td>301</td><td>C1</td><td>11000001</td><td>Á</td><td>&amp;#193;</td><td>带尖锐重音 的大写字母 A</td></tr><tr><td>194</td><td>302</td><td>C2</td><td>11000010</td><td>Â</td><td>&amp;#194;</td><td>带音调符号 的大写字母 A</td></tr><tr><td>195</td><td>303</td><td>C3</td><td>11000011</td><td>Ã</td><td>&amp;#195;</td><td>带代字号 的大写字母 A</td></tr><tr><td>196</td><td>304</td><td>C4</td><td>11000100</td><td>Ä</td><td>&amp;#196;</td><td>带元音变音 (分音符号) 的大写字母 A</td></tr><tr><td>197</td><td>305</td><td>C5</td><td>11000101</td><td>Å</td><td>&amp;#197;</td><td>带铃声 的大写字母 A</td></tr><tr><td>198</td><td>306</td><td>C6</td><td>11000110</td><td>Æ</td><td>&amp;#198;</td><td>大写字母 AE 双重元音</td></tr><tr><td>199</td><td>307</td><td>C7</td><td>11000111</td><td>Ç</td><td>&amp;#199;</td><td>带变音符号 的大写字母 C</td></tr><tr><td>200</td><td>310</td><td>C8</td><td>11001000</td><td>È</td><td>&amp;#200;</td><td>带重音符 的大写字母 E</td></tr><tr><td>201</td><td>311</td><td>C9</td><td>11001001</td><td>É</td><td>&amp;#201;</td><td>带尖锐重音 的大写字母 E</td></tr><tr><td>202</td><td>312</td><td>CA</td><td>11001010</td><td>Ê</td><td>&amp;#202;</td><td>带音调符号 的大写字母 E</td></tr><tr><td>203</td><td>313</td><td>CB</td><td>11001011</td><td>Ë</td><td>&amp;#203;</td><td>带元音变音 (分音符号) 的大写字母 E</td></tr><tr><td>204</td><td>314</td><td>CC</td><td>11001100</td><td>Ì</td><td>&amp;#204;</td><td>带重音符 的大写字母 I</td></tr><tr><td>205</td><td>315</td><td>CD</td><td>11001101</td><td>Í</td><td>&amp;#205;</td><td>带尖锐重音 的大写字母 I</td></tr><tr><td>206</td><td>316</td><td>CE</td><td>11001110</td><td>Î</td><td>&amp;#206;</td><td>带音调符号 的大写字母 I</td></tr><tr><td>207</td><td>317</td><td>CF</td><td>11001111</td><td>Ï</td><td>&amp;#207;</td><td>带元音变音 (分音符号) 的大写字母 I</td></tr><tr><td>208</td><td>320</td><td>D0</td><td>11010000</td><td>Ð</td><td>&amp;#208;</td><td></td></tr><tr><td>209</td><td>321</td><td>D1</td><td>11010001</td><td>Ñ</td><td>&amp;#209;</td><td>带代字号 的大写字母 N</td></tr><tr><td>210</td><td>322</td><td>D2</td><td>11010010</td><td>Ò</td><td>&amp;#210;</td><td>带重音符 的大写字母 O</td></tr><tr><td>211</td><td>323</td><td>D3</td><td>11010011</td><td>Ó</td><td>&amp;#211;</td><td>带尖锐重音 的大写字母 O</td></tr><tr><td>212</td><td>324</td><td>D4</td><td>11010100</td><td>Ô</td><td>&amp;#212;</td><td>带音调符号 的大写字母 O</td></tr><tr><td>213</td><td>325</td><td>D5</td><td>11010101</td><td>Õ</td><td>&amp;#213;</td><td>带代字号 的大写字母 O</td></tr><tr><td>214</td><td>326</td><td>D6</td><td>11010110</td><td>Ö</td><td>&amp;#214;</td><td>带元音变音 (分音符号) 的大写字母 O</td></tr><tr><td>215</td><td>327</td><td>D7</td><td>11010111</td><td>×</td><td>&amp;#215;</td><td>大写字母 OE 连字</td></tr><tr><td>216</td><td>330</td><td>D8</td><td>11011000</td><td>Ø</td><td>&amp;#216;</td><td>带斜杠 的大写字母 O</td></tr><tr><td>217</td><td>331</td><td>D9</td><td>11011001</td><td>Ù</td><td>&amp;#217;</td><td>带重音符 的大写字母 U</td></tr><tr><td>218</td><td>332</td><td>DA</td><td>11011010</td><td>Ú</td><td>&amp;#218;</td><td>带尖锐重音 的大写字母 U</td></tr><tr><td>219</td><td>333</td><td>DB</td><td>11011011</td><td>Û</td><td>&amp;#219;</td><td>带音调符号 的大写字母 U</td></tr><tr><td>220</td><td>334</td><td>DC</td><td>11011100</td><td>Ü</td><td>&amp;#220;</td><td>带元音变音 (分音符号) 的大写字母 U</td></tr><tr><td>221</td><td>335</td><td>DD</td><td>11011101</td><td>Ý</td><td>&amp;#221;</td><td>带元音变音 (分音符号) 的大写字母 Y</td></tr><tr><td>222</td><td>336</td><td>DE</td><td>11011110</td><td>Þ</td><td>&amp;#222;</td><td></td></tr><tr><td>223</td><td>337</td><td>DF</td><td>11011111</td><td>ß</td><td>&amp;#223;</td><td>德语高调 小写字母 s</td></tr><tr><td>224</td><td>340</td><td>E0</td><td>11100000</td><td>à</td><td>&amp;#224;</td><td>带重音符 的小写字母 a</td></tr><tr><td>225</td><td>341</td><td>E1</td><td>11100001</td><td>á</td><td>&amp;#225;</td><td>带尖锐重音 的小写字母 a</td></tr><tr><td>226</td><td>342</td><td>E2</td><td>11100010</td><td>â</td><td>&amp;#226;</td><td>带音调符号 的小写字母 a</td></tr><tr><td>227</td><td>343</td><td>E3</td><td>11100011</td><td>ã</td><td>&amp;#227;</td><td>带代字号 的小写字母 a</td></tr><tr><td>228</td><td>344</td><td>E4</td><td>11100100</td><td>ä</td><td>&amp;#228;</td><td>带元音变音 (分音符号) 的小写字母 a</td></tr><tr><td>229</td><td>345</td><td>E5</td><td>11100101</td><td>å</td><td>&amp;#229;</td><td>带铃声的 小写字母 a</td></tr><tr><td>230</td><td>346</td><td>E6</td><td>11100110</td><td>æ</td><td>&amp;#230;</td><td>小写字母 ae 双重元音</td></tr><tr><td>231</td><td>347</td><td>E7</td><td>11100111</td><td>ç</td><td>&amp;#231;</td><td>带变音符号 的小写字母 c</td></tr><tr><td>232</td><td>350</td><td>E8</td><td>11101000</td><td>è</td><td>&amp;#232;</td><td>带重音符 的小写字母 e</td></tr><tr><td>233</td><td>351</td><td>E9</td><td>11101001</td><td>é</td><td>&amp;#233;</td><td>带尖锐重音 的小写字母 e</td></tr><tr><td>234</td><td>352</td><td>EA</td><td>11101010</td><td>ê</td><td>&amp;#234;</td><td>带音调符号 的小写字母 e</td></tr><tr><td>235</td><td>353</td><td>EB</td><td>11101011</td><td>ë</td><td>&amp;#235;</td><td>带元音变音 (分音符号) 的小写字母 e</td></tr><tr><td>236</td><td>354</td><td>EC</td><td>11101100</td><td>ì</td><td>&amp;#236;</td><td>带重音符 的小写字母 i</td></tr><tr><td>237</td><td>355</td><td>ED</td><td>11101101</td><td>í</td><td>&amp;#237;</td><td>带尖锐重音 的小写字母 i</td></tr><tr><td>238</td><td>356</td><td>EE</td><td>11101110</td><td>î</td><td>&amp;#238;</td><td>带音调符号 的小写字母 i</td></tr><tr><td>239</td><td>357</td><td>EF</td><td>11101111</td><td>ï</td><td>&amp;#239;</td><td>带元音变音 (分音符号) 的小写字母 i</td></tr><tr><td>240</td><td>360</td><td>F0</td><td>11110000</td><td>ð</td><td>&amp;#240;</td><td></td></tr><tr><td>241</td><td>361</td><td>F1</td><td>11110001</td><td>ñ</td><td>&amp;#241;</td><td>带代字号 的小写字母 n</td></tr><tr><td>242</td><td>362</td><td>F2</td><td>11110010</td><td>ò</td><td>&amp;#242;</td><td>带重音符 的小写字母 o</td></tr><tr><td>243</td><td>363</td><td>F3</td><td>11110011</td><td>ó</td><td>&amp;#243;</td><td>带尖锐重音 的小写字母 o</td></tr><tr><td>244</td><td>364</td><td>F4</td><td>11110100</td><td>ô</td><td>&amp;#244;</td><td>带音调符号 的小写字母 o</td></tr><tr><td>245</td><td>365</td><td>F5</td><td>11110101</td><td>õ</td><td>&amp;#245;</td><td>带代字号 的小写字母 o</td></tr><tr><td>246</td><td>366</td><td>F6</td><td>11110110</td><td>ö</td><td>&amp;#246;</td><td>带元音变音 (分音符号) 的小写字母 o</td></tr><tr><td>247</td><td>367</td><td>F7</td><td>11110111</td><td>÷</td><td>&amp;#247;</td><td>小写字母 oe 连字</td></tr><tr><td>248</td><td>370</td><td>F8</td><td>11111000</td><td>ø</td><td>&amp;#248;</td><td>带斜杠 的小写字母 o</td></tr><tr><td>249</td><td>371</td><td>F9</td><td>11111001</td><td>ù</td><td>&amp;#249;</td><td>带重音符 的小写字母 u</td></tr><tr><td>250</td><td>372</td><td>FA</td><td>11111010</td><td>ú</td><td>&amp;#250;</td><td>带尖锐重音 的小写字母 u</td></tr><tr><td>251</td><td>373</td><td>FB</td><td>11111011</td><td>û</td><td>&amp;#251;</td><td>带音调符号 的小写字母 u</td></tr><tr><td>252</td><td>374</td><td>FC</td><td>11111100</td><td>ü</td><td>&amp;#252;</td><td>带元音变音 (分音符号) 的小写字母 u</td></tr><tr><td>253</td><td>375</td><td>FD</td><td>11111101</td><td>ý</td><td>&amp;#253;</td><td>带元音变音 (分音符号) 的小写字母 y</td></tr><tr><td>254</td><td>376</td><td>FE</td><td>11111110</td><td>þ</td><td>&amp;#254;</td><td></td></tr><tr><td>255</td><td>377</td><td>FF</td><td>11111111</td><td>ÿ</td><td>&amp;#255;</td><td></td></tr></tbody></table><h2 id="运算符优先级（C语言）"><a href="#运算符优先级（C语言）" class="headerlink" title="运算符优先级（C语言）"></a>运算符优先级（C语言）</h2><p><img src="/2022/07/19/%E9%80%9A%E7%94%A8%E6%96%87%E6%A1%A3/image-20220823020632133.png"></p><h2 id="基本数据类型字节数"><a href="#基本数据类型字节数" class="headerlink" title="基本数据类型字节数"></a>基本数据类型字节数</h2><h4 id="16位编译器"><a href="#16位编译器" class="headerlink" title="16位编译器;"></a>16位编译器;</h4><p>char ：1个字节<br>指针: 2个字节<br>short int : 2个字节<br>int：2个字节<br>unsigned int : 2个字节<br>float:  4个字节<br>double:   8个字节<br>long:   4个字节<br>long long:  8个字节<br>unsigned long:  4个字节</p><hr><h4 id="32位编译器："><a href="#32位编译器：" class="headerlink" title="32位编译器："></a>32位编译器：</h4><p>char ：1个字节<br>指针: 4个字节<br>short int : 2个字节<br>int：  4个字节<br>unsigned int : 4个字节<br>float:  4个字节<br>double:   8个字节<br>long:   4个字节<br>long long:  8个字节<br>unsigned long:  4个字节</p><hr><h4 id="64位编译器："><a href="#64位编译器：" class="headerlink" title="64位编译器："></a>64位编译器：</h4><p>char ：1个字节<br>指针: 8个字节<br>short int : 2个字节<br>int：  4个字节<br>unsigned int : 4个字节<br>float:  4个字节<br>double:   8个字节<br>long:   8个字节<br>long long:  8个字节<br>unsigned long:  8个字节</p><h2 id="转义字符（C语言）"><a href="#转义字符（C语言）" class="headerlink" title="转义字符（C语言）"></a>转义字符（C语言）</h2><p><img src="/2022/07/19/%E9%80%9A%E7%94%A8%E6%96%87%E6%A1%A3/image-20220823024416472.png"></p><h2 id="x-amp-x-1-统计1的个数，x-x-1-统计0的个数"><a href="#x-amp-x-1-统计1的个数，x-x-1-统计0的个数" class="headerlink" title="x&amp;(x-1)统计1的个数，x|(x+1)统计0的个数"></a>x&amp;(x-1)统计1的个数，x|(x+1)统计0的个数</h2><h2 id="可重载运算符-x2F-不可重载运算符"><a href="#可重载运算符-x2F-不可重载运算符" class="headerlink" title="可重载运算符&#x2F;不可重载运算符"></a>可重载运算符&#x2F;不可重载运算符</h2><p><img src="/2022/07/19/%E9%80%9A%E7%94%A8%E6%96%87%E6%A1%A3/image-20220826091227273.png"></p>]]></content>
      
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>错误：编码***的不可映射字符</title>
      <link href="/2022/07/18/%E9%94%99%E8%AF%AF%EF%BC%9A%E7%BC%96%E7%A0%81-%E7%9A%84%E4%B8%8D%E5%8F%AF%E6%98%A0%E5%B0%84%E5%AD%97%E7%AC%A6/"/>
      <url>/2022/07/18/%E9%94%99%E8%AF%AF%EF%BC%9A%E7%BC%96%E7%A0%81-%E7%9A%84%E4%B8%8D%E5%8F%AF%E6%98%A0%E5%B0%84%E5%AD%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在使用<code>javac</code>命令编译.java文件的时候报错提示‘错误：编码***的不可映射字符’</p><h2 id="产生的原因"><a href="#产生的原因" class="headerlink" title="产生的原因"></a>产生的原因</h2><p>JDK的javac命令是以GBK的编码形式运行的</p><ul><li>GBK是针对汉字做出的一种编码</li></ul><p>文本文档默认使用ASCLL码值进行编码.</p><blockquote><p>结论：两边的字节码格式不匹配导致</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在<code>jaavc</code>命令后面加上<code>-encoding utf-8</code><br>示例：<br><code>javac HelloWorld.java -encoding utf-8</code></p><p>原理就是，指定编译的时候通通以utf-8的编码形式编译</p><blockquote><p>问：为什么用utf-8？<br>答：因为utf-8和ASCLL相容</p></blockquote><p>如果指定了UTF-8还是‘编码***的不可映射字符’<br>可是指定GBK<br><code>javac HelloWorld.java -encoding gbk</code></p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>ASCII (American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言，共定义了128个字符 。</p><p>Unicode：统一码（又称万国码），它为每种语言中的每个字符设定了唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。</p><p>UTF-8（8-bit Unicode Transformation Format）：是针对Unicode的一种可变长度字符编码，包含全世界所有国家需要用到的字符，且与ASCII相容。因此，它逐渐成为电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。</p><p>GBK（“国标”、“扩展”汉语拼音的第一个字母）：即汉字编码字符集，主要针对汉字编码而形成的解决方案。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>GBK就是在保存帖子的时候，一个汉字占用两个字节。外国人看会出现乱码，此为我们国家为自己汉字编码而形成的解决方案。</p><p>UTF-8就是在保存帖子的时候，一个汉字占用3个字节。但是外国人看的话不会乱码，此为西人为了解决多字节字符而形成的解决方案。</p><p>简言而知，GBK编码方式的编码是以中国国情而创造的，在国际上的兼容性不好，这也是为什么大多数的网页是使用UTF-8编码而不是GBK。</p>]]></content>
      
      
      <categories>
          
          <category> 疑难解答 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JDK下载与安装</title>
      <link href="/2022/07/18/JDK%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
      <url>/2022/07/18/JDK%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="jdk下载"><a href="#jdk下载" class="headerlink" title="jdk下载"></a>jdk下载</h2><p>jdk是oracle的产品<br>首先进入Oracle的官网<a href="https://www.oracle.com/">Oracleg官网</a><br><img src="/2022/07/18/JDK%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/2022-07-19-22-16-19.png"><br>下载jdk是需要oracle账户的，没有的先创建一个</p><h4 id="oracle账户创建"><a href="#oracle账户创建" class="headerlink" title="oracle账户创建"></a>oracle账户创建</h4><p>里面带*的是比填项<br>但是除了密码，用户名和邮箱其他的随便填。真的假的无所谓</p><p>创建好了账户，登录一下<br>然后在官网主页找到下图所示：<br><img src="/2022/07/18/JDK%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/2022-07-19-22-20-21.png"><br>在出来的新界面往下翻找到图中所示，点进去<br><img src="/2022/07/18/JDK%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/2022-07-19-22-21-28.png"><br>然后找到java archive,点进去<br><img src="/2022/07/18/JDK%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/2022-07-19-22-22-46.png"><br>这一步是找jdk以前的版本，因为新的版本商用开始收费了.据我所知是jdk_8u202以后商用开始收费.所以我找的是8u202以前的版本<br>在点进去的页面往下找到图中所示点进去<br><img src="/2022/07/18/JDK%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/2022-07-19-22-25-03.png"><br>进去后往下翻，可以看到3个8u201</p><ul><li>Java SE Development Kit 8u201，这个是我们要下载的jdk，也就是Java SE开发工具包</li><li>Java SE Runtime Environment 8u201，这个是运行是的环境，是jre,就是玩我的世界需要下载的那个java</li><li>Server JRE (Java SE Runtime Environment) 8u201,这个是服务器用的jre</li></ul><p>接着在Java SE Development Kit 8u201中找到你对应的系统，我的是windowsX64<br><img src="/2022/07/18/JDK%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/2022-07-19-22-33-32.png"><br>弹出的对话框勾选，然后点击下载</p><h2 id="jdk安装"><a href="#jdk安装" class="headerlink" title="jdk安装"></a>jdk安装</h2><p>运行下载好的jdk文件</p><blockquote><p>关于安装位置：<br>jre是不能改默认安装位置的<br>jdk可以改，但是jdk默认的位置是和jre在一起的，所以建议是默认安装位置</p></blockquote><p>下载完后会出现2个文件<br>一个是jdk一个是相同版本的jre</p><h2 id="jdk环境变量配置"><a href="#jdk环境变量配置" class="headerlink" title="jdk环境变量配置"></a>jdk环境变量配置</h2><p>将jdk的bin目录路径放到path环境变量中<br>不会放和不知道环境变量的去百度看教程，我其他博客里也有写，以后会装别的软件也会用的到.</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习</title>
      <link href="/2022/07/17/java%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/07/17/java%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="闲聊"><a href="#闲聊" class="headerlink" title="闲聊"></a>闲聊</h2><ul><li>阿里巴巴是国内java的权威</li><li>java的语法相对来说比c&#x2F;c++简单</li><li>java刚开始叫oak,刚开始是做微波炉、智能家电这一块.<ul><li>java的创始人喜欢喝咖啡，然后印度尼西亚有一个到叫爪哇岛，盛产咖啡.最后oak就变成了java.</li></ul></li></ul><h2 id="java开发环境"><a href="#java开发环境" class="headerlink" title="java开发环境"></a>java开发环境</h2><ul><li>java的编译器是JDK，公司不一定是用最新版的JDK,公司用的最多的版本是JDK1.7,JDK1.8</li><li>JRE是java的运行环境，就是玩我的世界需要下载的那个就是jre</li><li>JVM是java虚拟机</li><li>IDEA是java的集成开发环境</li></ul><blockquote><p>前三者的关系是JDK包着JRE,JRE包着JVM</p></blockquote><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编程规范建议：左括号‘{’跟着当前行，右括号‘}’和当前行开头对齐.</p><ul><li><code>public calss </code>是类<ul><li>一个java文件中只能有一个public的类</li></ul></li><li><code>HelloWorld</code>是类名<ul><li>类名需要和创建的java文件名相同</li><li>类名用大驼峰的形式命名</li></ul></li><li>在<code>public class HelloWorld</code>里面的叫类体</li><li>在<code>public static void main(String[] args)</code>里面的叫方法体</li><li></li></ul><h2 id="java编译过程"><a href="#java编译过程" class="headerlink" title="java编译过程"></a>java编译过程</h2><p>第一步，有一个.java后缀的文件，这文件里保存的是自己写的java代码</p><p>第二步，使用JDK的命令<code>javac</code>，javac空格+.java后缀的的文件全名包含后缀.<br>执行第二部后生成一个.clas后缀的文件，这个文件是字节码文件.</p><p>第三步，使用JDK命令<code>java</code>，java+文件名（生成的字节码文件的文件名和原来.java的文件名是一致的）</p><h2 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h2><blockquote><p>问1：为什么main是static(静态的)<br>答：</p></blockquote><blockquote><p>问2：JDK&#x2F;JRE&#x2F;JVM是什么，是做什么用的<br>答：</p></blockquote><blockquote><p>问3：讲一讲什么是双亲委派模型、类加载器<br>答：</p></blockquote><blockquote><p>问4：<code>main(String[] args)</code>里的<code>String[]</code>是什么？<br>答：运行时命令行参数</p></blockquote><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>标识符可以理解为变量名，常量名、函数名等<br>标识符可以有英文、数字、下划线、$、组成</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>java中没有全局变量<br>如果变量没初始化，则编译报错.</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><p>Java中把基本数据类型包装成一个个独立的类</p><table><thead><tr><th align="center">序号</th><th align="center">数据类型</th><th align="center">包装类</th><th align="center">数据类型</th><th align="center">所占大小单位&#x2F;字节</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">byte</td><td align="center">Byte</td><td align="center">字节型</td><td align="center">1</td></tr><tr><td align="center">2</td><td align="center">char</td><td align="center">Character</td><td align="center">字符型</td><td align="center">2</td></tr><tr><td align="center">3</td><td align="center">short</td><td align="center">Short</td><td align="center">短整型</td><td align="center">2</td></tr><tr><td align="center">4</td><td align="center">int</td><td align="center">Integer</td><td align="center">整形</td><td align="center">4</td></tr><tr><td align="center">5</td><td align="center">long</td><td align="center">Long</td><td align="center">长整形</td><td align="center">8</td></tr><tr><td align="center">6</td><td align="center">float</td><td align="center">Float</td><td align="center">单精度浮点型</td><td align="center">xxxxxxxxxx40 1&#x2F;&#x2F;#include &lt;stdlib.h&gt;2&#x2F;&#x2F;void reverse(char* left,char *right)    &#x2F;&#x2F;字符串逆序3&#x2F;&#x2F;{4&#x2F;&#x2F;  while (left &lt; right) 5&#x2F;&#x2F;  {6&#x2F;&#x2F;      char tmp &#x3D; *left;7&#x2F;&#x2F;      *left &#x3D; <em>right;8&#x2F;&#x2F;      <em>right &#x3D; tmp;9&#x2F;&#x2F;      left++;10&#x2F;&#x2F;      right–;11&#x2F;&#x2F;  }12&#x2F;&#x2F;}13&#x2F;&#x2F;int main()14&#x2F;&#x2F;{15&#x2F;&#x2F;  char arr[100] &#x3D; { 0 };16&#x2F;&#x2F;  gets(arr);                 &#x2F;&#x2F;把输入的内容放到arr这个数组中17&#x2F;&#x2F;  int len &#x3D; strlen(arr);18&#x2F;&#x2F;  reverse(arr,arr+len-1);19&#x2F;&#x2F;  char</em> start &#x3D; arr;20&#x2F;&#x2F;  while (<em>start)              &#x2F;&#x2F;当</em>start是’\0’的时候循环就停下21&#x2F;&#x2F;  {22&#x2F;&#x2F;      char</em> end &#x3D; start;      23&#x2F;&#x2F;      while (*end!&#x3D; ‘ ‘&amp;&amp;*end!&#x3D;’\0’)    24&#x2F;&#x2F;      {25&#x2F;&#x2F;          end++;26&#x2F;&#x2F;      }27&#x2F;&#x2F;      reverse(start, end-1);28&#x2F;&#x2F;      if (*end &#x3D;&#x3D; ‘ ‘)29&#x2F;&#x2F;      {30&#x2F;&#x2F;          start &#x3D; end+1;31&#x2F;&#x2F;      }32&#x2F;&#x2F;      else33&#x2F;&#x2F;      {34&#x2F;&#x2F;          start &#x3D; end;35&#x2F;&#x2F;      }36&#x2F;&#x2F;  }37&#x2F;&#x2F;38&#x2F;&#x2F;  printf(“%s”, arr);39&#x2F;&#x2F;  return 0;40&#x2F;&#x2F;}c</td></tr><tr><td align="center">7</td><td align="center">double</td><td align="center">Double</td><td align="center">双精度浮点型</td><td align="center">8</td></tr><tr><td align="center">8</td><td align="center">boolean</td><td align="center">Boolean</td><td align="center">布尔型</td><td align="center">没有规定</td></tr></tbody></table><h3 id="整形int"><a href="#整形int" class="headerlink" title="整形int"></a>整形int</h3><p>在java中int类型没有无符号（unsigned），二进制第一个位始终代表符号位<br>int类型在32&#x2F;64位下都是占4字节<br>int的取值范围是($-2^{63}$)~($2^{63}-1$)</p><h3 id="长整型long"><a href="#长整型long" class="headerlink" title="长整型long"></a>长整型long</h3><p>占8字节<br>long没有无符号（unsigned）,二进制第一个位始终代表符号位<br>long的取值范围是($-2^{63}$)~($2^{63}-1$)<br>创建long类型的变量时，要在初始值后面加上L，例如：<code>long a = 10L;</code><br>如果不加L，那这个变量就是整形</p><h3 id="短整型short"><a href="#短整型short" class="headerlink" title="短整型short"></a>短整型short</h3><p>占2字节<br>取值范围：-32768~32767</p><h3 id="双精度浮点型double"><a href="#双精度浮点型double" class="headerlink" title="双精度浮点型double"></a>双精度浮点型double</h3><p>占8字节<br>和C语言的规则一样</p><h3 id="单精度浮点数float"><a href="#单精度浮点数float" class="headerlink" title="单精度浮点数float"></a>单精度浮点数float</h3><p>占4字节<br>用小数的时候建议用double<br>因为float只能表示到小数后6位，精度不如double高.</p><h3 id="字符数据类型char"><a href="#字符数据类型char" class="headerlink" title="字符数据类型char"></a>字符数据类型char</h3><p>占2个字节<br>java中一个汉字占2字节<br>java中使用Unicode字符集.内容比ASCLL丰富<br>char的取值范围是0~65535</p><h3 id="字节数据类型byte"><a href="#字节数据类型byte" class="headerlink" title="字节数据类型byte"></a>字节数据类型byte</h3><p>占1个字节<br>取值范围-128~127</p><h3 id="布尔类型boolean"><a href="#布尔类型boolean" class="headerlink" title="布尔类型boolean"></a>布尔类型boolean</h3><p>在java中boolean大小没有明确规定占几个字节<br>布尔类型只有2个取值：true&#x2F;false</p><blockquote><p>在java中没有0是假，非0是真<br>只有true是真，false是假</p></blockquote><h3 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h3><p>拼接符号：“+”<br>在C语言中想输出中文加数字是<code>printf(&quot;a+b的值是：%d&quot;,a+b);</code>这种使用了%d形式输出叫格式化输出<br>在java中有一种新的输出方式：拼接.示例：<code>System.out.println(&quot;a+b的值是：&quot;+ ( a + b ));</code><br>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">System.out.println( a + b );</span><br><span class="line"><span class="comment">// 输出：30</span></span><br><span class="line">System.out.println(<span class="string">&quot;a+b的值是：&quot;</span> + a + b );</span><br><span class="line"><span class="comment">// 输出：a+b的值是：1020</span></span><br><span class="line">System.out.println(<span class="string">&quot;a+b的值是：&quot;</span> + （a + b） );</span><br><span class="line"><span class="comment">// 输出：a+b的值是：30</span></span><br></pre></td></tr></table></figure><ul><li>任何字符串类型的数据和其他类型的数据进行拼接，最后输出的结果是字符串类型的.</li><li>java可以使用拼接输出，也可以使用格式化输出</li></ul><h3 id="整形提升"><a href="#整形提升" class="headerlink" title="整形提升"></a>整形提升</h3><p>在表达式计算时，各种整型首先要提升为int类型，如果int类型不足以表示则要提升为unsigned int类型；然后执行表达式的运算。<br>java的整形提升规则和C语言一样</p><h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><p>把大类型给小类型叫隐式类型转换<br>当不同数据类型进行计算的时候，需要将不同的数据类转换成同一种数据类型在进行计算.<br>精度低的数据类型向精度高的数据类型进行转换<br>具体转换的规则和C语言一样</p><h3 id="显式类型转换"><a href="#显式类型转换" class="headerlink" title="显式类型转换"></a>显式类型转换</h3><p>把小类型给打类型叫显式类型转换</p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><h3 id="字面常量"><a href="#字面常量" class="headerlink" title="字面常量"></a>字面常量</h3><p>比如一个数字，一个字符，一个字符串，一个浮点数等</p><h3 id="被final修饰的变量"><a href="#被final修饰的变量" class="headerlink" title="被final修饰的变量"></a>被final修饰的变量</h3><p>final等同于const</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p>+<br>-<br>*<br>&#x2F;<br>%</p><h3 id="复合运算符"><a href="#复合运算符" class="headerlink" title="复合运算符"></a>复合运算符</h3><p>+&#x3D;<br>-&#x3D;<br>&#x2F;&#x3D;<br>*&#x3D;<br>%&#x3D;</p><h3 id="自增自减运算符-–"><a href="#自增自减运算符-–" class="headerlink" title="自增自减运算符++ –"></a>自增自减运算符++ –</h3><h4 id="前置-后置-前置–后置–"><a href="#前置-后置-前置–后置–" class="headerlink" title="前置++后置++前置–后置–"></a>前置++后置++前置–后置–</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a++;</span><br><span class="line">        <span class="comment">//实质上是b=a;a=a+1;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ++a;</span><br><span class="line">        <span class="comment">//实质上是a=a+1;b=a;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> a--</span><br><span class="line">        <span class="comment">//实质上是d=a,a=a-1;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">e</span> <span class="operator">=</span> --a</span><br><span class="line">        <span class="comment">//实质上是a=a-1;e=a;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        i = i++;</span><br><span class="line">        System.out.println(i);<span class="comment">//0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个代码最后输出的是0<br>这点和C语言不一样样，c语言是输出1<br>问为什么不一样？<br>这涉及到底层的原理，没必要去理解.知道结果是0就行</p><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>&#x3D;&#x3D;<br>!&#x3D;<br>&lt;<br>&gt;<br>&gt;&#x3D;<br>&lt;&#x3D;</p><blockquote><p>关系运算符最后的结果之后true或false</p></blockquote><h3 id="逻辑运算符、与、或、非"><a href="#逻辑运算符、与、或、非" class="headerlink" title="逻辑运算符、与、或、非"></a>逻辑运算符、与、或、非</h3><p>&amp;&amp; - 与<br>|| - 或<br>!  - 非，示例：!true &#x3D;&#x3D; false; !false &#x3D;&#x3D; true;</p><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>按位与：&amp;</p><ul><li>二进制位比较，两个二进制位都是1，则结果是1，其他结果为0</li></ul><p>按位或：|</p><ul><li>二进制位比较，有一个是1，则结果是1</li></ul><p>按位异或：^</p><ul><li>二进制位比较，相同为0，不同为1</li></ul><p>按位取反：~</p><ul><li>二进制位，1变0，,0变1</li></ul><h3 id="移位操作符"><a href="#移位操作符" class="headerlink" title="移位操作符"></a>移位操作符</h3><p>&gt;&gt;:右移操作符</p><ul><li>正数右移，右边去掉，左边补0</li><li>右移相当于除法（不考虑负数的情况）</li><li>负数右移，左边补的是符号位</li></ul><p>&lt;&lt;:左移操作符</p><ul><li>左边去掉，右边补0</li><li>左移相当于乘法（不考虑负数的情况）</li></ul><p>&gt;&gt;&gt;:无符号右移</p><ul><li>左边只补0</li></ul><blockquote><p>没有无符号左移<br>因为左边本来就没有符号位，不需要考虑补1还是补0.<br>左移通通补0</p></blockquote><h2 id="输入（同C语言中的scanf）"><a href="#输入（同C语言中的scanf）" class="headerlink" title="输入（同C语言中的scanf）"></a>输入（同C语言中的scanf）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> scan.nextInt();<span class="comment">//读入整形</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scan.nextline();<span class="comment">//读入字符串</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：<br><code>import java.util.Scanner;</code>:这个相当于C语言中的头文件，在java中叫做包</p><p><code>Scanner scan = new Scanner(System.in);</code>:其中System.in代表的是从键盘中读取数据</p><p><code>scan.nextInt();</code>:nexInt表示读取一个整形</p><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>for循环<br>while循环</p><ul><li>在while中使用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (scan.hasNextInt()) &#123;<span class="comment">//实现不断读取</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>do..whlie循环</li></ul><h2 id="方法（函数）"><a href="#方法（函数）" class="headerlink" title="方法（函数）"></a>方法（函数）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名 &#123;</span><br><span class="line">    <span class="comment">//创建函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> 返回值类型  方法名（函数名）（参数列表（参数类型 参数名），.....） &#123;</span><br><span class="line">        方法体；</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>; &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>方法名：采用小驼峰命名（第一个单词小写，第二个单词首字母大写）</li><li>方法定义：方法要定义在<code>public class 类名 &#123;&#125;</code>里面</li><li>方法位置：java中无所谓在main前面还是后面</li><li>参数列表：就是参数的数据类型和参数名</li></ul><blockquote><p>java中只有按值传递，没有按地址传递<br>java中只有按值传递，没有按地址传递<br>java中只有按值传递，没有按地址传递</p></blockquote><h2 id="方法（函数）的重载（overload）"><a href="#方法（函数）的重载（overload）" class="headerlink" title="方法（函数）的重载（overload）"></a>方法（函数）的重载（overload）</h2><p>简单来说，就是方法（函数）可以是同一个名字</p><p>方法重载的规则</p><ul><li>1.方法名相同</li><li>2.返回值不做要求</li><li>3.参数列表不同（参数的个数或者参数的数据类型不同）</li></ul><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><blockquote><p>问：重载和重写的区别是什么？<br>答：</p></blockquote><h2 id="函数递归"><a href="#函数递归" class="headerlink" title="函数递归"></a>函数递归</h2><ul><li>函数递归在栈上开辟空间</li><li>栈的空间大概是1M&#x2F;2M</li><li>函数递归不给终止条件会报错：StackOverflowError</li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组创建"><a href="#数组创建" class="headerlink" title="数组创建"></a>数组创建</h3><p>定义数组的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//两种定义方式没有任何区别</span></span><br><span class="line">        <span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;<span class="comment">//第一种定义方式</span></span><br><span class="line">        <span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;<span class="comment">//第二种定义方式</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//示例1:</span></span><br><span class="line">        <span class="type">int</span>[] arr3 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];<span class="comment">//这个数组的长度是0</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在C语言中数组放在栈上</li><li>在java中数组放在堆上</li><li>java的数组属于引用类型</li><li>C语言中数组属于构造数据类型</li><li>java中不需要定义数组长度，他会自动推算.</li><li>栈上的地址是拿不到的</li><li>堆上的地址，可以打印出来，但是是经过java处理过的，不是真实的.<ul><li>但是你可以当做是真实的.因为，就算经过处理，地址也是唯一的</li></ul></li></ul><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/2022-07-22-16-24-45.png"><br><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/2022-07-22-16-42-31.png"></p><h3 id="求数组的长度"><a href="#求数组的长度" class="headerlink" title="求数组的长度"></a>求数组的长度</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr1.length;<span class="comment">//直接调用length</span></span><br><span class="line">        System.out.println(len); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组的打印方式"><a href="#数组的打印方式" class="headerlink" title="数组的打印方式"></a>数组的打印方式</h3><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><p>和C语言一样<br>用一个循环，然后打印</p><h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> val:arr1) &#123;</span><br><span class="line">            System.out.println(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (数组中元素的类型 自定义变量名： 数组名) &#123;</span><br><span class="line">    System.out.println(自定义变量名);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="将数组以字符串的形式输出"><a href="#将数组以字符串的形式输出" class="headerlink" title="将数组以字符串的形式输出"></a>将数组以字符串的形式输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要导入包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> Arrays.toString(arr1);<span class="comment">//以字符串形式输出</span></span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组传参"><a href="#数组传参" class="headerlink" title="数组传参"></a>数组传参</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="comment">//数组传参</span></span><br><span class="line">        printArr(arr);</span><br><span class="line">    &#125;</span><br><span class="line">                               <span class="comment">//接收数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArr</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">//打印数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> val:arr) &#123;</span><br><span class="line">            System.out.println(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/2022-07-22-17-25-42.png"></p><ul><li>数组传参后在函数中操作会改变数组中的值.</li></ul><h2 id="JVM内存区域的划分"><a href="#JVM内存区域的划分" class="headerlink" title="JVM内存区域的划分"></a>JVM内存区域的划分</h2><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/2022-07-22-18-36-38.png"></p><h3 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h3><h4 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h4><p>用for循环，然后返回数组</p><h4 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h4><p><code>int[] arr = Arrays.copyOf(被拷贝的数组，要拷贝的长度)</code></p><h4 id="第三种方法"><a href="#第三种方法" class="headerlink" title="第三种方法"></a>第三种方法</h4><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/2022-07-22-19-41-31.png"></p><h4 id="第四种方法"><a href="#第四种方法" class="headerlink" title="第四种方法"></a>第四种方法</h4><p><code>int[] arr = 被拷贝的数组名.clone();</code></p><blockquote><p>这4中方式从本质上来说都是浅拷贝</p></blockquote><h4 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h4><h5 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h5><p>举个例子，有两个数组，arr1和arr2<br>arr2是arr1的拷贝.<br>此时如果通过arr2修改arr2自己的元素，且不影响arr1的元素，就叫做深拷贝.</p><ul><li>数组中存放的是简单类型</li></ul><h5 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h5><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/2022-07-22-20-18-00.png"><br>array2是array1的拷贝<br>如上图所示：此时如果我改变array2中的数据，那array1中的数据也会改变，这就是浅拷贝.</p><ul><li>数组中存放的是引用类型</li></ul><h3 id="在数组中查找一个元素"><a href="#在数组中查找一个元素" class="headerlink" title="在数组中查找一个元素"></a>在数组中查找一个元素</h3><p><code>Arrays.binarySearch(数组名，要查找的数字)</code></p><h4 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h4><p><code>Arrays.binarySearch(数组名，查找的起始位置，查找的终止位置，要查找的数字)</code><br>[查找的起始位置，查找的终止位置)<br>起始位置和终止位置是左闭右开区间，闭区间是包含，开区间是不包含</p><h3 id="数组比较"><a href="#数组比较" class="headerlink" title="数组比较"></a>数组比较</h3><p><code>Arrays.equals(数组1，数组2);</code></p><h3 id="数组填充"><a href="#数组填充" class="headerlink" title="数组填充"></a>数组填充</h3><p><code>Arrays.toString(要填充的数组，填充的值);</code></p><p><code>Arrays.toString(要填充的数组，填充的起始位置，填充的终止位置，填充的值);</code><br>[填充的起始位置，填充的终止位置),左闭右开区间</p><h3 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h3><p><code>Arrays.sort(数组名);</code></p><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><h3 id="创建二维数组"><a href="#创建二维数组" class="headerlink" title="创建二维数组"></a>创建二维数组</h3><p><code>int[][] arr = &#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;&#125;;</code></p><ul><li>在java中不能像C语言一样写<code>int[][] arr = &#123;1,2,3,4,5,6&#125;;</code>,{}里的元素必须使用<code>&#123;&#125;</code>分开.</li><li>在java中<code>int[][]</code>的<code>[]</code>里是不能写具体的数字的.</li></ul><p>另一种写法：<code>int[][] arr = new int[][]&#123;&#123;1，2,3&#125;,&#123;4,5,6&#125;&#125;</code><br>这种写法和上面表达的意思完全相同</p><h3 id="打印二维数组"><a href="#打印二维数组" class="headerlink" title="打印二维数组"></a>打印二维数组</h3><h4 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h4><p>和C语言一样，用两个for循环打印</p><h4 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j&lt;arr[i].length;j++) &#123;</span><br><span class="line">                System.out.println(arr[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第三种打印方式"><a href="#第三种打印方式" class="headerlink" title="第三种打印方式"></a>第三种打印方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span>[] tmp:arr) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x: tmp) &#123;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组在内存中的存储"><a href="#二维数组在内存中的存储" class="headerlink" title="二维数组在内存中的存储"></a>二维数组在内存中的存储</h3><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/2022-07-23-16-59-15.png"></p><p>相当于是一个一维数组中存了2个元素<br>这两个元素是<code>int[0][]</code>,<code>int[1][]</code><br>这两个元素是地址.（0x111）（0x222）<br>通过这两个元素的地址在去找对应的元素</p><h3 id="不规则的二维数组"><a href="#不规则的二维数组" class="headerlink" title="不规则的二维数组"></a>不规则的二维数组</h3><p>规则的二维数组是指定了行和列<br>不规则的二维数组是指定了行，没指定列.<br>c语言中必须指定列.可以不指定行<br>java中必须指定行，可以不指定列</p><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><blockquote><p>问：什么是类？<br>答：抽象的理解，可以理解为模板，或者机械中的模具，造房子的蓝图，制作糕点的模子<br>类在java中也叫自定义类型</p></blockquote><blockquote><p>问：什么是对象<br>可以理解为实体，对象是一个实体<br>比如通过蓝图，建造出的房子.通过模具制造的零件，<br>通过一个类，可以产生多个对象.</p></blockquote><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/2022-07-24-11-55-15.png"></p><h3 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h3><ul><li>一个java文件只能写一个类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class 类名 &#123;</span><br><span class="line">    具体内容：</span><br><span class="line">    <span class="comment">//字段 --&gt; 成员变量</span></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">&#125;</span><br><span class="line">Public <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main（String[] args） &#123;</span><br><span class="line">        <span class="comment">//创建对象，专业术语:实例化对象</span></span><br><span class="line">        类名 自定义变量名 = <span class="keyword">new</span> 类名();</span><br><span class="line">        类名 自定义变量名 = <span class="keyword">new</span> 类名();</span><br><span class="line">        类名 自定义变量名 = <span class="keyword">new</span> 类名();</span><br><span class="line">        类名 自定义变量名 = <span class="keyword">new</span> 类名();</span><br><span class="line">        <span class="comment">//一个类可以创建多个对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>(field)字段：也可以叫成员变量.</p><ul><li>成员变量定义在方法外边，类的里边.</li></ul></li><li><p>(method)方法：专业名词：实例成员方法</p></li><li><p>实例化对象：创建对象，关键词<code>new</code></p><ul><li>定义在对象里面</li><li>实例成员没有初始化，默认为对应的0值，简单类型为0，引用类型为null</li></ul></li></ul><h3 id="创建类时，在内存中的存储"><a href="#创建类时，在内存中的存储" class="headerlink" title="创建类时，在内存中的存储"></a>创建类时，在内存中的存储</h3><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/2022-07-24-14-46-13.png"></p><h3 id="静态成员变量、静态方法"><a href="#静态成员变量、静态方法" class="headerlink" title="静态成员变量、静态方法"></a>静态成员变量、静态方法</h3><h4 id="创建静态成员变量"><a href="#创建静态成员变量" class="headerlink" title="创建静态成员变量"></a>创建静态成员变量</h4><p><code>public static 数据类型 变量名 = 值;</code></p><ul><li>可以不赋值，不赋值默认为对应的0值</li><li>静态成员变量不属于对象，属于类</li><li>静态成员变量存放于方法区</li></ul><h4 id="创建静态方法"><a href="#创建静态方法" class="headerlink" title="创建静态方法"></a>创建静态方法</h4><p><code>public static 返回值类型 方法名() &#123;方法体;&#125;；</code></p><ul><li>静态方法存放与方法区</li></ul><h4 id="访问静态成员变量、静态方法"><a href="#访问静态成员变量、静态方法" class="headerlink" title="访问静态成员变量、静态方法"></a>访问静态成员变量、静态方法</h4><p><code>类名.静态成员变量名；</code><br><code>类名.静态方法；</code></p><h3 id="访问限定修饰符"><a href="#访问限定修饰符" class="headerlink" title="访问限定修饰符"></a>访问限定修饰符</h3><p>Public:公有的<br>Private:私有的<br>Protected:受保护的<br>默认权限：包访问权限<br>什么都不写：默认权限</p><h3 id="被static修饰"><a href="#被static修饰" class="headerlink" title="被static修饰"></a>被static修饰</h3><h4 id="static修饰成员变量"><a href="#static修饰成员变量" class="headerlink" title="static修饰成员变量"></a>static修饰成员变量</h4><p>非静态需要使用new<br>被static修饰的成员变量通过<code>类名.变量名；</code>访问</p><h4 id="static修饰方法"><a href="#static修饰方法" class="headerlink" title="static修饰方法"></a>static修饰方法</h4><p>非静态需要使用new<br>静态方法属于类.<br>可以直接调用静态方法，无需创建类的实例.直接使用<code>类名.方法名；</code>调用<br>静态方法可以访问静态数据成员，并可以修改静态数据成员的值<br><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/2022-07-24-15-16-48.png"></p><h2 id="封装（private）"><a href="#封装（private）" class="headerlink" title="封装（private）"></a>封装（private）</h2><p>关键词：private<br>被private修饰的成员变量，只能在当前类中使用<br>如果没有特殊要求，一个类中的属性最好都设置为Privvate<br>要是使用者想用.操作者可以提供一个公开的接口给使用者使用</p><p>关键词：this<br>this:表示当前对象的引用</p><h3 id="生成接口"><a href="#生成接口" class="headerlink" title="生成接口"></a>生成接口</h3><p>可以自己写接口<br>在IDEA中按住ALT+INSERT或者ALT+F12就可以快速生成一个接口</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>首先，一个对象是如何产生的</p><ul><li>1.为对象分配内存</li><li>2.调用合适的构造方法</li></ul><p>构造方法和类名是相同的，且没有返回值<br>当一个类中没有提供构造方法，那么编译器会自动提供一个不带参数的构造方法<br>当你自己提供了一个构造方法，编译器就不会自动生成构造方法.</p><blockquote><p>问：构造方法是干什么的<br>答：是用来构造对象的</p></blockquote><h2 id="面试问题-1"><a href="#面试问题-1" class="headerlink" title="面试问题"></a>面试问题</h2><blockquote><p>问：this关键词代表对象.这句话对不对<br>答：不对<br>问：为什么不对<br>答：因为this表示的是当前对象的引用.而一个对象的产生分为2步，1.为对象分配内存，2.调用合适的构造方法.但是在构造方法中就已经出现了this，这时对象还没有被创建.</p></blockquote><h3 id="this的几种功能"><a href="#this的几种功能" class="headerlink" title="this的几种功能"></a>this的几种功能</h3><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/2022-07-24-20-23-54.png"><br>this只能在构造方法里写.<br>this只能调用一次.<br>this只能写在第一行.</p><h2 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h2><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/2022-07-24-21-56-26.png"></p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/2022-07-26-15-28-11.png"></p><ul><li>单链表由节点组成</li></ul><h4 id="不带头节点的单向非循环链表"><a href="#不带头节点的单向非循环链表" class="headerlink" title="不带头节点的单向非循环链表"></a>不带头节点的单向非循环链表</h4><p>头（head）节点中有数据（data）</p><h4 id="带头节点的单向非循环链表"><a href="#带头节点的单向非循环链表" class="headerlink" title="带头节点的单向非循环链表"></a>带头节点的单向非循环链表</h4><p>头（head）节点中没数据（data）</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/2022-07-26-15-39-12.png"></p><ul><li>带头节点的链表，不管在哪里插入数据都不能把头节点破坏掉</li></ul><h3 id="单链表题"><a href="#单链表题" class="headerlink" title="单链表题"></a>单链表题</h3><h4 id="头插法（不带头节点的单链表）"><a href="#头插法（不带头节点的单链表）" class="headerlink" title="头插法（不带头节点的单链表）"></a>头插法（不带头节点的单链表）</h4><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/2022-07-26-18-11-25.png"></p><h4 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="comment">//创建节点</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(data);</span><br><span class="line">    <span class="comment">//尾插法也要判断插入的数据是不是第一个</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.head==<span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = node;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//找到最后一个数据的地址</span></span><br><span class="line">    Node cur= <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">while</span>(cur.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    cur.next = node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="指定位置插入"><a href="#指定位置插入" class="headerlink" title="指定位置插入"></a>指定位置插入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在指定位置插入（第一个数据的下标算他为0）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addIndex</span><span class="params">(<span class="type">int</span> index,<span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="comment">//插入的位置是0直接头插法</span></span><br><span class="line">    <span class="keyword">if</span>(index==<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.addFirst(data);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//插入的位置是最后一个，使用尾插法</span></span><br><span class="line">    <span class="keyword">if</span>(index==<span class="built_in">this</span>.size()) &#123;</span><br><span class="line">        <span class="built_in">this</span>.addLast(data);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(data);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="built_in">this</span>.searchIndex(index);</span><br><span class="line">    node.next = cur.next;</span><br><span class="line">    cur.next = node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找到指定位置的前一个节点的地址</span></span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">searchIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="comment">//对index坚持合法性</span></span><br><span class="line">    <span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;<span class="built_in">this</span>.size()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;index不合法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//开始找</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">while</span>(index-<span class="number">1</span>!=<span class="number">0</span>) &#123;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">        index--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除第一次出现指定数据（data）的节点"><a href="#删除第一次出现指定数据（data）的节点" class="headerlink" title="删除第一次出现指定数据（data）的节点"></a>删除第一次出现指定数据（data）的节点</h4><p>和上面不一样，上面找到是下标(index)，这里找的是数据（data）<br>需要先找到第一次出现指定数据（data）的位置<br>然后要删除这个数据，就需要找到前一个节点.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找到指定数据的节点的前一个节点</span></span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">searchData</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">while</span>(prev.next!=<span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prev.next.data == data) &#123;</span><br><span class="line">            <span class="keyword">return</span> prev;</span><br><span class="line">        &#125;</span><br><span class="line">        prev = prev.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后还是删节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除第一次出现指定数据（data）的节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="comment">//先判断有没有节点</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.head==<span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在判断有几个节点，如果只有一个就直接删除</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.head.data==data) &#123;</span><br><span class="line">        <span class="built_in">this</span>.head=<span class="built_in">this</span>.head.next;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//接收要删除的数据的上一个节点</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> searchData(data);</span><br><span class="line">    <span class="comment">//判断接收的节点是否为空</span></span><br><span class="line">    <span class="keyword">if</span>(prev == <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;没有这个节点&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//拿到要删除的节点</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">del</span> <span class="operator">=</span> prev.next;</span><br><span class="line">    <span class="comment">//开始删除</span></span><br><span class="line">    prev.next=del.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除所有指定数据的节点（前提条件：只能遍历一遍链表）"><a href="#删除所有指定数据的节点（前提条件：只能遍历一遍链表）" class="headerlink" title="删除所有指定数据的节点（前提条件：只能遍历一遍链表）"></a>删除所有指定数据的节点（前提条件：只能遍历一遍链表）</h4><p>上面是删除出现的第一个数据的节点<br>这个是删除所有，假设链表里可能有多个同样数据的节点.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除链表中出现指定数据（data）的所有节点</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeAllDaa</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">     <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="built_in">this</span>.head;</span><br><span class="line">     <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> prev.next;</span><br><span class="line">     <span class="comment">//先删出去头节点以外的节点.cur是null的时候就说明链表走完了</span></span><br><span class="line">     <span class="keyword">while</span>(cur!=<span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span>(cur.data==data) &#123;</span><br><span class="line">             <span class="comment">//判断data如果是就删除节点，并且cur往后走一步</span></span><br><span class="line">            prev.next = cur.next;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">//判断不是，那prev就变成cur,然后cur在往后走一步</span></span><br><span class="line">             prev = cur;</span><br><span class="line">             cur = cur.next;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//在判断头节点是不是要删的节点</span></span><br><span class="line">     <span class="keyword">if</span>(<span class="built_in">this</span>.head.data==data) &#123;</span><br><span class="line">         <span class="comment">//如果头节点是，那就把头节点删除</span></span><br><span class="line">         <span class="built_in">this</span>.head=<span class="built_in">this</span>.head.next;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这里的细节是，先删除了头以外的节点，最后在判断头要不要删<br>如果先判断头要不要删，假设刚好头需要删，那么在运行之后的程序会发现，新的头会被忽略掉（不会被考虑是否需要删除）.<br>如果这个新的头的数据(data)刚好是要删除的.那么就会直接被跳过<br>所以先删除了头以外的数据.再判断头是否需要删除.</p><h4 id="翻转链表"><a href="#翻转链表" class="headerlink" title="翻转链表"></a>翻转链表</h4><p>有三种方法1.迭代2.递归3.利用头插法实现</p><h5 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//翻转链表,返回新链表的head</span></span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">reverseList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//用来操作的中间节点</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="comment">//前一个节点</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//返回的节点</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">newHead</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(cur!=<span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//下一个节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">curNext</span> <span class="operator">=</span> cur.next;</span><br><span class="line">        <span class="comment">//当curNext走到null就说明走到最后了.</span></span><br><span class="line">        <span class="keyword">if</span>(curNext==<span class="literal">null</span>) &#123;</span><br><span class="line">            newHead = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.next = prev;</span><br><span class="line">        prev = cur;</span><br><span class="line">        cur = curNext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不带头双向链表"><a href="#不带头双向链表" class="headerlink" title="不带头双向链表"></a>不带头双向链表</h2><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/2022-07-30-15-50-10.png"></p><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>包（package）<br>包是组织类的一种方式<br>使用包的主要目的是保证类的唯一性</p><ul><li>比如说，在开发中，2个人写了同名的类就会冲突导致编译不能通过</li><li>这时，只要把同名的类放进不同的包里.就可以不冲突的使用.</li></ul><h3 id="创建包"><a href="#创建包" class="headerlink" title="创建包"></a>创建包</h3><p>1.创建包的时候，包名一定是小写的.<br>2.包的命名，包的名字一般用的是域名，域名反过来写.比如百度的域名是<code>www.baidu.com</code>,那百度的包就叫，<code>com.baidu.wwww</code><br>3.包名要和代码路径匹配.因为你创建包的时候，会根据你的包名自动创建一个路径来存放代码<br>4.如果一个类没有package语句，该类会被放到默认包中</p><h3 id="切换包的样式"><a href="#切换包的样式" class="headerlink" title="切换包的样式"></a>切换包的样式</h3><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220802123842509.png"></p><h3 id="使用包"><a href="#使用包" class="headerlink" title="使用包"></a>使用包</h3><p>系统提供的包调用：<code>import java.util.包名;</code></p><p>自己写的包调用：<code>package 包名 ;</code></p><h3 id="常见的系统包"><a href="#常见的系统包" class="headerlink" title="常见的系统包"></a>常见的系统包</h3><p>lang的包不需要手动导入</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220731200131359.png"></p><h2 id="继承（extends）"><a href="#继承（extends）" class="headerlink" title="继承（extends）"></a>继承（extends）</h2><p>关键字 - extends</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220802131350636.png">、</p><h3 id="演示继承怎么用"><a href="#演示继承怎么用" class="headerlink" title="演示继承怎么用"></a>演示继承怎么用</h3><p>首先创建了一个类，叫Animal（动物）</p><p>动物有名字，有动作，会吃，会睡觉</p><p>创建完之后就是这样的：（注：实际开发中一个java文件里只能有一个类（class），学习时为了方便所以写在一个文件中.）</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220802125733498.png"></p><p>然后在创建几个，Cat(猫)、Bird(鸟）.</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220802130748938.png"></p><p>创建完后正常的使用都是没问题的.</p><p>使用过程中发现，猫会吃东西，鸟会吃东西，动物也会吃东西，假如说以后动物多了，那吃东西（eat）这个方法会被写很多遍.</p><p>在想想后，这三个类都有一个相同的eat方法，也都有name属性.行为和意义完全一样</p><p>所以可以使用继承，来达到代码重用的效果.</p><p>这样就不需要每次新建一种动物，就要写一遍name和eat.</p><hr><p>开始继承，以猫(cat)继承动物(animal)为例，修改一下代码.</p><p>修改完的代码如下：</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220802140716970.png"></p><p>Cat中的代码被屏蔽了，但是可以正常运行.</p><p>下面对代码进行说明：</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220802141037729.png"></p><p>这就是继承</p><p>子类继承父类除构造方法外所有的.</p><p>如果子类里有代码的情况：</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220802142210012.png"></p><p>子类可以使用自己里面的代码，也可以使用父类的代码.</p><ul><li>父类中有private的代码子类是不能使用的</li></ul><hr><h4 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h4><p><strong>super关键字可以调用父类的构造方法</strong></p><p>继续修改代码，在Animal类中加个构造方法</p><p>会发现报错了，如下：</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220802144535715.png"></p><p>问：为什么会报错呢？</p><p>答：因为子类在构造的时候，要先帮助父类进行构造</p><p>问：为什么之前Animal是默认构造方法的时候没报错.</p><p>答：其实之前默认构造方法的时候，也是先构造的父类在构造的子类，只是因为默认的构造方法是什么都没有，所以看不出来.</p><p>问：为什么自己写了一个构造方法就报错了？</p><p>答：因为自己写的构造方法需要传过去一个name才能构造，而构造子类需要先构造父类.子类中没传name过去，那父类就没法构造，子类就也没法构造，所以就报错了.</p><p>开始修改代码并分析：</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220802153943910.png"></p><hr><p>最后在看一个</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220802161401068.png"></p><h3 id="继承的规则"><a href="#继承的规则" class="headerlink" title="继承的规则"></a>继承的规则</h3><ol><li>使用extends继承父类</li><li>java中一个子类只能继承一个父类</li><li>一个父类可以被多个子类继承</li><li>子类会继承父类中所有public的字段和方法</li><li>父类中private的字段和方法，子类是不能使用的.（是不能被子类使用，但还是被子类继承的）</li><li>子类的实例中也包含父类的实例，可以使用super关键字引用.</li><li>子类可以继承父类，新子类可以继承（子类继承父类），可以无限套娃继承</li><li>继承不建议超过三层</li></ol><h3 id="继承的优点"><a href="#继承的优点" class="headerlink" title="继承的优点"></a>继承的优点</h3><ul><li>可以达到代码的复用效果</li></ul><p>问：什么是代码复用？</p><p>答：子类可以使用父类的代码（除构造方法外所有的）</p><blockquote><p>继承的意义是：为了代码的复用.如果不继承，那么重复的代码会变得非常多.</p></blockquote><h2 id="面试问题-2"><a href="#面试问题-2" class="headerlink" title="面试问题"></a>面试问题</h2><blockquote><p>问：子类继承了父类的什么？</p><p>答：子类继承了除父类构造方法外的所有属性和方法.</p></blockquote><blockquote><p>问：请说出this关键字和super关键字的区别</p><p>答：this针对的是当前类.super针对的是父类.</p><p>super的用法:（super代表父类对象的引用）</p><ol><li>super();&#x2F;&#x2F;掉用父类的构造方法</li><li>super.属性名;&#x2F;&#x2F;访问父类的属性</li><li>super.方法名;&#x2F;&#x2F;访问父类的成员方法</li></ol><p>this的用法：(this表示对当前对象的引用)</p><ol><li>this();&#x2F;&#x2F;调用当前类的构造方法</li><li>this.属性名;&#x2F;&#x2F;访问当前类中的属性</li><li>this.方法(函数)名;&#x2F;&#x2F;访问当前类中的方法</li></ol></blockquote><h2 id="访问限定修饰符-1"><a href="#访问限定修饰符-1" class="headerlink" title="访问限定修饰符"></a>访问限定修饰符</h2><p>创建了一个类，类中有一个成员，如果不加访问限定修饰符就是默认访问权限。</p><p>默认访问权限是：包访问权限</p><p>包访问权限是：只能在同一包中进行访问使用.</p><p>访问限定修饰符有：</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220802162023433.png"></p><p>被protected修饰的，从不同包中的子类进行访问要用super</p><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><p>举例：<code>final int a = 10;</code>修饰变量</p><p>被final修饰后就变成了常量，只能被初始化一次，接下来不能被修改</p><p>举例：<code>final 类名;</code>修饰类</p><p>被final修饰的类，不能被继承.</p><p>举例：<code>final 方法名;</code>修饰方法</p><p>被final修饰的方法叫密封方法.</p><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><p>组合和继承类似，组合也是表达类之间关系的方式，也能够达到代码复用的效果</p><p>继承中两个类的关系是is-a.比如说，鸟是动物，猫是动物.但不能反过来说动物都是鸟.</p><p>组合中类的关系是has-a,比如说，学校里有老师，学校里有学生.但不能说老师是学校.</p><p>看代码：</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220802205822759.png"></p><blockquote><p>组合中没有特殊的语法（比如像继承中的extends），组合就是将一个类的实例作为另一个类的字段.</p></blockquote><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h3><p>先看一下总的代码，普通调用的代码：</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220802214304712.png"></p><hr><p>那什么叫向上转型呢？</p><p>其他的没变，主函数里稍微改变一下，代码如下：</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220802215207483.png"></p><blockquote><p>(父类引用)引用(子类对象)就是向上引用（向上转型）</p></blockquote><hr><p>那向上引用有什么用呢，或者说和普通引用差在哪里.</p><p>稍微修改下代码，看代码：</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220802221448757.png"></p><blockquote><p>结论就是：向上转型之后，通过父类引用（ani）只能访问父类自己的方法和属性.不能访问子类的方法和属性.</p></blockquote><h4 id="向上转型的时机"><a href="#向上转型的时机" class="headerlink" title="向上转型的时机"></a>向上转型的时机</h4><h5 id="1-直接赋值"><a href="#1-直接赋值" class="headerlink" title="1.直接赋值"></a>1.直接赋值</h5><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220802224003955.png"></p><h5 id="2-传参"><a href="#2-传参" class="headerlink" title="2.传参"></a>2.传参</h5><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220802230426142.png"></p><h5 id="3-返回值"><a href="#3-返回值" class="headerlink" title="3.返回值"></a>3.返回值</h5><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220802231949344.png"></p><h3 id="运行时绑定（动态绑定）"><a href="#运行时绑定（动态绑定）" class="headerlink" title="运行时绑定（动态绑定）"></a>运行时绑定（动态绑定）</h3><p>先看代码</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220802234453457.png"></p><p>导致这个结果的原因就是发生了&#x3D;&#x3D;<strong>多态</strong>&#x3D;&#x3D;</p><p>这个过程也叫运行时绑定</p><p>也可以叫动态绑定</p><p>运行时绑定发生的**&#x3D;&#x3D;前提&#x3D;&#x3D;**是通过（父类引用）引用（子类对象），通过父类引用调用同名的方法.</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220802235359614.png"></p><blockquote><p>从底层原理来看，代码在&#x3D;&#x3D;<strong>编译</strong>&#x3D;&#x3D;的时候，确实是去调用的Animal的eat,但是最后&#x3D;&#x3D;<strong>运行</strong>&#x3D;&#x3D;还是变成了Cat的eat</p><p>在运行的时候才确定调用的是谁</p><p>这就是运行时绑定，也叫动态绑定.</p></blockquote><blockquote><p>（父类引用）引用（子类对象）.同时，通过（父类引用）调用同名的覆盖方法.此时会发生运行时绑定（动态绑定）</p></blockquote><blockquote><p>总结：在调用有继承关系的两个类的方法的时候，究竟是执行父类的方法还是执行子类的方法.这个调用过程是由程序&#x3D;&#x3D;运行&#x3D;&#x3D;时决定，而不是&#x3D;&#x3D;编译&#x3D;&#x3D;时决定的叫运行时绑定，也叫动态绑定.</p></blockquote><h3 id="重写和重载"><a href="#重写和重载" class="headerlink" title="重写和重载"></a>重写和重载</h3><h4 id="重写（override）"><a href="#重写（override）" class="headerlink" title="重写（override）"></a>重写（override）</h4><p>也可以叫覆盖，覆写</p><p>1.方法（函数）名称相同</p><p>2.返回值相同</p><p>3.参数列表相同</p><p>注意事项：</p><p>1.重写和重载不一样</p><p>2.被final修饰的和静态（static）的方法不能被重写</p><p>3.私有的（private）方法不能被重写</p><p>4.子类中方法的访问限定修饰符权限必须大于等于父类的访问限定修饰符权限。不然不能重写.</p><blockquote><p>必须在不同的两个类上才能重写.因为你一个类中，写2个一模一样的方法有什么意义吗？</p><p>这两个类必须是&#x3D;&#x3D;继承&#x3D;&#x3D;关系，是子类还是父类无所谓.</p></blockquote><h4 id="重载（overload）"><a href="#重载（overload）" class="headerlink" title="重载（overload）"></a>重载（overload）</h4><p>1.方法（函数）名相同</p><p>2.参数列表不同（参数的数据类型不同，参数的个数不同就可以）</p><p>3.返回值不做要求</p><blockquote><p>必须是同一个类中.</p></blockquote><h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h3><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220803005420419.png"></p><ul><li><p>向下转型非常不安全，很少会使用向下转型</p><p>问：为什么不安全？</p><p>答：在使用强制类型转换的时候，如果说你强转的类型不匹配，编译器不会直接报错（代码下有红色波浪线）。而是在运行时才会报异常（类型转换异常）</p><h3 id="instanceof关键字"><a href="#instanceof关键字" class="headerlink" title="instanceof关键字"></a>instanceof关键字</h3><p>instanceof(运算符)</p><p>为了防止向下转型发生错误，可以使用关键字instanceof（运算符）</p><p>使用方法：<code>if(类名A instanceof 类名B) &#123;......&#125;;</code></p><p>这个关键字可以判断A是不是B的一个实例.判断一下A引用的是不是B.</p></li></ul><h3 id="在构造方法中调用重写方法"><a href="#在构造方法中调用重写方法" class="headerlink" title="在构造方法中调用重写方法"></a>在构造方法中调用重写方法</h3><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220803013445102.png"></p><blockquote><p>在构造方法中会发生动态绑定</p></blockquote><h3 id="多态小总结"><a href="#多态小总结" class="headerlink" title="多态小总结"></a>多态小总结</h3><p>问：什么是多态？</p><p>答：一种事物的多种形态.多态也可以是一种思想</p><h4 id="多态发生的前提"><a href="#多态发生的前提" class="headerlink" title="多态发生的前提"></a>多态发生的前提</h4><ol><li>（父类引用）引用（子类对象）</li><li>父类和子类有同名的覆盖（重写、覆写）方法</li><li>通过父类引用调用重写的代码</li></ol><h4 id="多态的好处"><a href="#多态的好处" class="headerlink" title="多态的好处"></a>多态的好处</h4><p>类的调用者对类的使用成本降低</p><ul><li>封装让类的调用者不需要知道类的细节</li><li>多态能让类的调用者连这个类的类型是什么都不必知道，只要知道这个对象有某个方法直接调用即可</li><li>降低了代码管理的复杂度</li><li>可拓展能力强，使用多态的代码改动成本也较低</li></ul><h3 id="圈复杂度"><a href="#圈复杂度" class="headerlink" title="圈复杂度"></a>圈复杂度</h3><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220803185510407.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220803185724405.png"></p><h2 id="抽象类（abstract）"><a href="#抽象类（abstract）" class="headerlink" title="抽象类（abstract）"></a>抽象类（abstract）</h2><p>关键字 - abstract</p><p>一个类被abstract修饰他就是抽象类</p><p>抽象类里可以没有抽象方法.</p><p>抽象类里面的属性和方法可以不是抽象的</p><h3 id="1-抽象方法"><a href="#1-抽象方法" class="headerlink" title="1.抽象方法"></a>1.抽象方法</h3><p>一个方法被abstract修饰，他就是抽象方法</p><p>抽象方法不能被private修饰</p><p>如果一个类中有一个抽象方法，这个类就必须声明成抽象类</p><h3 id="抽象类注意点"><a href="#抽象类注意点" class="headerlink" title="抽象类注意点"></a>抽象类注意点</h3><ol><li>抽象类不可以被实例化</li><li>抽象类里的数据成员和方法，与普通类没区别</li><li>抽象类主要就是被用来继承的</li><li>如果一个类继承了抽象类，那么这个类必须重写抽象类中的抽象方法（如果不想重写抽象方法，就把子类也变成抽象类）</li><li>抽象类和抽象方法不能被final修饰，抽象方法不能被private修饰</li></ol><h3 id="抽象类的作用"><a href="#抽象类的作用" class="headerlink" title="抽象类的作用"></a>抽象类的作用</h3><p>就是用来被继承</p><h2 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口(interface)"></a>接口(interface)</h2><p>一个类被interface修饰就是接口</p><h3 id="创建接口"><a href="#创建接口" class="headerlink" title="创建接口"></a>创建接口</h3><p>具体语法<code>interface 接口名&#123;......&#125;;</code></p><h3 id="继承接口（implement）"><a href="#继承接口（implement）" class="headerlink" title="继承接口（implement）"></a>继承接口（implement）</h3><p>具体语法：<code>class 类名 implement 接口名&#123;......&#125;;</code></p><h3 id="接口的规则和注意点"><a href="#接口的规则和注意点" class="headerlink" title="接口的规则和注意点"></a>接口的规则和注意点</h3><ol><li>接口中的方法都是抽象方法，接口中的方法不能被具体实现</li><li>JDK1.8后接口中的方法可以被具体实现，（在需要具体实现的方法前用default修饰）</li><li>接口中定义的变量，默认是静态常量（public static final修饰）.方法默认是抽象方法（public abstract修饰）</li><li>接口和抽象类一样，不可以被实例化（但是可以用（接口引用）引用（子类对象）来使用.和（父类引用）引用（子类对象）一样）</li><li>接口和类的关系是implement，使用implement继承接口.</li><li>一个类继承（implement）了接口，一定要在这个类中重写接口中的方法</li><li>接口和类发生继承（implement）关系后，就可以发生向上转型</li></ol><h3 id="接口的作用"><a href="#接口的作用" class="headerlink" title="接口的作用"></a>接口的作用</h3><p>接口可以有多个.</p><p>解决java中单继承的问题（在java中一个类只能继承一个类）</p><h3 id="接口解决多继承问题"><a href="#接口解决多继承问题" class="headerlink" title="接口解决多继承问题"></a>接口解决多继承问题</h3><p>有时需要一个子类继承多个父类，但是在java中一个子类只能继承一个父类。</p><p>在别的语言中可以通过多继承来实现.</p><p>而java只能是单继承。</p><p>但是java可以使用多个接口，来达到多继承的效果.</p><p>看代码：</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220803223055536.png"></p><h3 id="接口的使用"><a href="#接口的使用" class="headerlink" title="接口的使用"></a>接口的使用</h3><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220803223906071.png"></p><hr><hr><hr><h5 id="关于Comparable-lt-gt"><a href="#关于Comparable-lt-gt" class="headerlink" title="关于Comparable&lt;&gt;"></a>关于Comparable&lt;&gt;</h5><p>先在类中调用这个接口.</p><p>然后会报错，代码底下有红色波浪线</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220804003349761.png"></p><p>这个主要用在自定义类型的，按照其中的某个值对自定义类型进行排序.</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220804002610520.png"></p><p>这个操作大体流程就是，将自定义类型的数组传入sort–》在自定义类型中继承接口Comparables&lt;自定义类型名&gt;–》重写compareTo(Student  o)方法.</p><h3 id="extends拓展"><a href="#extends拓展" class="headerlink" title="extends拓展"></a>extends拓展</h3><p>一个类可以实现多个接口.</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220811214727958.png"></p><p>如果一个接口extends了多个接口，就不叫继承了，叫拓展</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220811214919878.png"></p><h2 id="克隆Clone-Clonable接口和深拷贝"><a href="#克隆Clone-Clonable接口和深拷贝" class="headerlink" title="克隆Clone\Clonable接口和深拷贝"></a>克隆Clone\Clonable接口和深拷贝</h2><p>深拷贝：对数据进行拷贝，在修改拷贝的数据时，不影响原来的数据叫深拷贝.</p><p>浅拷贝：对数据进行拷贝，在修改拷贝的数据时，会影响原来的数据叫浅拷贝.</p><p>如果一个类实现了空接口（标记接口），就说明这个类是可以克隆（clone）的.</p><p>一个类被克隆，需要满足2个要求：</p><ol><li>实现了空接口</li><li>重写克隆(clone)方法.重写的是Object的clone方法.</li></ol><blockquote><p>实现接口：<code>interface Cloneable;</code></p></blockquote><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><code>Clonable;</code>是一个接口.</p><p><code>clone();</code>本身是浅拷贝，clone想直接拷贝一个类是不行的.</p><p>一个类实现这个接口并重写clone方法就可以对这个类进行克隆.</p><p>先创建一个类（人），这个类中只写了一个成员属性age.</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220809201241750.png"></p><p>接着在主函数<code>Person p1 = new Person();</code>new个新对象出来</p><p>然后直接调用<code>clone();</code>会发现是没有clone选项的.</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220809201346995.png"></p><hr><p>那要怎么进行克隆，要先让人这个类实现Clonable这个接口</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220809201626129.png"></p><p>然后鼠标放到人这个类中，按ALT+INSERT,出现如下界面后点击.这一步就是重写Object类中的clone方法.</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220809201959595.png"></p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220809202009601.png"></p><p>然后在输入，就发现有clone了</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220809202104189.png"></p><p>但到现在还没结束.clone()下面还是有红色报错.</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220809202229641.png"></p><p>这是因为重写的克隆的方法声明了（throws）一个异常.</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220809202515084.png"></p><p>所以在用这个方法的时候需要处理这个异常.</p><p>怎么做呢？鼠标点到clone上右键.找到小灯泡，点进去，有两个灯泡，都可以选，我选了第一个.</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220809202752079.png"></p><p>选完后会自动生成</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220809202855619.png"></p><p>到现在是在报错，这是为什么呢？因为在上面重写的构造方法中返回值是Object,所以这里要强制类型装换一下</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220809203305124.png"></p><p>拷贝完成.</p><p>这种拷贝出的结果是<strong>深拷贝</strong></p><hr><p>分析一下代码大概的执行过程</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220809225657107.png"></p><p>这样就完成了深拷贝.</p><hr><hr><p>现在新写一个类</p><p>钱</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220809203508031.png"></p><p>然后我在人(person)中new一个钱</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220809203808247.png"></p><p>然后在主函数里执行如下代码</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220809203834233.png"></p><p>会发现，刚刚新加的m是浅拷贝.</p><p>因为如果这样写的话，在内存中是这样的</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220809204605058.png"></p><p><strong>注：上面图中的m的数据是Money类中的m，不是Person类中的</strong></p><p>造成了m浅拷贝.</p><p>如果想让m也是深拷贝.</p><p>接下来开始修改代码.</p><p>总的来说就是要让Money也被深拷贝</p><p>所以，首先让Money也实现个Cloneable接口，然后在Money中重写一下clone方法</p><p><strong>为了方便区分，Money类中的<code>double m = 100;</code>改成<code>double money = 100;</code></strong></p><p>修改后的代码如下：</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220809230821425.png"></p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220809231127707.png"></p><p>再来分析下代码的流程.</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220809233713673.png"></p><h2 id="面试问题-3"><a href="#面试问题-3" class="headerlink" title="面试问题"></a>面试问题</h2><blockquote><p>问：<code>public interface Cloneable &#123;......&#125;;</code>,为什么这个接口是空接口？</p><p>答：1.空接口也把它叫做标记接口（只要一个类实现了这个接口，那么就标记这个类是可以进行克隆的）.2.想要clone(克隆)，需要重写clone(克隆)方法,这个克隆方法是Object的,（clone方法是在Object这个类中的）</p></blockquote><h2 id="字符串类型String"><a href="#字符串类型String" class="headerlink" title="字符串类型String"></a>字符串类型String</h2><p>c语言中是没有字符串类型的.区分char和String.这两个不是一种类型</p><p>java是有字符串类型的String</p><h3 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//第一种，直接赋值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">        <span class="comment">//第二种，和第一种的效果是一样的.</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line">        <span class="comment">//第三种,创建字符数组，将数组作为参数传入</span></span><br><span class="line">        <span class="type">char</span>[] arr = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>&#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(arr);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串常量池String-constant-pool"><a href="#字符串常量池String-constant-pool" class="headerlink" title="字符串常量池String constant pool"></a>字符串常量池String constant pool</h3><p>java中并没有明确说明有字符串常量池.</p><p>但是在字符创源文件中提到过String constant pool</p><p>所以就暂时用字符串常量池这个概念.</p><ul><li>（源文件中写的是，一个池，用来装字符串.一个独一无二的字符串池子）</li></ul><p>字符串常量池在<strong>堆</strong>上</p><p>例1：先来看一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    Public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">        System.out.println(str1==str2);<span class="comment">//输出false</span></span><br><span class="line">        System.out.println(str1==str3);<span class="comment">//输出true</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面进行分析：</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220810154953720.png"></p><hr><p>例2：在看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    Public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>+<span class="string">&quot;cd&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ab&quot;</span>)+<span class="string">&quot;cd&quot;</span>;</span><br><span class="line">        System.out.println(str1==str2);<span class="comment">//输出true</span></span><br><span class="line">        System.out.println(str2==str3);<span class="comment">//输出flase</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析代码：</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220810165329109.png"></p><hr><p>例3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    Public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> str1;</span><br><span class="line">        str2 = <span class="string">&quot;dcba&quot;</span>;</span><br><span class="line">        System.out.println(str1);<span class="comment">//这样操作会改变str1的值吗？</span></span><br><span class="line">        <span class="comment">//答：不会.</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析代码：</p><p>当执行<code>str2 = str1;</code>的时候.str2和str1都指向常量池中的“abcd”.</p><p>当执行<code>str2 = &quot;dcba&quot;</code>时，程序会先在常量池找“dcba”,没找到就会在常量池创建“dcba”,然后将“dcba”的地址返回给str2</p><p>所以结果是不会改变.</p><hr><p>例4：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    Public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">     <span class="type">char</span>[] val = &#123;<span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        func(str1,val);</span><br><span class="line">        System.out.println(str1);<span class="comment">//结果是：abcd</span></span><br><span class="line">        System.out.println(Array.toString(val));<span class="comment">//结果是b</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">(String str,<span class="type">char</span>[] arr)</span>&#123;</span><br><span class="line">        str = <span class="string">&quot;dcba&quot;</span>;</span><br><span class="line">       arr[<span class="number">0</span>] = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析代码：</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220810210515423.png"></p><hr><h3 id="字符串比较equals"><a href="#字符串比较equals" class="headerlink" title="字符串比较equals"></a>字符串比较equals</h3><p>字符串和字符串比较，使用等于好比较，比较的是引用.</p><p>使用equals比较，比较的是字符串的内容.</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220810215449282.png"></p><hr><p>在Object类中有equals方法.</p><p>但是Object类中的equals方法，比较的是引用相不相等.和等于号比较的一样。</p><p>所以，在String这个类中，他重写了equals方法.</p><h4 id="equals使用"><a href="#equals使用" class="headerlink" title="equals使用"></a>equals使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    Public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line">        System.out.println(str1.equals(str2));<span class="comment">//输出true</span></span><br><span class="line">        System.out.println(str2.equals(str3));<span class="comment">//输出true</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>equals使用的注意点：</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220810222123553.png"></p><h3 id="手动入池interen"><a href="#手动入池interen" class="headerlink" title="手动入池interen()"></a>手动入池interen()</h3><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    Public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abcd&quot;</span>).intern();</span><br><span class="line">        System.out.println(str1==str2));<span class="comment">//输出true</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：<code>intern();</code>会在当前常量池寻找输入的字符串是否存在，如果存在，就把常量池中字符串的地址赋值给当前引用类型变量，当前引用类型变量是str2.</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220810231301186.png"></p><ul><li>用Scanner来输入字符串的时候就不会这样.因为Scanner不会先在字符串常量池创建内容.</li></ul><h3 id="理解字符串不可变"><a href="#理解字符串不可变" class="headerlink" title="理解字符串不可变"></a>理解字符串不可变</h3><p>如果有一个字符数组：<code>char[] arr = &#123;&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;,&#39;h&#39;&#125;;</code></p><p>你想增加，或者减少，或者改变里的内容，改完后，他只会在堆上留一份.</p><hr><p>而字符串类型不一样.</p><p>假设有这样的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNull</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        str1 = str1+<span class="string">&quot;def&quot;</span>;</span><br><span class="line">        str1 = str1+<span class="string">&quot;gh&quot;</span>;</span><br><span class="line">        System.out.println(str1);<span class="comment">//abcdefgh</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样拼接字符串，每次拼接都会在字符串常量池中留下临时变量.</p><p>大概表现为这样：</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220812183542433.png"></p><p>这就是字符串不可变，修改字符串不会改变之前的，而是创建一个全新的字符串.</p><h3 id="修改字符串"><a href="#修改字符串" class="headerlink" title="修改字符串"></a>修改字符串</h3><p>假设有个字符串<code>String str = &quot;Hello&quot;;</code></p><p>现在我要把他修改成hello，那怎么修改呢？</p><p>1.直接<code>str = &quot;hello&quot;;</code>,这种就是直接修改，str里存的地址是会变的.</p><p>2.<code>str = &quot;h&quot;+str.substring(1)</code>这种修改方式，原理是从str的1号下标位置开始把字符串提取出来，在把h拼接上去.所以str中存的地址也是会变的</p><p>大概表现为：</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220812191258797.png"></p><p>以上两种方法都不是修改字符串本身，而是创建了新的字符串，再把新字符串的地址返回去而已.</p><p>那我就是要在原来的字符串上改，能不能做到呢？</p><p>能，利用反射</p><h4 id="利用反射修改字符串的值"><a href="#利用反射修改字符串的值" class="headerlink" title="利用反射修改字符串的值"></a>利用反射修改字符串的值</h4><p><code>class Test &#123;private int a;&#125;</code></p><p>有个类，里面个私有的成员属性a.</p><p>之前的学习可以知道，除非提供set和get方法，不然无法在类外访问和使用这个变量</p><p>但是利用反射可以做到在类外使用这个变量.</p><blockquote><p>利用反射可以在类外对一个类的私有属性（private）做任何事.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNull</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">            <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        <span class="comment">//1.拿到String的class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> String.class;</span><br><span class="line">        <span class="comment">//2.拿到对象后调用对象中的getDeclaredField()方法</span></span><br><span class="line">        <span class="comment">//cl.getDeclaredField();</span></span><br><span class="line">        <span class="comment">//3.因为String拿到字符串以后是放到value数组中的，所以要拿到value</span></span><br><span class="line">        <span class="comment">//cl.getDeclaredField(&quot;value&quot;);</span></span><br><span class="line">        <span class="comment">//4.getDeclaredField()方法的返回值是Field,要用Field接收</span></span><br><span class="line">        <span class="comment">//Field field = cl.getDeclaredField(&quot;value&quot;);</span></span><br><span class="line">        <span class="comment">//5.调用getDeclaredField()会抛出异常，所以要在主函数后面声明异常</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> cl.getDeclaredField(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="comment">//6.拿到field后，想修改私有属性要把Accessible修改为true</span></span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//7.通过field中的get()方法获得字符串str,get()也会抛出异常，需要声明异常.</span></span><br><span class="line">        <span class="comment">//field.get(str);</span></span><br><span class="line">        <span class="comment">//8.把get()的结果放到一个char类型的数组里</span></span><br><span class="line">        <span class="comment">//char[] arr = field.get(str);</span></span><br><span class="line">        <span class="comment">//9.get()的返回值是Field类型，所以需要强转</span></span><br><span class="line">        <span class="type">char</span>[] arr = (<span class="type">char</span>[])field.get(str);</span><br><span class="line">        <span class="comment">//此时arr数组就拿到了字符串了.</span></span><br><span class="line">        <span class="comment">//10.通过数组修改字符串</span></span><br><span class="line">        arr[<span class="number">0</span>] = <span class="string">&#x27;h&#x27;</span>;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="comment">//这么修改的str，地址是不会变得.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要知道怎么用，不需要去了解底层原理.</p><blockquote><p>反射的作用是可以在类外访问和操作某个类中私有的属性和方法.</p><p>修改字符串只是其中的一种功能.</p><p>反射有利有弊</p><ul><li>用的好，他非常的灵活，可以做很多事情</li><li>用不好，非常的危险.</li></ul></blockquote><h3 id="字符、字节与字符串"><a href="#字符、字节与字符串" class="headerlink" title="字符、字节与字符串"></a>字符、字节与字符串</h3><h4 id="字符数组转字符串"><a href="#字符数组转字符串" class="headerlink" title="字符数组转字符串"></a>字符数组转字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//字符数组转字符串</span></span><br><span class="line">        <span class="type">char</span>[] arr = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>&#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(arr);</span><br><span class="line">        System.out.println(str1);</span><br><span class="line">        <span class="comment">//也可以</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> String.copyValueOf(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串转字符"><a href="#字符串转字符" class="headerlink" title="字符串转字符"></a>字符串转字符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> str2.charAt(<span class="number">3</span>);</span><br><span class="line">System.out.println(ch);</span><br></pre></td></tr></table></figure><h4 id="字符串转字符数组"><a href="#字符串转字符数组" class="headerlink" title="字符串转字符数组"></a>字符串转字符数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>[] arr2 = str2.toCharArray();</span><br><span class="line">System.out.println(arr2);</span><br></pre></td></tr></table></figure><h4 id="判断一个字符串是否由字符1-9构成"><a href="#判断一个字符串是否由字符1-9构成" class="headerlink" title="判断一个字符串是否由字符1-9构成"></a>判断一个字符串是否由字符1-9构成</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//判断字符串是不是由纯数字字符构成</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;1234a56789&quot;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> func(str3);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">func</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="comment">//判断字符串是不是由1-9的纯字符数字构成</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;str.length();i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> str.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(ch&lt;<span class="string">&#x27;1&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字节数组转字符串"><a href="#字节数组转字符串" class="headerlink" title="字节数组转字符串"></a>字节数组转字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] by1 = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(by1);</span><br><span class="line">System.out.println(str4);</span><br></pre></td></tr></table></figure><h4 id="字符串转字节数组"><a href="#字符串转字节数组" class="headerlink" title="字符串转字节数组"></a>字符串转字节数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str5</span> <span class="operator">=</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line"><span class="type">byte</span>[] by2 = str5.getBytes();</span><br><span class="line">System.out.println(Arrays.toString(by2));</span><br></pre></td></tr></table></figure><h4 id="字节转字符"><a href="#字节转字符" class="headerlink" title="字节转字符"></a>字节转字符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">ch2</span> <span class="operator">=</span> <span class="number">97</span>;</span><br><span class="line">System.out.println(ch2);</span><br></pre></td></tr></table></figure><h4 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;ABCD&quot;</span>;</span><br><span class="line">System.out.println(str1.equals(str2));</span><br></pre></td></tr></table></figure><blockquote><p>equals左边的不能为null</p></blockquote><h4 id="字符串比较（忽略大小写）"><a href="#字符串比较（忽略大小写）" class="headerlink" title="字符串比较（忽略大小写）"></a>字符串比较（忽略大小写）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;ABCD&quot;</span>;</span><br><span class="line">System.out.println(str1.equalsIgnoreCase(str2));</span><br></pre></td></tr></table></figure><h4 id="字符串大小比较"><a href="#字符串大小比较" class="headerlink" title="字符串大小比较"></a>字符串大小比较</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;bcd&quot;</span>;</span><br><span class="line">System.out.println(str1.compareTo(str2));</span><br></pre></td></tr></table></figure><blockquote><p>比较的时候是一个将字符串拆成字符，然后一个字符一个字符比较ASCLL码值.</p><p>返回第一组不同大小的字符的差值（左边的参数减去右边的参数）</p></blockquote><h4 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abababcabcdefgh&quot;</span>;</span><br><span class="line">str1.replace(<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">System.out.println(str1.replace(<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;f&#x27;</span>));</span><br><span class="line">System.out.println(str1.replace(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;fff&quot;</span>));</span><br><span class="line">System.out.println(str1.replace(<span class="string">&quot;c&quot;</span>,<span class="string">&quot;f&quot;</span>));</span><br><span class="line">System.out.println(str1.replace(<span class="string">&quot;c&quot;</span>,<span class="string">&quot;fff&quot;</span>));</span><br></pre></td></tr></table></figure><blockquote><p>替换的是所有出现对应字符或对应字符串的位置的内容.</p><p>使用<code>replaceFirst()</code>替换的是第一次出现的位置.</p></blockquote><h4 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str1.substring(参数<span class="number">1</span>,参数<span class="number">2</span>);</span><br></pre></td></tr></table></figure><blockquote><p>参数是要截取的字符的位置.范围是左闭右开[ 参数1，参数2 )</p></blockquote><h4 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;ajkabcjhd&quot;</span>;</span><br><span class="line">str1.contains(<span class="string">&quot;abc&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>查找字符串中是否存在对应的子串.返回值是boolean类型</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str1.indexOf(<span class="string">&quot;abc&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>查找字符串是否存在对应的子串，返回子串的地址.查不到返回-1</p></blockquote><h4 id="字符串拆分"><a href="#字符串拆分" class="headerlink" title="字符串拆分"></a>字符串拆分</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abc 123 def&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;abc/123/def&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;abc_123_def&quot;</span>;</span><br><span class="line">str1.split(<span class="string">&quot;空格或者/或者_&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abcabcabc&quot;</span>;</span><br><span class="line">String[] str2 = str1.split(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(String s : str2) &#123;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>根据输入的内容对字符串进行分割</p><p>注：如果有写特殊字符有别的意思，需要配合转义字符（\）使用</p><p>返回值是String[]类型</p><p>用来拆分的关键字，会被删除.</p><p>什么都不写就是全部拆分.</p><p>传2个参数可以设置分割成几部分.</p></blockquote><p>如果分割条件有两个可以用|来表示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abc-abc#abc&quot;</span>;</span><br><span class="line"><span class="comment">//我要用-和#来分割</span></span><br><span class="line">str1.split(<span class="string">&quot; |-|#&quot;</span>);</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;<strong>这样分割需要在分割条件第一个位置加空格</strong>&#x3D;&#x3D;</p><p>没有为什么就是要加</p><h3 id="StringBuilder和StringBuffer"><a href="#StringBuilder和StringBuffer" class="headerlink" title="StringBuilder和StringBuffer"></a>StringBuilder和StringBuffer</h3><h4 id="StringBuilder和StringBuffer的区别"><a href="#StringBuilder和StringBuffer的区别" class="headerlink" title="StringBuilder和StringBuffer的区别"></a>StringBuilder和StringBuffer的区别</h4><p>首先,两者的功能是一样的.</p><p>但是buffer线程安全，Builder线程不安全</p><p>Builder效率更高</p><p>Buffer适合多线程，Builder适合单线程.</p><h4 id="StringBuilder和StringBuffer的使用"><a href="#StringBuilder和StringBuffer的使用" class="headerlink" title="StringBuilder和StringBuffer的使用"></a>StringBuilder和StringBuffer的使用</h4><p>在之前的学习，知道字符串在拼接的时候，是会留下临时变量的.</p><p>只要使用StringBuilder或StringBuffer就不会留下临时变量拼接</p><p>因为两者功能是一样的.所以随便选一个来用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="comment">//不会留下临时变量的拼接</span></span><br><span class="line">        sb.append(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;def&quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;!!!&quot;</span>);</span><br><span class="line">        <span class="comment">//StringBuffer的逆置</span></span><br><span class="line">        sb.reverse();</span><br><span class="line">        <span class="comment">//拼接完成后要这么赋值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">        System.out.println(str1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图书管理系统"><a href="#图书管理系统" class="headerlink" title="图书管理系统"></a>图书管理系统</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220811132033894.png"></p><hr><p>1.对于书，可以将它做成一个类.</p><ul><li>书名（name）</li><li>作者（author）</li><li>价格（price）</li><li>类型（type）</li><li>状态（state）.书籍是否被借出</li></ul><p>2.用户</p><ul><li>姓名（name）</li></ul><hr><p>设计数据库：正常制作项目，这里是要使用数据库对数据进行操作.但是没学到。所以暂时不用.</p><hr><p>因为有很多的书，所以可以用一个book类型的数组存放所有的书.并记录下书的数量.</p><p>这个操作可以看成一个顺序表.顺序表的底层就是一个数组.</p><p>设计一个类booklist来存放这些书</p><hr><p>从大的分类上讲：</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220811134744019.png"></p><hr><p>以上分析完后，可以开始写代码了.</p><h3 id="搭建基本框架"><a href="#搭建基本框架" class="headerlink" title="搭建基本框架"></a>搭建基本框架</h3><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220811135300302.png"></p><h4 id="书（包）"><a href="#书（包）" class="headerlink" title="书（包）"></a>书（包）</h4><h5 id="书（类）"><a href="#书（类）" class="headerlink" title="书（类）"></a>书（类）</h5><p>在书这个类中，定义一些基本的成员.比如书名啊，作者啊，价格之类的.并将这些属性设置为私有的（private）.</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220811152318153.png"></p><p>然后给这些成员属性提供set和get方法.</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220811152337472.png"></p><p>为了方便打印，在重写一个toString方法</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220811152458736.png"></p><p>因为后续会添加数据，所以在提供一个构造方法</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220811152547238.png"></p><p>Book(类就基本完成了)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="comment">/*将这个类的属性都设置成私有的，然后提供get和set方法*/</span></span><br><span class="line">    <span class="comment">//书名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//作者</span></span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="comment">//价格(偷懒用的整形，可以用浮点数)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> price;</span><br><span class="line">    <span class="comment">//类型</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="comment">//状态,借出true,未借出false</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> state;</span><br><span class="line">    <span class="comment">//为了添加数据，所以要提供构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String name,String author,<span class="type">int</span> price,String type)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">        <span class="comment">/*因为你在添加书的时候，书肯定是没借出去的.所以添加书时，state默认是未借出false</span></span><br><span class="line"><span class="comment">        this.state = state;*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*提供get和set方法*/</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAuthor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAuthor</span><span class="params">(String author)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">int</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setType</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(<span class="type">boolean</span> state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印书的内容，提供toString方法.</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;book&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, author=&#x27;&quot;</span> + author + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&quot;, type=&#x27;&quot;</span> + type + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, state=&quot;</span> + state +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="BookList-类"><a href="#BookList-类" class="headerlink" title="BookList(类)"></a>BookList(类)</h5><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220811152817770.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book;</span><br><span class="line"><span class="comment">//相当于顺序表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookList</span> &#123;</span><br><span class="line">    <span class="comment">//创建用来装book的数组.还没学动态数组，所以直接指定数组有100个.</span></span><br><span class="line">    <span class="keyword">private</span> Book[] books = <span class="keyword">new</span> <span class="title class_">Book</span>[<span class="number">100</span>];</span><br><span class="line">    <span class="comment">//用来计数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">usedSize</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//因为还没学数据库，所以这里手动给了几个数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//books添加数据需要在Book类中添加构造方法.</span></span><br><span class="line">        books[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;三国演义&quot;</span>,<span class="string">&quot;罗贯中&quot;</span>,<span class="number">100</span>,<span class="string">&quot;小说&quot;</span>);</span><br><span class="line">        books[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;水浒传&quot;</span>,<span class="string">&quot;施耐庵&quot;</span>,<span class="number">100</span>,<span class="string">&quot;小说&quot;</span>);</span><br><span class="line">        books[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;西游记&quot;</span>,<span class="string">&quot;吴承恩&quot;</span>,<span class="number">100</span>,<span class="string">&quot;小说&quot;</span>);</span><br><span class="line">        usedSize = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="操作operation（包）"><a href="#操作operation（包）" class="headerlink" title="操作operation（包）"></a>操作operation（包）</h3><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220811154528319.png"></p><h3 id="用户user-包"><a href="#用户user-包" class="headerlink" title="用户user(包)"></a>用户user(包)</h3><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220811163815492.png"></p><h4 id="用户User（类）"><a href="#用户User（类）" class="headerlink" title="用户User（类）"></a>用户User（类）</h4><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220811163615927.png"></p><h5 id="管理员Admin"><a href="#管理员Admin" class="headerlink" title="管理员Admin"></a>管理员Admin</h5><p>继承extends用户User(类),就可以调用User里的name.</p><h5 id="普通用户NormalUser"><a href="#普通用户NormalUser" class="headerlink" title="普通用户NormalUser"></a>普通用户NormalUser</h5><p>继承extends用户User(类),就可以调用User里的name</p><h3 id="主函数部分"><a href="#主函数部分" class="headerlink" title="主函数部分"></a>主函数部分</h3><p>先进行准备工作，new一个BookList,这一步是为了创建数据.</p><p>然后开始获取用户的名字和权限（普通用户还是adm），将它写在<code>login()</code>方法中</p><p>获取到对应的权限后，打印对应权限的菜单.</p><p>代码如下：</p><h6 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> book.BookList;</span><br><span class="line"><span class="keyword">import</span> user.Admin;</span><br><span class="line"><span class="keyword">import</span> user.NormalUser;</span><br><span class="line"><span class="keyword">import</span> user.User;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">//login方法实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> User <span class="title function_">login</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入您的名字&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请选择您的身份：1.管理员  2.普通用户&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">choice</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="keyword">if</span>(choice == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Admin</span>(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NormalUser</span>(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//主函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//准备工作，准备书籍</span></span><br><span class="line">        <span class="type">BookList</span> <span class="variable">booklist</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookList</span>();</span><br><span class="line">        <span class="comment">//2.输入名字和选择身份</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> login();</span><br><span class="line">        <span class="comment">//3.打印菜单</span></span><br><span class="line">        user.menu();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="User-类"><a href="#User-类" class="headerlink" title="User(类)"></a>User(类)</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">menu</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="NormalUser-类"><a href="#NormalUser-类" class="headerlink" title="NormalUser(类)"></a>NormalUser(类)</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NormalUser</span> <span class="keyword">extends</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NormalUser</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写User中的menu抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menu</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line">        System.out.println(name+<span class="string">&quot;(用户)&quot;</span>+<span class="string">&quot;欢迎使用图书管理系统&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;1.查找图书&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;2.借阅图书&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;3.归还图书&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;0.退出&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Admin-类"><a href="#Admin-类" class="headerlink" title="Admin(类)"></a>Admin(类)</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Admin</span> <span class="keyword">extends</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Admin</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写User中的menu抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menu</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line">        System.out.println(name+<span class="string">&quot;(管理员)&quot;</span>+<span class="string">&quot;欢迎使用图书管理系统&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;1.查找图书&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;2.新增图书&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;3.删除图书&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;4.显示所有图书&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;0.退出&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析一下代码"><a href="#分析一下代码" class="headerlink" title="分析一下代码"></a>分析一下代码</h4><p>一些基本的打印和从键盘获取字符串和整形就不说了.</p><p>主要是讲如何通过输入的整形判断出用户是管理员还是普通用户</p><p>都知道adm和普通用户（NormalUser）都继承了User</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220811175923080.png"></p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220811175938340.png"></p><p>那么我们就通过if语句俩new对象，1就new管理员，2就new普通用户.</p><p>顺便把名字也传进去.传入的过程中，因为有继承关系所以就是：主函数调用login方法 –》login根据获取到的数子–》将名字传入对应的对象中.</p><p>对象在调用构造方法，因为是继承（继承的话，子类要帮助父类先完成构造），所以name又被传到User中.</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220811181137574.png"></p><p>然后从login返回给user接收<img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220811180157658.png"></p><p>选择完毕后就要打印菜单了</p><p>但是注意了，在上面这么操作的过程中发生了向上转型.（ruturn的子类，用的是Use(父类进行接收)）</p><p>向上转型的效果是：不能调用子类的属性和方法，只能调用父类的属性和方法</p><p>那怎么办呢.这里就用到了多态的抽象方法</p><p>在User类中定义一个抽象（abstract）方法menu()</p><p>抽象方法的效果是：需要在子类中重写父类的抽象方法</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220811182214383.png"></p><p>然后，我需要选择这些选项中的某一项.</p><p>第一种方法：我在main中用scanner获取输入的数字，在调用对应的方法.</p><p>第二种方法：我可以直接在menu方法中获取用户输入的数字.通过return直接返回.在主函数中直接接收返回值就好了.</p><blockquote><p>在修改menu()时记得要修改void为int,也别忘了把User中的抽象方法也改成int.</p></blockquote><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220811184104521.png"></p><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><p>通过上面，知道是通过用户输入的数字来调用方法.具体怎么调用呢？</p><p>首先知道在operation包中有多个类.</p><p>仔细看会发现，这多个类中都是只有一个方法.且这多个类中的方法可以重名.我就统一都叫work方法</p><p>那就可以考虑用一个接口.这样就会方便很多.什么意思呢？看图：</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220811193955491.png"></p><p>开始操作，我先创建一个接口IOperation，在这个接口中有一个work方法.</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220811194709381.png"></p><p>再让operation中的类都实现一下这个接口.</p><p>这么做的好处是什么呢？</p><p>这样做了之后，就只需要通过接口就可以去调用对应类中的方法.</p><p>怎么说？看图：</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220811195102560.png"></p><p>那么实现了接口后怎么调用呢？</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220811195411370.png"></p><p>会发现new的对象不同，但是调用的时候都是用的iopertion进行调用.</p><p>那我们就可以用一种方法.就是IOperation[]</p><p>用数组装new的对象.通过下标访问.这样就方便了很多.</p><p>这个就和C语言中函数指针数组差不多.</p><hr><p>分析完了，开始写代码</p><p>首先要在User中创建IOperation数组</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220811211345878.png"></p><p>然后在普通用户和adm的构造方法中初始化数组</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220811211455904.png"></p><p>然后在User中写一个方法用数组下标来访问对应的方法.</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220811212849190.png"></p><p>work()中的参数bookList是主函数刚开始创建的用来操作的书的数组.</p><p>因为在选完用户后，是可以进行连续操作的，所以用while包起来</p><p><img src="/2022/07/17/java%E5%AD%A6%E4%B9%A0/image-20220811213502381.png"></p><p>那么到现在为止，就差不多了.</p><p>接下来只要将对应的方法全都实现.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h5 id="主函数-1"><a href="#主函数-1" class="headerlink" title="主函数"></a>主函数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> book.BookList;</span><br><span class="line"><span class="keyword">import</span> user.Admin;</span><br><span class="line"><span class="keyword">import</span> user.NormalUser;</span><br><span class="line"><span class="keyword">import</span> user.User;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">//login方法实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> User <span class="title function_">login</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入您的名字&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请选择您的身份：1.管理员  2.普通用户&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">choice</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="keyword">if</span>(choice == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Admin</span>(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NormalUser</span>(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//主函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.准备工作，准备书籍</span></span><br><span class="line">        <span class="type">BookList</span> <span class="variable">booklist</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookList</span>();</span><br><span class="line">        <span class="comment">//2.输入名字+选择身份+打印菜单</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> login();</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">//3.选择功能</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">choice</span> <span class="operator">=</span> user.menu();</span><br><span class="line">        <span class="comment">//4.调用方法</span></span><br><span class="line">        user.doOperation(booklist,choice);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="User类"><a href="#User类" class="headerlink" title="User类"></a>User类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operation.IOperation;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建一个IOperation类型的数组</span></span><br><span class="line">    IOperation[] operations;</span><br><span class="line">    <span class="comment">//抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">menu</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//调用对应的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doOperation</span><span class="params">(BookList bookList,<span class="type">int</span> choice)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.operations[choice].work(bookList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Admin类"><a href="#Admin类" class="headerlink" title="Admin类"></a>Admin类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> user;</span><br><span class="line"><span class="keyword">import</span> book.BookList;</span><br><span class="line"><span class="keyword">import</span> operation.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Admin</span> <span class="keyword">extends</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Admin</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.operations = <span class="keyword">new</span> <span class="title class_">IOperation</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Exit</span>(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Find</span>(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Add</span>(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Del</span>(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Display</span>()</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写User中的menu抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">menu</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line">        System.out.println(name+<span class="string">&quot;(管理员)&quot;</span>+<span class="string">&quot;欢迎使用图书管理系统&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;1.查找图书&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;2.新增图书&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;3.删除图书&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;4.显示所有图书&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;0.退出&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">return</span> scanner.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="NormalUser类"><a href="#NormalUser类" class="headerlink" title="NormalUser类"></a>NormalUser类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> user;</span><br><span class="line"><span class="keyword">import</span> operation.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NormalUser</span> <span class="keyword">extends</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NormalUser</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.operations = <span class="keyword">new</span> <span class="title class_">IOperation</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Exit</span>(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Find</span>(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Borrow</span>(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Return</span>(),</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写User中的menu抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">menu</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line">        System.out.println(name+<span class="string">&quot;(用户)&quot;</span>+<span class="string">&quot;欢迎使用图书管理系统&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;1.查找图书&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;2.借阅图书&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;3.归还图书&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;0.退出&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">return</span> scanner.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现operation中的方法"><a href="#实现operation中的方法" class="headerlink" title="实现operation中的方法"></a>实现operation中的方法</h3><p>先在book.BookList中添加get和set方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getUsedSize</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> usedSize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsedSize</span><span class="params">(<span class="type">int</span> usedSize)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.usedSize = usedSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">getBooks</span><span class="params">(<span class="type">int</span> pos)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.books[pos];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBooks</span><span class="params">(<span class="type">int</span> pos,Book book)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.books[pos] = book;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="add（增加书）"><a href="#add（增加书）" class="headerlink" title="add（增加书）"></a>add（增加书）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operation;</span><br><span class="line"><span class="keyword">import</span> book.BookList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> book.Book;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Add</span> <span class="keyword">implements</span> <span class="title class_">IOperation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">(BookList booklist)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始添加&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入书的名字：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入书的作者：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">author</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入书的价格：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">price</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入书的类型：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">        <span class="comment">//创建一本书</span></span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>(name,author,price,type);</span><br><span class="line">        <span class="comment">//获取现在有多少本书</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> booklist.getUsedSize();</span><br><span class="line">        <span class="comment">//用尾插法插入书</span></span><br><span class="line">        booklist.setBooks(size,book);</span><br><span class="line">        <span class="comment">//书的数量加1</span></span><br><span class="line">        booklist.setUsedSize(size+<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;新增成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Display-显示所有书"><a href="#Display-显示所有书" class="headerlink" title="Display(显示所有书)"></a>Display(显示所有书)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operation;</span><br><span class="line"><span class="keyword">import</span> book.Book;</span><br><span class="line"><span class="keyword">import</span> book.BookList;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Display</span> <span class="keyword">implements</span> <span class="title class_">IOperation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">(BookList booklist)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;booklist.getUsedSize();i++) &#123;</span><br><span class="line">            <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> booklist.getBooks(i);</span><br><span class="line">            System.out.println(book);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Find-查找书"><a href="#Find-查找书" class="headerlink" title="Find(查找书)"></a>Find(查找书)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operation;</span><br><span class="line"><span class="keyword">import</span> book.Book;</span><br><span class="line"><span class="keyword">import</span> book.BookList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找书</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Find</span> <span class="keyword">implements</span> <span class="title class_">IOperation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">(BookList booklist)</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入要查的书的名字：&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;booklist.getUsedSize();i++) &#123;</span><br><span class="line">            <span class="comment">//先找一遍数组，看看有没有这本书</span></span><br><span class="line">            <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> booklist.getBooks(i);</span><br><span class="line">            <span class="keyword">if</span>(book.getName().equals(name)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;找到了&quot;</span>);</span><br><span class="line">                System.out.println(book);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;找不到你要的书&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Borrow-借书"><a href="#Borrow-借书" class="headerlink" title="Borrow(借书)"></a>Borrow(借书)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operation;</span><br><span class="line"><span class="keyword">import</span> book.Book;</span><br><span class="line"><span class="keyword">import</span> book.BookList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">//借书</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Borrow</span> <span class="keyword">implements</span> <span class="title class_">IOperation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">(BookList booklist)</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入要借的书的名字：&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.next();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;booklist.getUsedSize();i++) &#123;</span><br><span class="line">            <span class="comment">//先找一遍数组，看看有没有这本书</span></span><br><span class="line">            <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> booklist.getBooks(i);</span><br><span class="line">            <span class="keyword">if</span>(book.getName().equals(name)) &#123;</span><br><span class="line">                <span class="comment">//找到了进来，在判断书是否已经被借出.</span></span><br><span class="line">                <span class="keyword">if</span>(!book.isState()) &#123;</span><br><span class="line">                    book.setState(<span class="literal">true</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;借阅成功&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;借阅失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Return-还书"><a href="#Return-还书" class="headerlink" title="Return(还书)"></a>Return(还书)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operation;</span><br><span class="line"><span class="keyword">import</span> book.Book;</span><br><span class="line"><span class="keyword">import</span> book.BookList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//归还书</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Return</span> <span class="keyword">implements</span> <span class="title class_">IOperation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">(BookList booklist)</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入要归还书的名字：&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;booklist.getUsedSize();i++) &#123;</span><br><span class="line">            <span class="comment">//先找一遍数组，看看有没有这本书</span></span><br><span class="line">            <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> booklist.getBooks(i);</span><br><span class="line">            <span class="keyword">if</span>(book.getName().equals(name)) &#123;</span><br><span class="line">                book.setState(<span class="literal">false</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;归还成功&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;找不到你要归的书&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Del（删除书）"><a href="#Del（删除书）" class="headerlink" title="Del（删除书）"></a>Del（删除书）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operation;</span><br><span class="line"><span class="keyword">import</span> book.Book;</span><br><span class="line"><span class="keyword">import</span> book.BookList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">//删除书</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Del</span> <span class="keyword">implements</span> <span class="title class_">IOperation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">(BookList booklist)</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入要删除书的名字：&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>( i = <span class="number">0</span>;i&lt;booklist.getUsedSize();i++) &#123;</span><br><span class="line">            <span class="comment">//先找一遍数组，看看有没有这本书</span></span><br><span class="line">            <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> booklist.getBooks(i);</span><br><span class="line">            <span class="keyword">if</span>(book.getName().equals(name)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断一下，是找到了才跳出循环还是走完了跳出的循环</span></span><br><span class="line">        <span class="keyword">if</span>(i==booklist.getUsedSize()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有这本书&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除书</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j&lt;booklist.getUsedSize()-<span class="number">1</span>;j++) &#123;</span><br><span class="line">            <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> booklist.getBooks(j+<span class="number">1</span>);</span><br><span class="line">            booklist.setBooks(j,book);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//书的数量减1</span></span><br><span class="line">        booklist.setUsedSize(booklist.getUsedSize()-<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Exit-退出程序"><a href="#Exit-退出程序" class="headerlink" title="Exit(退出程序)"></a>Exit(退出程序)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operation;</span><br><span class="line"><span class="keyword">import</span> book.BookList;</span><br><span class="line"><span class="comment">//退出</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exit</span> <span class="keyword">implements</span> <span class="title class_">IOperation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">(BookList booklist)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个程序目前还是不完善的，充满了bug和问题.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA下载、安装、破解.版本2022.1.3</title>
      <link href="/2022/07/17/IDEA%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E7%A0%B4%E8%A7%A3-%E7%89%88%E6%9C%AC2022-1-3/"/>
      <url>/2022/07/17/IDEA%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E7%A0%B4%E8%A7%A3-%E7%89%88%E6%9C%AC2022-1-3/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>IDEA就是java语言所使用的编译器.<br>图案就会是这个样子<br><img src="/2022/07/17/IDEA%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E7%A0%B4%E8%A7%A3-%E7%89%88%E6%9C%AC2022-1-3/2022-07-17-19-49-54.png"><br>现实中java开发最多用的就是IDEA<br>IDEA有以下几个版本：</p><blockquote><p>企业版也可以说是终极版（付费）：<br>功能齐全，没有比他更加厉害的版本了</p></blockquote><blockquote><p>社区版（免费）：<br>虽然免费，但是企业版可以破解，所以不建议下载这个</p></blockquote><blockquote><p>学生认证版（免费）：<br>和企业版几乎相同，但还是没有企业版能做的事多.且需要全日制大学生认证.（自考成人的不行）.因为企业版可以破解，所以也不建议了.</p></blockquote><h2 id="IDEA下载"><a href="#IDEA下载" class="headerlink" title="IDEA下载"></a>IDEA下载</h2><p><a href="https://www.jetbrains.com/">官网</a></p><p>官网有官方中文<br><img src="/2022/07/17/IDEA%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E7%A0%B4%E8%A7%A3-%E7%89%88%E6%9C%AC2022-1-3/2022-07-17-19-57-09.png"></p><p>然后看到开发者工具，点击选择您的工具<br><img src="/2022/07/17/IDEA%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E7%A0%B4%E8%A7%A3-%E7%89%88%E6%9C%AC2022-1-3/2022-07-17-20-00-03.png"></p><p>点击下载<br><img src="/2022/07/17/IDEA%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E7%A0%B4%E8%A7%A3-%E7%89%88%E6%9C%AC2022-1-3/2022-07-17-20-00-39.png"><br>出现如下界面，我为了方便截图进行了缩放，正常进入滚轮往下就可以看到学生认证版.<br><img src="/2022/07/17/IDEA%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E7%A0%B4%E8%A7%A3-%E7%89%88%E6%9C%AC2022-1-3/2022-07-17-20-02-30.png"></p><p>选择企业版的下载<br><strong>之后破解也是用官方正版的IDEA进行操作，所以这里可以直接去下载安装</strong><br>下载的路径可以自定义.保存路径可以自定义，文件夹不要有中文和空格</p><h2 id="IDEA安装"><a href="#IDEA安装" class="headerlink" title="IDEA安装"></a>IDEA安装</h2><p>和很多软件一样，下载下来的不是软件本体，而是一个安装程序.<br><img src="/2022/07/17/IDEA%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E7%A0%B4%E8%A7%A3-%E7%89%88%E6%9C%AC2022-1-3/2022-07-17-20-09-39.png"><br>双击运行</p><p>我安装的时候忘记截图了，直接用的百度找的图片<br><img src="/2022/07/17/IDEA%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E7%A0%B4%E8%A7%A3-%E7%89%88%E6%9C%AC2022-1-3/2022-07-17-20-10-39.png"></p><p>自定义软件安装位置，然后下一步<br><img src="/2022/07/17/IDEA%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E7%A0%B4%E8%A7%A3-%E7%89%88%E6%9C%AC2022-1-3/2022-07-17-20-11-22.png"></p><p><img src="/2022/07/17/IDEA%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E7%A0%B4%E8%A7%A3-%E7%89%88%E6%9C%AC2022-1-3/2022-07-17-20-15-44.png"><br>1.选择操作系统是32位的还是64位，可能因为版本老旧或者后续更新，这个地方有的只有一个选项，那就勾上.有2个的就根据自己的电脑勾<br>2.我刚开始学我也不理解是干嘛用的，“update contest menu”翻译为”更新关联菜单“、”Add Open Folder as Project“翻译为”将打开的文件夹添加为项目“.我打勾了.<br>3.我也不知道，我全勾了，百度的图有点老，我这里有4个选项。“create asssociations”翻译为“创建关联”<br>4.自动帮你配置环境变量（配置了点开软件就可以运行，不配可能要自己配）勾上.<br>5.有的人下面还有一个选项，“将打开的文件夹添加为项目”翻译为“下载并安装32位Jetbrains运行时”不用勾.</p><p>选择主目录（默认即可），点击下一步<br><img src="/2022/07/17/IDEA%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E7%A0%B4%E8%A7%A3-%E7%89%88%E6%9C%AC2022-1-3/2022-07-17-20-26-30.png"></p><p>等待安装完成跳出如下界面<br><img src="/2022/07/17/IDEA%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E7%A0%B4%E8%A7%A3-%E7%89%88%E6%9C%AC2022-1-3/2022-07-17-20-27-17.png"><br>这是让你重启一下电脑，我的建议是先别重启，因为重启过后可能会导致有什么东西不一样.导致后面破解出问题.</p><blockquote><p><strong>下载安装好了后先别运行！别运行</strong></p></blockquote><h2 id="IDEA破解"><a href="#IDEA破解" class="headerlink" title="IDEA破解"></a>IDEA破解</h2><p>此时IDEA已经安装好了.<br>这是我参考的IDEA破解教程的原文档.<a href="https://shimo.im/docs/m8AZVpvpDGf8OyAb/read">文档</a></p><blockquote><p>有的博客和教程里也对破解的原理做出了解释.<br><strong>解释：原理是暴力拦截了 IDEA 的剩余使用期网络请求，实际上等于永久激活</strong><br>但是我的水平无法辨别到底是怎么实现的，就当他是这么回事吧.</p></blockquote><p>破解操作的流程大概是这样的<br>1.下载自动工具和一些文件<br>2.运行自动工具<br>3.运行软件，输入激活码和代理链接</p><blockquote><p>如果之前有安装其他版本的IDEA要把之前的版本删除干净<br>不过你看我这个教程，那之前应该也没有安装过吧<br>如果安装过了，删除教程自己去找吧，我就不写了，因为我懒的删了在装.</p></blockquote><h3 id="下载自动工具和一些文件"><a href="#下载自动工具和一些文件" class="headerlink" title="下载自动工具和一些文件."></a>下载自动工具和一些文件.</h3><p>我b站看的视频，然后加的视频里的微信好友，然后发我的百度网盘的下载链接.<br><a href="https://www.bilibili.com/video/BV16r4y1j7tZ?spm_id_from=333.337.search-card.all.click&vd_source=f3a2cb06bcdb3837b1c502c4ca2680be">b站视频链接</a>：<a href="https://www.bilibili.com/video/BV16r4y1j7tZ?spm_id_from=333.337.search-card.all.click&amp;vd_source=f3a2cb06bcdb3837b1c502c4ca2680be">https://www.bilibili.com/video/BV16r4y1j7tZ?spm_id_from=333.337.search-card.all.click&amp;vd_source=f3a2cb06bcdb3837b1c502c4ca2680be</a></p><p>加的微信好友好像是，注意是好像是，北京尚学堂的老师，因为在微信名字旁边有黄色的字写的是北京尚学堂.（我不确定真假，注意辨别）</p><p>不想通过视频的我这里也直接把度盘链接和提取码写下了<br>链接：<a href="https://pan.baidu.com/s/1UpMF2jijt-kpeaIesoECiQ">https://pan.baidu.com/s/1UpMF2jijt-kpeaIesoECiQ</a> 提取码：5m8i</p><blockquote><p>因为下的是自动工具，也就是写好的脚本.所以可能会有那方面的问题，对吧。注入辨别，反正我已经用了.</p></blockquote><p>下载好并解压后是这些文件<br><img src="/2022/07/17/IDEA%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E7%A0%B4%E8%A7%A3-%E7%89%88%E6%9C%AC2022-1-3/2022-07-17-20-50-34.png"></p><blockquote><p>下载下来的文件放在哪里可以自己决定，但是文件名不能有中文和空格<br>注意：运行完自动脚本后，这些文件是不可以删出的，不然破解就失效了</p></blockquote><h3 id="运行自动工具"><a href="#运行自动工具" class="headerlink" title="运行自动工具"></a>运行自动工具</h3><p>在刚才的文件里打开这个文件夹<br><img src="/2022/07/17/IDEA%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E7%A0%B4%E8%A7%A3-%E7%89%88%E6%9C%AC2022-1-3/2022-07-17-20-51-30.png"></p><p>然后双击这个文件运行<br><img src="/2022/07/17/IDEA%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E7%A0%B4%E8%A7%A3-%E7%89%88%E6%9C%AC2022-1-3/2022-07-17-20-52-05.png"><br>点开了会出现一个英文的对话框，翻译过来就是：“执行文件需要一段时间，你确定要等吗”<br><img src="/2022/07/17/IDEA%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E7%A0%B4%E8%A7%A3-%E7%89%88%E6%9C%AC2022-1-3/2022-07-17-20-55-32.png"></p><blockquote><p>有的人看到出现看不懂的英文对话框就不敢点了，怕是病毒.不用怕.<br>因为你看到这个对话框程序就已经运行了.所以就算是病毒你关掉这个对话框也没意义</p></blockquote><p>然后等待程序自动运行完成，还会弹一个对话框<br><img src="/2022/07/17/IDEA%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E7%A0%B4%E8%A7%A3-%E7%89%88%E6%9C%AC2022-1-3/2022-07-17-20-55-47.png"><br>点击确定就修改完成了.</p><blockquote><p>注：在程序运行的时候，你的杀毒软件可能会报病毒说他在修改注册表.<br>这是正常的，这种编程软件都是会涉及到注册表的.就像MySQL删除一样也是涉及到删注册表，学到以后就知道了<br>但是要看清楚了，杀毒软件报错会显示修改的程序在哪个文件夹里，和被修改的文件在哪里。<br>正常显示的是你自动工具安装的位置里有一个程序在修改IDEA安装位置里的注册表.</p></blockquote><h3 id="运行软件、输入激活码和代理链接"><a href="#运行软件、输入激活码和代理链接" class="headerlink" title="运行软件、输入激活码和代理链接"></a>运行软件、输入激活码和代理链接</h3><p>然后就可以运行程序了<br>回到刚才IDEA下完的时候，他不是让你重启电脑吗，你不用重启电脑<br>直接打开软件运行<br>然后软件会弹出对话框<br>看着图操作就行<a href="http://blog.idejihuo.com/wp-content/uploads/2022/04/jetbrains-license-servers.txt">我是代理链接</a><br><img src="/2022/07/17/IDEA%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E7%A0%B4%E8%A7%A3-%E7%89%88%E6%9C%AC2022-1-3/2022-07-17-21-09-13.png"><br>代理链接随便挑一个填就好了</p><p>然后是激活码<a href="http://jets.idejihuo.com/">我是激活码</a><br><img src="/2022/07/17/IDEA%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E7%A0%B4%E8%A7%A3-%E7%89%88%E6%9C%AC2022-1-3/2022-07-17-21-12-00.png"></p><p>接下来没报错就是成功了.</p><blockquote><p>到这里IDEA就弄好了，至于接下了会不会要配置JDK啊，怎么编程啊，都在java学习继续.</p></blockquote><blockquote><p>注：IDEA自己本体是没有中文的，但是可以去搞中文补丁，网上也有教程.但是！在学编程或者计算机这块中文还是能不用就别用.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言代码题练习</title>
      <link href="/2022/07/05/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%A2%98%E7%BB%83%E4%B9%A0/"/>
      <url>/2022/07/05/C%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E9%A2%98%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="练习1："><a href="#练习1：" class="headerlink" title="练习1："></a>练习1：</h1>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不是内部或者外部命令，也不是可运行的程序或批处理文件</title>
      <link href="/2022/06/18/%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E8%80%85%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4%EF%BC%8C%E4%B9%9F%E4%B8%8D%E6%98%AF%E5%8F%AF%E8%BF%90%E8%A1%8C%E7%9A%84%E7%A8%8B%E5%BA%8F%E6%88%96%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6/"/>
      <url>/2022/06/18/%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E8%80%85%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4%EF%BC%8C%E4%B9%9F%E4%B8%8D%E6%98%AF%E5%8F%AF%E8%BF%90%E8%A1%8C%E7%9A%84%E7%A8%8B%E5%BA%8F%E6%88%96%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在下载完某些软件或者程序，想要看看是否成功安装，在输入完<code>软件名 -version</code>后提示不是内部或者外部命令，也不是可运行的程序或批处理文件</p><h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h2><p>你下载的程序不会自动让操作系统知道他在哪里.或者说不会自动配置运行所需的一切</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>手动配置环境变量<br><img src="/2022/06/18/%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E8%80%85%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4%EF%BC%8C%E4%B9%9F%E4%B8%8D%E6%98%AF%E5%8F%AF%E8%BF%90%E8%A1%8C%E7%9A%84%E7%A8%8B%E5%BA%8F%E6%88%96%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6/2022-06-18-12-40-11.png"><br><img src="/2022/06/18/%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E8%80%85%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4%EF%BC%8C%E4%B9%9F%E4%B8%8D%E6%98%AF%E5%8F%AF%E8%BF%90%E8%A1%8C%E7%9A%84%E7%A8%8B%E5%BA%8F%E6%88%96%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6/2022-06-18-12-40-41.png"><br><img src="/2022/06/18/%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E8%80%85%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4%EF%BC%8C%E4%B9%9F%E4%B8%8D%E6%98%AF%E5%8F%AF%E8%BF%90%E8%A1%8C%E7%9A%84%E7%A8%8B%E5%BA%8F%E6%88%96%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6/2022-06-18-12-43-47.png"></p><blockquote><p>最后在去运行<code>-version</code>就有了</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>运行一些需要输入命令的软件.这些命令会保存在bin目录下。<br>环境变量就是告诉操作系统bin在哪里.<br>软件只看的懂bin目录下的命令<br>计算机要操作软件就要告诉计算机bin目录在哪里</p>]]></content>
      
      
      <categories>
          
          <category> 疑难解答 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习</title>
      <link href="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MySQL的重要性<br>MySQL好多公司都要求会用.<br>学习视频使用MySQL8.0.26版本进行讲解，搭配使用MySQL5.7版本讲解<br>刚开始使用windows讲解操作，之后使用linux进行操作</p><blockquote><p>学习过程分为上篇和篇<br>上篇使用windows操作系统进行讲解. （1~95节）<br>上篇的重点是学会sql这门语言，重中之重就是关于查询的使用.<br>还要学习DDL、DML、DCL、语句的学习<br>还会讲MySQL8.0的新特征<br>1.数据库概述与MySQL安装篇<br>2.sql之select使用篇（主要是查询的使用：子查询、多表查询）<br>3.DLL、DML、DCL、使用篇（如何创建表、如何创建数据库、修改表、删除表、删除库 ），下篇会讲数据的恢复、备份、迁移<br>4其他数据库对象篇（不是很重要，根据公司的需要进行学习）<br>5.MySQL8.0的新特性</p></blockquote><blockquote><p>下篇会使用linux进行操作讲解（96-199节）<br>1.MySQL架构篇，谈谈MySQL的底层架构这方面<br>2.索引及调优篇，是面试中的重点，也是实际开发的重点.<br>3.事务篇<br>4.日志与备份篇</p></blockquote><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p>企业里用MySQL5.7最多，学8.0没关系吗？<br>在学习的时候会使用MySQL8.0和MySQL5.7进行对比讲解.</p><h2 id="为什么使用数据库及数据库的概念"><a href="#为什么使用数据库及数据库的概念" class="headerlink" title="为什么使用数据库及数据库的概念"></a>为什么使用数据库及数据库的概念</h2><h3 id="为什么要使用数据库"><a href="#为什么要使用数据库" class="headerlink" title="为什么要使用数据库"></a>为什么要使用数据库</h3><p>1.持久化，把数据保存到可掉电式存储设备中以供之后使用，大多数情况下，特别是企业级应用，数据持久化意味着将内存中数据保存到硬盘上加以固化，而持久化的实现过程大多同过关系数据库来完成.（掉电就不能使用的比如说：内存）</p><p>2.持久化的主要作用是将内存中的数据存储在关系型数据库中，当然也可以存储在磁盘文件，XNL数据文件中</p><p>3.如果非常复杂或者很大的数据保存在文件中，那当要找到其中某一条数据的时候会非常麻烦.但是如果放到数据库中我们就有各种手段去优化去便利数据的查找.</p><p>4.比如说有的数据可以放到文件中，但是读取的时候需要用程序来读取，那单纯打开文件就不行了.</p><p>5.当数据具有复杂的多样性，那单纯的用文件来储存就不好了.数据库不管是从数据的条目数上来讲还是存储数据的丰富度来讲，他都要好于其他的一些介质.</p><h3 id="数据库与数据库管理系统"><a href="#数据库与数据库管理系统" class="headerlink" title="数据库与数据库管理系统"></a>数据库与数据库管理系统</h3><h4 id="数据库的相关概念"><a href="#数据库的相关概念" class="headerlink" title="数据库的相关概念"></a>数据库的相关概念</h4><blockquote><p>DB:数据库（Database）<br>即存储数据的仓库，其本质是一个文件系统。它保存了一系列有组织的数据</p></blockquote><blockquote><p>DBMS:数据库管理系统（Database Management System）<br>是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控制。用户通过数据库管理系统访问数据库中表内的数据</p></blockquote><blockquote><p>SQL:结构化查询语言（Structured Query Language）<br>专门用来和数据库通信的语言</p></blockquote><h4 id="数据库与数据库管理系统的概念"><a href="#数据库与数据库管理系统的概念" class="headerlink" title="数据库与数据库管理系统的概念"></a>数据库与数据库管理系统的概念</h4><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-17-19-10-52.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-17-19-16-08.png"></p><h3 id="常见的DBMS（数据库管理系统）对比"><a href="#常见的DBMS（数据库管理系统）对比" class="headerlink" title="常见的DBMS（数据库管理系统）对比"></a>常见的DBMS（数据库管理系统）对比</h3><p>1.Oracle（老大）：也叫甲骨文，收费的，功能多，安全高，服务好.商用关系型数据库管理系统（RDBMS）<br>2.MySQL：开源免费.Oracle本来想直接收购MySQL但是没成功，后来SUN收购了MySQL，oracle收购了SUN.</p><blockquote><p>java的发明者SUN公司，后被oracle收购.</p></blockquote><p>3.microsoft SQL Server(微软的):既然是微软开发的，和微软自家的产品很适配.与WinNT完全集成，与Microsoft Backofficec产品很好的集成<br>4.DB2：IBM公司的数据库产品，收费，长应用在银行系统中<br>5.PostgresSQL:稳定性强、最符合SQL标准，开放源码、具备商业级DBMS质量，PG对数据量大的文本以及SQL处理较快</p><h2 id="MySQL介绍"><a href="#MySQL介绍" class="headerlink" title="MySQL介绍"></a>MySQL介绍</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>MySQL是一个开放源代码的关系型数据库管理系统</li><li>先被SUN收购，后来SUN被Oracle收购，MySQL的创造者担心被收购后会有闭源的风险，所以创建了MySQL的分支项目mariadb</li><li>MySQL6.x版本之后分为社区版（免费）和商业版（收费）</li><li>MySQL是一种关联数据库管理系统，将数据保存在不同的表中，而不是将数据全都放在一起，这样就增加了速度并提高了灵活性</li><li>MySQL是开源的，你不需要支付任何费用</li><li>MySQL是可以定制的，采用GPL协议，你可以修源码来开发自己的MySQL系统</li><li>MySQL支持大型数据库，可以处理拥有上千万条记录的大型数据库，支持5000万条记录的数据仓库，32位系统表文件最大支持4GB，64位系统表最大支持8TB</li><li>MySQL使用标准的SQL数据语言形式</li><li>MySQL可以允许允许与多个系统上，并支持多种语言，这些语言包括C&#x2F;C++,Python,java,perl,php,ruby等</li></ul><h3 id="关于MySQL8-0"><a href="#关于MySQL8-0" class="headerlink" title="关于MySQL8.0"></a>关于MySQL8.0</h3><p>MySQL8版本在功能上做了显著的改进与增强，开发者对源代码进行重构，最突出的一点是多MySQL optimizer优化器进行了改进，速度上得到了改善.用户体验更好了.</p><h2 id="RDBMS与非RDBMS"><a href="#RDBMS与非RDBMS" class="headerlink" title="RDBMS与非RDBMS"></a>RDBMS与非RDBMS</h2><h3 id="关系型数据库实质"><a href="#关系型数据库实质" class="headerlink" title="关系型数据库实质"></a>关系型数据库实质</h3><p>关系型数据库是最古老的数据库类型，关系型数据库模型是把复杂的数据结构归结为二元关系（即二维表格形式）<br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-17-20-47-58.png"><br>关系型数据库以行和列的形式存储数据，以便用户理解.这一系列的行和列被称为表，一组表组成一个库（database）<br>表与表之间的数据记录有关系。现实世界中的各种实体之间的各种联系均用关系模型来表示。关系型数据库就是建立在关系模型基础上的数据库<br>SQL就是关系型数据库的查询语言</p><h3 id="关系型数据库的优势"><a href="#关系型数据库的优势" class="headerlink" title="关系型数据库的优势"></a>关系型数据库的优势</h3><ul><li>复杂查询<br>可以用SQL语句方便的在一个表或多个表之间做非常复杂的数据查询</li><li>事物支持<br>使得对于安全性能很高的数据访问要求得以实现</li></ul><h3 id="非关系型数据库介绍"><a href="#非关系型数据库介绍" class="headerlink" title="非关系型数据库介绍"></a>非关系型数据库介绍</h3><p>可以看成关系型数据库的阉割版，基于键值对存储数据，不需要经过SQL层的解析，性能非常高。同时，减少不常用的功能，进一步提高性能</p><h3 id="有哪些非关系型数据库"><a href="#有哪些非关系型数据库" class="headerlink" title="有哪些非关系型数据库"></a>有哪些非关系型数据库</h3><blockquote><p>键值型数据库<br>使用场景是作为内存缓存，Redis是最流行的键值型数据库</p></blockquote><blockquote><p>文档型数据库<br>存放并获取文档，XML、JSON等格式。以文档作为处理信息的基本单位，一个文档相当于一条记录，文档数据库存放的文档就相当于键值数据库所存放的值MongoDB是最流行的文档型数据库。此外还有CouchDB等等</p></blockquote><blockquote><p>搜索引擎数据库<br>虽然关系型数据库使用索引提升效率，但是针对全文索引效率却较低。搜索引擎数据库就是应用在搜索领域的数据存储形式，由于搜索引擎会爬取大量数据，并特定的格式进行存储，这样在检索的时候才能保证性能最优。核心原理是倒排索引<br>典型产品：Solr、elasticsearch、splunk等</p></blockquote><blockquote><p>列式数据库<br>oracle、MySQL、SQLserver、都是采用行式存储。列式数据库将数据按照列存储到数据库中，好处是大量降低系统的I&#x2F;O,适合于分布式文件系统。不足在于功能少。<br>典型产品：HBase</p></blockquote><blockquote><p>图形数据库<br>利用图这种数据结构存储了实体（对象）之间的关系，典型例子就是社交网络中人与人的关系。数据模型主要以节点和边（关系）来实现，特点是能高效的解决复杂的关系问题<br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-17-21-35-49.png"></p></blockquote><h2 id="NoSQL的演变"><a href="#NoSQL的演变" class="headerlink" title="NoSQL的演变"></a>NoSQL的演变</h2><p>由于SQL一直霸占DBMS,所以有人想是否有一种数据库技术能远离SQL，于是NoSQL诞生了.下面是NoSQL的变化</p><blockquote><p>1970: nosql &#x3D; we have no sql<br>1980: nosql &#x3D; know sql<br>2000: nosql &#x3D; no sql!<br>2005: nosql &#x3D; not only sql<br>2013: nosql &#x3D; no,sql!</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>实际开发中，有很多业务需求，其实并不需要完整的关系型数据库功能。非关系型数据库的功能就足够了。这种情况下，使用性能更高，成本更低的非关系型数据库更明智.</p><blockquote><p>nosql的分类很多，但是在DBMS的排行榜中还是sql影响力比较大，所以掌握sql是十分重要的.</p></blockquote><h2 id="关系型数据库设计规则"><a href="#关系型数据库设计规则" class="headerlink" title="关系型数据库设计规则"></a>关系型数据库设计规则</h2><ul><li>关系型数据库典型数据结构就是数据表，这些数据表的组成都是结构化（Structured）。</li><li>先把数据放到表中，在把表放到库中</li><li>一个数据库可以有多个表，每个表都有名字用来标识自己，表名具有唯一性。</li><li>表具有一些特性，这些特性定义了数据在表中如何存储，类似java或python中“类”的设计</li></ul><h3 id="表、记录、字段"><a href="#表、记录、字段" class="headerlink" title="表、记录、字段"></a>表、记录、字段</h3><ul><li>E-R（rntity-relationship,实体-联系）模型中主要有三个概念：实体集、属性、联系集.</li><li>一个实体集（class）对用数据库中的一个表（table），一个实体（instance）对应数据库表中的一行（row）,也称为一条记录（record）.一个属性（attribute）对应数据库表中的一列（column）,也称为一个字段（field）.<blockquote><p>实体集（class） - 表（table）<br>实体（instance）- 行（row） - 记录（record）<br>属性（attribute） - 列（column） - 字段（field）</p></blockquote></li></ul><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-09-41-49.png"></p><blockquote><p>ORM思想（object relational mapping）体现：<br>数据库中的一个表&lt;–&gt;java或python中的一个类<br>表中的一条数据&lt;–&gt;类中的一个对象（实体）<br>表中的一个列&lt;–&gt;类中的一个字段</p></blockquote><h3 id="表的关联关系"><a href="#表的关联关系" class="headerlink" title="表的关联关系"></a>表的关联关系</h3><h4 id="一对一关联（one-to-one）"><a href="#一对一关联（one-to-one）" class="headerlink" title="一对一关联（one-to-one）"></a>一对一关联（one-to-one）</h4><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-09-56-54.png"></p><blockquote><p>如果设计成一张表，在查询的时候，用sql写起来会简洁一些。但是，实际开发的时候发现这张表的字段非常多，而有些字段是常用的，有些字段不是常用的，那我完全可以把常用的字段和不常用的字段分成两张表</p></blockquote><p>两种建表原则：</p><ul><li>外键唯一：主表的主键和从表的外键（唯一），形成主外键关系，外键唯一.</li><li>外键是主键：主表的主键和从表的主键，形成主外键关系.<blockquote><p>在约束中细讲</p></blockquote></li></ul><h4 id="一对多关系（one-to-many）"><a href="#一对多关系（one-to-many）" class="headerlink" title="一对多关系（one-to-many）"></a>一对多关系（one-to-many）</h4><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-10-09-14.png"></p><blockquote><p>一个员工有一个部门，一个部门有不同的员工.</p></blockquote><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-10-12-12.png"></p><blockquote><p>一门课程有一个编号，一门课程有很多人考.</p></blockquote><h4 id="多对多关系（many-to-many）"><a href="#多对多关系（many-to-many）" class="headerlink" title="多对多关系（many-to-many）"></a>多对多关系（many-to-many）</h4><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-10-17-34.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-10-18-01.png"></p><blockquote><p>一个学生可以学好几门课（学生信息表），一门课也有好多学生（课程信息表），最后整合在选课信息表.</p></blockquote><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-10-21-41.png"></p><blockquote><p>一个产品可以有多个订单（订单表），一个订单可以有多个产品（产品表），最后整合在订单明细表</p></blockquote><h4 id="自我引用"><a href="#自我引用" class="headerlink" title="自我引用"></a>自我引用</h4><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-10-25-46.png"></p><h2 id="MySQL8-0卸载"><a href="#MySQL8-0卸载" class="headerlink" title="MySQL8.0卸载"></a>MySQL8.0卸载</h2><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-10-41-19.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-10-44-48.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-10-45-46.png"></p><hr><h2 id><a href="#" class="headerlink" title></a><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-10-46-06.png"></h2><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-10-47-13.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-10-58-21.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-10-59-07.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-10-59-39.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-11-00-08.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-11-01-09.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-11-01-27.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-11-07-54.png"></p><h2 id="MySQL8-0安装"><a href="#MySQL8-0安装" class="headerlink" title="MySQL8.0安装"></a>MySQL8.0安装</h2><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-11-09-30.png"></p><h3 id="MySQL8-0下载地址"><a href="#MySQL8-0下载地址" class="headerlink" title="MySQL8.0下载地址"></a>MySQL8.0下载地址</h3><p>官网：<a href="https://www.mysql.com/">https://www.mysql.com</a><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-11-14-23.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-11-18-21.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-11-22-02.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-11-26-23.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-11-29-12.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-11-30-25.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-11-32-12.png"></p><h3 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h3><p>.zip的文件下完需要自己配置。<br>.msi的不需要自己配置.<br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-11-41-24.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-11-45-18.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-11-52-47.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-11-56-13.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-11-58-49.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-12-00-25.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-12-01-51.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-12-04-28.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-12-08-52.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-12-09-48.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-12-11-14.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-12-14-29.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-12-18-37.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-12-22-07.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-12-25-11.png"></p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-12-32-50.png"></p><h2 id="MySQL安装失败解决方法"><a href="#MySQL安装失败解决方法" class="headerlink" title="MySQL安装失败解决方法"></a>MySQL安装失败解决方法</h2><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-13-48-01.png"></p><blockquote><p>图中地址已经失效，直接按照报错中提示的软件名去微软官网下载就可以了</p></blockquote><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-13-52-53.png"></p><blockquote><p>如果你在安装的时候是连网的，他安装的时候会帮你自动下载.</p></blockquote><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-13-54-52.png">、</p><blockquote><p>链接失效的话，自己去微软官网搜索报错中出现的软件名下载就可以了.</p></blockquote><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-13-57-43.png"></p><blockquote><p>删完要重启下电脑在重新安装MySQL</p></blockquote><h2 id="MySQL的登录"><a href="#MySQL的登录" class="headerlink" title="MySQL的登录"></a>MySQL的登录</h2><h3 id="服务的启动和停止"><a href="#服务的启动和停止" class="headerlink" title="服务的启动和停止"></a>服务的启动和停止</h3><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-14-05-23.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-14-06-01.png"></p><blockquote><p>输入指令开启服务提示权限不足，就一&#x3D;以管理员身份运行CMD</p></blockquote><h3 id="MySQL登录和退出"><a href="#MySQL登录和退出" class="headerlink" title="MySQL登录和退出"></a>MySQL登录和退出</h3><h4 id="MySQL自带的登录和退出"><a href="#MySQL自带的登录和退出" class="headerlink" title="MySQL自带的登录和退出"></a>MySQL自带的登录和退出</h4><ul><li>MySQL为用户提供了命令窗口，见下图</li><li><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-14-15-04.png"></li><li>打开后输入密码就登录成功</li><li>输入quit或exit退出</li></ul><p><code>mysql -u root -P3306 -hlocalhost -p</code></p><ul><li><code>-u</code>:连接的用户，-u和用户名直接有没有空格无所谓</li><li><code>-p</code>:大写的P，后面写端口号（端口号下载安装MySQL那里），-P和端口号之间有没有空格无所谓</li><li><code>-h</code>:主机的意思（host）</li><li><code>-p</code>:密码<br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-14-37-31.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-14-38-24.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-14-39-39.png"></li></ul><h2 id="MySQL使用演示"><a href="#MySQL使用演示" class="headerlink" title="MySQL使用演示"></a>MySQL使用演示</h2><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-15-40-57.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-15-35-33.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-15-35-48.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-15-36-25.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-15-37-10.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-15-37-20.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-15-37-40.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-15-38-30.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-15-38-55.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-15-39-12.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-15-39-21.png"></p><blockquote><p><code>show databases;</code><br>查看内容</p></blockquote><blockquote><p><code>create database dbtest1;</code><br>在database中新建一个叫dbtest1的数据库</p></blockquote><blockquote><p><code>use dbtest1;</code><br>进入dbtest1数据库中</p></blockquote><blockquote><p><code>create table employees(id int,name varchar(15));</code><br>在database下的dbtest1数据库中，新建一个叫employees的表</p></blockquote><blockquote><p><code>select * from employees;</code><br>查看叫employees的表里面的数据</p></blockquote><blockquote><p><code>insert into employees values(100,&#39;TOM&#39;);</code><br>在employees表中添加一条数据<br><code>insert into employees values(100,&#39;汤姆&#39;);</code><br>想向表中添加中文，直接添加就添加失败。因为使用的编码格式不同.（8.0版本可以直接添加成功）（5.7版本的不行）<br>5.7版本默认是latin1,修改为utf-8才能添加中文</p></blockquote><blockquote><p><code>show create table employees;</code><br>查看表的信息</p></blockquote><blockquote><p><code>show variables like &#39;character_%&#39;;</code><br><code>show variables like &#39;collation_%&#39;;</code><br>查看详细信息</p></blockquote><blockquote><p><code>create database dbtest1;</code><br>删除数据库</p></blockquote><blockquote></blockquote><h3 id="修改MySQL编码"><a href="#修改MySQL编码" class="headerlink" title="修改MySQL编码"></a>修改MySQL编码</h3><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-15-47-21.png"></p><blockquote><p>修改好后，重启一下MySQL80服务<br><code>show variables like &#39;character_%&#39;;</code><br><code>show variables like &#39;collation_%&#39;;</code><br>查看有没有改成功</p></blockquote><p>接着试试添加中文，发现还是不行，为什么？<br>你输入<code>show create table employees;</code><br>发现这个表还是latin编码.因为改了之后，之前创建的数据库还是之前的编码.<br>那怎么办？<br>方法1：<code>create database dbtest1;</code>直接删掉数据库，然后在重新建一个新的<br>方法2：应该是有指令的，但是我不知道<br>方法3：使用图形化MySQL管理工具，在图形化管理工具里面修改就方便了.<br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-16-17-28.png"></p><h2 id="MySQL图形化管理工具"><a href="#MySQL图形化管理工具" class="headerlink" title="MySQL图形化管理工具"></a>MySQL图形化管理工具</h2><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-16-26-23.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-16-33-33.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-16-34-21.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-16-36-41.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-16-38-21.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-16-36-56.png"></p><ul><li>SQLyog社区版下载地址:<a href="https://github.com/webyog/sqlyog-community/wiki/Downloads">https://github.com/webyog/sqlyog-community/wiki/Downloads</a><h2 id="2059报错、2058报错"><a href="#2059报错、2058报错" class="headerlink" title="2059报错、2058报错"></a>2059报错、2058报错</h2><h3 id="错误描述"><a href="#错误描述" class="headerlink" title="错误描述"></a>错误描述</h3><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-19-45-17.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-19-47-09.png"></li></ul><h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-19-48-21.png"></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>1.升级图形界面工具版本<br>2.把MySQL8.0的用户密码加密规则还原成MySQL5.7的加密规则<br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-19-52-04.png"></p><h2 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h2><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-20-41-36.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-20-44-11.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-20-42-09.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-20-45-15.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-20-45-26.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-20-46-12.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-20-48-39.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-20-50-07.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-18-20-50-33.png"></p><h2 id="第一章数据库概述课后练习"><a href="#第一章数据库概述课后练习" class="headerlink" title="第一章数据库概述课后练习"></a>第一章数据库概述课后练习</h2><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-12-43-56.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-12-45-45.png"></p><h2 id="第二章MySQL环境搭建课后练习"><a href="#第二章MySQL环境搭建课后练习" class="headerlink" title="第二章MySQL环境搭建课后练习"></a>第二章MySQL环境搭建课后练习</h2><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-12-46-32.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-12-46-49.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-12-47-12.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-12-47-45.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-12-48-11.png"></p><h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h2><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-21-12-48-38.png"></p><blockquote><p>DDL：数据定义语言.CREATE(创建)\ALTER(修改)\DROP(删除)\RENAME(重命名)\TRUNCATE(清空)<br>DML：数据操作语言.INSERT(添加)\DELETE(删除)\UPDATE(修改)\SELECT(查找)<br>DCL：数据控制语言.COMMIT(提交)\ROLLBACK(撤销、回滚)\SAVEPOINT(设置保存点)\GRANT(赋予权限)\REVOKE(回收权限)</p></blockquote><h2 id="SQL的语言规则规范"><a href="#SQL的语言规则规范" class="headerlink" title="SQL的语言规则规范"></a>SQL的语言规则规范</h2><blockquote><p>规则是一定要遵守<br>规范是建议我们去遵守</p></blockquote><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-21-13-49-15.png"></p><h2 id="列的别名-去重-NULL-DESL等操作"><a href="#列的别名-去重-NULL-DESL等操作" class="headerlink" title="列的别名_去重_NULL_DESL等操作"></a>列的别名_去重_NULL_DESL等操作</h2><h3 id="列的别名"><a href="#列的别名" class="headerlink" title="列的别名"></a>列的别名</h3><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-10-11-12.png"></p><h3 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h3><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-10-27-56.png"></p><h3 id="空值参与运算（NULL）"><a href="#空值参与运算（NULL）" class="headerlink" title="空值参与运算（NULL）"></a>空值参与运算（NULL）</h3><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-10-51-18.png"></p><h3 id="查询常数"><a href="#查询常数" class="headerlink" title="查询常数"></a>查询常数</h3><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-11-17-26.png"></p><h2 id="显示表结构"><a href="#显示表结构" class="headerlink" title="显示表结构"></a>显示表结构</h2><blockquote><p>DESCRIBE 表名<br>DESC 表名</p></blockquote><h2 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h2><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-12-19-58.png"></p><h2 id="第三章-SELECT查询语句课后练习"><a href="#第三章-SELECT查询语句课后练习" class="headerlink" title="第三章 SELECT查询语句课后练习"></a>第三章 SELECT查询语句课后练习</h2><p>1.查询员工12个月的工资总和，并起名为ANNUAL SALARY<br>理解1：计算12个月的基本工资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,salary<span class="operator">*</span><span class="number">12</span> &quot;ANNUAL SALARY&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p>理解2：计算12个月的基本工资和奖金加一起</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,salary<span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span>IFNULL(commission_pct,<span class="number">0</span>))<span class="operator">*</span><span class="number">12</span> &quot;annual&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p>2.查询employees表中去除重复的job_id以后的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> job_id</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p>3.查询工资大于12000的员工姓名和工资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary<span class="operator">&gt;</span><span class="number">12000</span>;</span><br></pre></td></tr></table></figure><p>4.查询员工号为176的员工的姓名和部门号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id<span class="operator">=</span><span class="number">176</span>;</span><br></pre></td></tr></table></figure><p>5.显示表departments的结构，并查询其中的全部数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> departments;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> departments;</span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-13-29-04.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-13-29-37.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-13-36-42.png"></p><hr><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-13-52-20.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-15-35-51.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-15-37-09.png"></p><hr><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-15-54-53.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-16-01-12.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-16-02-25.png"></p><hr><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-16-11-13.png"></p><hr><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-16-17-37.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-16-20-51.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-16-25-44.png"></p><blockquote><p>想用别的特殊符号代替转义字符就要这么写<br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-16-26-56.png"></p></blockquote><hr><h3 id="拓展，正则表达式"><a href="#拓展，正则表达式" class="headerlink" title="拓展，正则表达式"></a>拓展，正则表达式</h3><p>自己看pdf文档学习了解.</p><blockquote><p>在实际开发中，用的还是比较多的，要自己多练习</p></blockquote><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-16-55-45.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-17-49-40.png"></p><blockquote><p>注意<br>OR和AND可以一起使用，但是在使用时要注意两者的优先级，由于AND的优先级高于OR，因此先对AND两边的操作数进行操作，在于OR中的操作数结合.</p></blockquote><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-22-17-57-23.png"></p><h1 id="第四章运算符练习"><a href="#第四章运算符练习" class="headerlink" title="第四章运算符练习"></a>第四章运算符练习</h1><p>1.选择工资不在5000到12000的员工的姓名和工资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">5000</span> <span class="keyword">AND</span> <span class="number">12000</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary<span class="operator">&lt;</span><span class="number">5000</span> <span class="keyword">OR</span> salary<span class="operator">&gt;</span><span class="number">12000</span>;</span><br></pre></td></tr></table></figure><p>2.选择在20或50号部门工作的员工姓名和部门号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id<span class="operator">=</span><span class="number">20</span> <span class="keyword">OR</span> department_id<span class="operator">=</span><span class="number">50</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IN</span>(<span class="number">20</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure><p>3.选择公司中没有管理者的员工姓名及job_id</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> manager_id <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> manager_id <span class="keyword">is</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p>4.选择公司中有奖金的员工姓名，工资和奖金级别</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,salary,commission_pct</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,salary,commission_pct</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> commission_pct <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p>5.选择员工姓名的第三个字母是a的员工姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;__a%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>6.选择姓名中有字母a和k的员工姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%a%k%&#x27;</span> <span class="keyword">OR</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%k%a%&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span> <span class="keyword">AND</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%k%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>7.显示出表employees中first_name以e结尾的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,first_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> first_name <span class="keyword">LIKE</span> <span class="string">&#x27;%e&#x27;</span>;</span><br></pre></td></tr></table></figure><p>用正则表达式来写</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,first_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> first_name REGEXP <span class="string">&#x27;e$&#x27;</span>;</span><br></pre></td></tr></table></figure><p>8.显示出表employees部门编号在80-100之间的姓名和工种</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">BETWEEN</span> <span class="number">80</span> <span class="keyword">AND</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id<span class="operator">&gt;=</span><span class="number">80</span> <span class="keyword">AND</span> department_id<span class="operator">&lt;=</span><span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>9.显示出表employees的manager_id是100，101，110的员工姓名，工资和管理者id</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,salary,manager_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> manager_id <span class="keyword">IN</span> (<span class="number">100</span>,<span class="number">101</span>,<span class="number">110</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,salary,manager_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> manager_id<span class="operator">=</span><span class="number">100</span> <span class="keyword">OR</span> manager_id<span class="operator">=</span><span class="number">101</span> <span class="keyword">OR</span> manager_id<span class="operator">=</span><span class="number">110</span>;</span><br></pre></td></tr></table></figure><h2 id="排序与分页"><a href="#排序与分页" class="headerlink" title="排序与分页"></a>排序与分页</h2><h3 id="排序数据"><a href="#排序数据" class="headerlink" title="排序数据"></a>排序数据</h3><h4 id="排序规则"><a href="#排序规则" class="headerlink" title="排序规则"></a>排序规则</h4><ul><li>ASC(ascend):升序</li><li>DESC(descend):降序<br>ORDER BY子句在SELECT语句的结尾</li></ul><h4 id="单列排序"><a href="#单列排序" class="headerlink" title="单列排序"></a>单列排序</h4><p>练习：按照salary从高到底的顺序显示员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h4 id="多列排序"><a href="#多列排序" class="headerlink" title="多列排序"></a>多列排序</h4><p>练习：先按照department_id进行降序，在按照salary进行升序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,salary,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> department_id <span class="keyword">DESC</span>,salary <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><blockquote><p>LIMIT：分页<br>使用格式：LIMIT 偏移量,条目数;</p></blockquote><h4 id="MySQL使用LIMIT实现数据的分页显示"><a href="#MySQL使用LIMIT实现数据的分页显示" class="headerlink" title="MySQL使用LIMIT实现数据的分页显示"></a>MySQL使用LIMIT实现数据的分页显示</h4><p>练习：每页显示20条记录，此时显示第一页</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>显示第二页，每页显示20条</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">LIMIT <span class="number">20</span>,<span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>显示第三页，每页显示20条</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">LIMIT <span class="number">40</span>,<span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>以此类推<br>……</p><p>需求：每页显示pagesize条记录，此时显示pageno页</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LIMIT  (pageno<span class="number">-1</span>)<span class="operator">*</span>pageno pagesize;</span><br></pre></td></tr></table></figure><p>练习：表里有107行数据，先要显示第32、33条数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">LIMIT <span class="number">31</span>,<span class="number">2</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注意LIMIT字句必须放在整个SELECT语句的最后</p></blockquote><h5 id="MySQL的分页的新特性"><a href="#MySQL的分页的新特性" class="headerlink" title="MySQL的分页的新特性"></a>MySQL的分页的新特性</h5><blockquote><p>LIMIT 条目数 OFFSET 偏移量<br>和MySQL5.7的相反了</p></blockquote><p>练习：查询员工表中工资最高的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-24-19-48-38.png"></p><h2 id="第五章排序与分页的课后练习"><a href="#第五章排序与分页的课后练习" class="headerlink" title="第五章排序与分页的课后练习"></a>第五章排序与分页的课后练习</h2><p>1.查询员工的姓名，部门号。和年薪，按年薪降序，按姓名升序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,department_id,salary<span class="operator">*</span><span class="number">12</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>,last_name <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><p>2.选择工资不在8000到17000的员工的姓名和工资，按工资降序，显示21到40位置的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary<span class="operator">&lt;</span><span class="number">8000</span> <span class="keyword">OR</span> salary<span class="operator">&gt;</span><span class="number">17000</span></span><br><span class="line"># <span class="keyword">WHERE</span> salary <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">8000</span> <span class="keyword">AND</span> <span class="number">17000</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">20</span>,<span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>3.查询邮箱中包含e的员工信息，并按照邮箱的字节数降序，在按部门号升序.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%e%&#x27;</span></span><br><span class="line"># 正则表达式</span><br><span class="line"># <span class="keyword">WHERE</span> email REGEXP <span class="string">&#x27;[e]&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> LENGTH(email) <span class="keyword">DESC</span>,department_id <span class="keyword">ASC</span>; </span><br></pre></td></tr></table></figure><blockquote><p>LENGTH()是个函数<br>LENGTH()用来求字符串字节数<br>LENGTH()在单行函数的时候讲</p></blockquote><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p>多表查询的正确方式：需要有连接条件<br>通过部门id,找到部门名字</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees,departments</span><br><span class="line"># 连接条件</span><br><span class="line"><span class="keyword">WHERE</span> employees.`department_id`<span class="operator">=</span>departments.`department_id`;</span><br></pre></td></tr></table></figure><p>但是这个语句，如果department_id是NULL的,就查不出来<br>刚好有一个人的是没有部门的.所以只有106条记录<br>至于怎么才能查出来，放到外连接的时候讲</p><p>如果查询语句中出现了多个表中都存在的字段，则必须指明该字段所在的表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employees.employee_id,</span><br><span class="line">       departments.department_name,</span><br><span class="line">       employees.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees,departments</span><br><span class="line"><span class="keyword">WHERE</span> employees.`department_id`<span class="operator">=</span>departments.`department_id`;</span><br></pre></td></tr></table></figure><ul><li>建议：从sql优化的角度，建议多表查询时，每个字段前都指明其所在的表</li></ul><p>练习：查询员工的employee_id,last_name,department_id,city</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.employee_id,</span><br><span class="line">       e.last_name,</span><br><span class="line">       d.department_name,</span><br><span class="line">       l.city</span><br><span class="line"><span class="keyword">FROM</span> employees e,</span><br><span class="line">     departments d,</span><br><span class="line">     locations l</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">AND</span> d.location_id <span class="operator">=</span> l.location_id;</span><br></pre></td></tr></table></figure><ul><li>结论：如果有N个表实现多表查询，则至少需要N-1个连接条件</li></ul><h3 id="多表查询的分类"><a href="#多表查询的分类" class="headerlink" title="多表查询的分类"></a>多表查询的分类</h3><h4 id="等值连接-vs-非等值连接"><a href="#等值连接-vs-非等值连接" class="headerlink" title="等值连接 vs 非等值连接"></a>等值连接 vs 非等值连接</h4><p>等值连接：就是直接通过对应的字段查询对应的数据，之前学的都是等值连接</p><p>非等值连接的例子：比如，在atguigudb中有job_grades的一张表.如下图所示<br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-27-18-39-21.png"><br>这张表是根据员工的工资进行分级<br>在我们实际查询的时候，我们不会说这个人的工资是什么等级，而是说，这个人的工资是多少.<br>换句话说，就是没有直接使用grade_level，而是通过lower_sal和highest_sal来查询出员工grade_level的<br>这就是非等值连接.<br>示例：查询员工的名字，工资，和工资对应的等级</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,salary,grade_level</span><br><span class="line"><span class="keyword">FROM</span> employees e,job_grades j</span><br><span class="line"><span class="keyword">WHERE</span> e.salary <span class="keyword">BETWEEN</span> j.lowest_sal <span class="keyword">AND</span> j.highest_sal;</span><br></pre></td></tr></table></figure><h3 id="自连接-vs-非自连接"><a href="#自连接-vs-非自连接" class="headerlink" title="自连接 vs 非自连接"></a>自连接 vs 非自连接</h3><p>自连接<br>练习：查询员工id,姓名，以及其管理者的id和姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.employee_id,e.last_name,</span><br><span class="line">       man.employee_id,man.last_name</span><br><span class="line"><span class="keyword">FROM</span> employees e,employees man</span><br><span class="line"><span class="keyword">WHERE</span> e.manager_id <span class="operator">=</span> man.employee_id;</span><br></pre></td></tr></table></figure><p>自己引用自己</p><p>非自连接：像之前写的那种，从不同表中查询数据.</p><h3 id="内连接和外连接"><a href="#内连接和外连接" class="headerlink" title="内连接和外连接"></a>内连接和外连接</h3><p>上面写的全部都是内连接</p><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>内连接：合并具有同一列的两个以上的表的行，结果中不包含一个表与另一个表不匹配的行<br>什么意思？<br>比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees,departments</span><br><span class="line"><span class="keyword">WHERE</span> employees.`department_id`<span class="operator">=</span>departments.`department_id`;</span><br></pre></td></tr></table></figure><p>这个代码通过员工表中的部门id,找到部门表中，部门id对应的部门名字<br>但是呢，因为有一个人是没有部门的.所以最后只有106条记录（应该有107条记录）<br>这就是内连接</p><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p>外连接：合并具有同一列的两个以上的表的行，结果中除了包含一个表与另一个表匹配的行之外，还查询到左表或右表中不匹配的行.<br>举例说明：就是内连接例子查出那个没有部门的人.</p><h5 id="外连接的分类：左外连接、右外连接、满外连接"><a href="#外连接的分类：左外连接、右外连接、满外连接" class="headerlink" title="外连接的分类：左外连接、右外连接、满外连接"></a>外连接的分类：左外连接、右外连接、满外连接</h5><blockquote><p>左外连接：两个表在连接过程中除了返回满足条件的行以外，还返回左表中不满足条件的行<br>右外连接：两个表在连接过程中除了返回满足条件的行以外，还返回右表中不满足条件的行</p></blockquote><p>练习：查询所有员工的last_name,department_name信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees,departments</span><br><span class="line"><span class="keyword">WHERE</span> employees.department_id <span class="operator">=</span> departments.department_id(<span class="operator">+</span>);</span><br></pre></td></tr></table></figure><p>解释：因为在employees表中，有一个人是没有department_id的，所以导致了，在d表中查询name的时候，没有匹配的数据.<br>就相当于e表中有107条数据，有一个数据对应的department_id是空的，那么在d表中就只有106条数据.<br>打比方说就是左边腿长，右边腿短，但是裤子的裤管是一样长的.那买裤子的时候肯定是以短腿这边的长度为准买裤子<br>但是这样就很难看.<br>那怎么办呢？<br>把短腿垫高，或者把长腿砍掉一节。<br>所以我选择吧短腿垫高<br>也就是departments.department_id(+)</p><blockquote><p>注意：（+）这个语法是SQL92的，MySQL不支持这个语法，MySQL支持SQL99.<br>Oracle支持SQL92</p></blockquote><p>在SQL99语法中是使用JOIN…ON的方式实现多表查询的，这种方式也能解决外连接问题.</p><h2 id="SQL99语法实现多表查询"><a href="#SQL99语法实现多表查询" class="headerlink" title="SQL99语法实现多表查询"></a>SQL99语法实现多表查询</h2><h3 id="SQL99语法实现内连接"><a href="#SQL99语法实现内连接" class="headerlink" title="SQL99语法实现内连接"></a>SQL99语法实现内连接</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure><p>这里只有两张表<br>3张表的话怎么写呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,department_name,city</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">JOIN</span> locations l</span><br><span class="line"><span class="keyword">ON</span> d.location_id <span class="operator">=</span> l.location_id;</span><br></pre></td></tr></table></figure><p>每多一张表就JOIN一下，然后用ON，把关系连接起来</p><h3 id="SQL语法实现外连接"><a href="#SQL语法实现外连接" class="headerlink" title="SQL语法实现外连接"></a>SQL语法实现外连接</h3><p>左外连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure><p>就是加上LEFT OUTER<br>LEFT OUTER JOIN :翻译过来就是左外连接</p><p>右外连接：那就是加上RIGHT PUTER JOIN </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure><p>满外连接:FULL OUTER JOIN</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure><p>但是呢，MySQL不支持FULL OUTER JOIN<br>MySQL要使用UNION</p><h3 id="UNINO的使用"><a href="#UNINO的使用" class="headerlink" title="UNINO的使用"></a>UNINO的使用</h3><p>利用UNION关键字，可以给出多条SELECT语句，并将多个SELECT的结果合并成一个结果集。<br>合并时，两个表对应列数和数据类型必须相同，并且相互对应各个SELECT语句之间使用UNION或UNION ALL关键字分隔</p><ul><li>UNION：返回两个查询的结果集的并集，去除重复记录</li><li>UNION ALL：返回两个查询的结果集的并集，对于两个结果集的重复部分，不去重.<blockquote><p>执行UNION ALL要的资源比UNION要的少，如果确定合并后数据不存在重复数据，或者不需要去除重复的数据，则尽量使用UNION ALL,以提高效率.</p></blockquote></li></ul><h2 id="7种连接的实现"><a href="#7种连接的实现" class="headerlink" title="7种连接的实现"></a>7种连接的实现</h2><p>首先要知道是哪7种<br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-28-10-36-37.png"></p><hr><p>我以查询员工employee_id,department_id为例子<br>那么employees就相当于图中的A，departments就相当于图中的B<br>下面的7种连接都用查询员工employee_id,department_id为例子来说明</p><hr><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-28-10-43-32.png"><br>这个是内连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.employee_id,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure><p>解释：e表中有员工id,没有部门名字.d表中有部门名字，但是没有有员工id.但是两张表都有部门id.<br>那现在要把e表的员工id，和d表的部门名字对应起来。就通过部门id建立联系.就可以对应起来了.<br>（因为有一个员工没有部门id,所以最后输出106条记录）</p><hr><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-28-10-56-58.png"><br>这个是左外连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.employee_id,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure><p>解释：e表有107个员工，每个员工都有员工id.但不是每个员工都有部门，其中有一个没有部门.没有部门就没有部门id.<br>既然没有部门id,那肯定就查不到对应的部门名字<br>但是，这个员工是有员工id的，那就也要把它显示出来。<br>这时就用左外连接.<br>为什么用左，不用右？<br>因为，之前说了，设e表是图中的A,d表是图中的B.<br>现在在e表中有员工id(employee_id),d表中没有对应的部门名字（department_name）.<br>很明显的，如果想要显示这个没有部门的员工，就是要显示e表中的数据.<br>又因为e表是图中的A<br>所以是左外循环<br>问：那如果e表在右，d表在左，这里是不是就用右外连接？<br>答：是.</p><hr><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-28-11-14-07.png"><br>这个是右外连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.employee_id,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">right</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure><p>解释：刚才是，员工有员工id，但是没有部门<br>现在的情况是，有部门，但是部门里没员工.<br>想把那些没员工的部门显示出来<br>而没有员工的部门在d表中，所以就是右外连接</p><hr><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-28-11-45-47.png"><br>这个我不知道叫什么</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.employee_id,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> d.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p>解释：在左外连接的基础上，过滤掉（WHERE）内连接的数据.<br>可以理解为:要查找没部门的员工，就是部门id（department_id）是NULL的<br>在这个例子中，过滤的条件是WHERE d.department_id IS NULL;<br>在不同的情况下，过滤条件是不一样的.</p><hr><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-28-11-55-16.png"><br>这个我不知道叫什么</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.employee_id,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p>解释：在右外连接的基础上，过滤掉内连接的数据<br>可以理解为：要找没有员工的部门.就是员工id（employee_id）是NULL的</p><hr><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-28-12-09-33.png"><br>这是满外连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.employee_id,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p>解释：用UNION ALL把数据连接起来<br>看成左外连接加上右中图<br>也可以是右外连接加上左中图<br>但是不可以看成左外连接加上右外连接，如果这么加左右外连接中间的那部分，会产生笛卡尔错误.</p><hr><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-06-28-12-19-18.png"><br>这个我不知道叫什么</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.employee_id,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> d.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p>解释：就看成左中图加上右中图</p><h3 id="总的代码，懒人复制粘贴"><a href="#总的代码，懒人复制粘贴" class="headerlink" title="总的代码，懒人复制粘贴"></a>总的代码，懒人复制粘贴</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"># 内连接</span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line"># 显示d表</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> departments;</span><br><span class="line"># 显示e表</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees;</span><br><span class="line"># 左外连接</span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line"># 右外连接</span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line"># 左中图</span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> d.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"># 右中图</span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"># 满外连接</span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"># 右下图</span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> d.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><h2 id="第六章多表查询课后练习"><a href="#第六章多表查询课后练习" class="headerlink" title="第六章多表查询课后练习"></a>第六章多表查询课后练习</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"># 显示表employees</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"># 显示表departments</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span><span class="keyword">FROM</span> departments;</span><br><span class="line"></span><br><span class="line"># <span class="number">1.</span>显示所有员工的姓名，部门号和部门名称。 </span><br><span class="line"><span class="keyword">SELECT</span> e.last_name,e.department_id,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line"># <span class="number">2.</span>查询<span class="number">90</span>号部门员工的job_id和<span class="number">90</span>号部门的location_id </span><br><span class="line"><span class="keyword">SELECT</span> e.job_id,d.location_id</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> d.department_id <span class="operator">=</span> <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line"># <span class="number">3.</span>选择所有有奖金的员工的 last_name , department_name , location_id , city </span><br><span class="line"><span class="keyword">SELECT</span> e.last_name,d.department_name,d.location_id,l.city</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> locations l</span><br><span class="line"><span class="keyword">ON</span> d.location_id <span class="operator">=</span> l.location_id</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"># <span class="number">4.</span>选择city在Toronto工作的员工的 last_name , job_id , department_id , department_name </span><br><span class="line"><span class="keyword">SELECT</span> e.last_name,e.job_id,e.department_id,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">JOIN</span> locations l</span><br><span class="line"><span class="keyword">ON</span> d.location_id <span class="operator">=</span> l.location_id</span><br><span class="line"><span class="keyword">WHERE</span> l.city <span class="operator">=</span> <span class="string">&#x27;Toronto&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># <span class="number">5.</span>查询员工所在的部门名称、部门地址、姓名、工作、工资，其中员工所在部门的部门名称为’Executive’ </span><br><span class="line"><span class="keyword">SELECT</span> d.department_name,l.street_address,e.last_name,e.job_id,e.salary</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">JOIN</span> locations l</span><br><span class="line"><span class="keyword">ON</span> d.location_id <span class="operator">=</span> l.location_id</span><br><span class="line"><span class="keyword">WHERE</span> d.department_name <span class="operator">=</span> <span class="string">&#x27;Executive&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># <span class="number">6.</span>选择指定员工的姓名，员工号，以及他的管理者的姓名和员工号，结果类似于下面的格式 </span><br><span class="line"># employees  Emp  manager  Mgr</span><br><span class="line"># kochhar    <span class="number">101</span>  king     <span class="number">100</span> </span><br><span class="line"><span class="keyword">SELECT</span> emp.last_name &quot;employees&quot;,emp.employee_id &quot;Emp&quot;,</span><br><span class="line">mgr.last_name &quot;manager&quot;,mgr.employee_id &quot;Mgr&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees emp <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> employees mgr</span><br><span class="line"><span class="keyword">ON</span> emp.manager_id <span class="operator">=</span> mgr.employee_id;</span><br><span class="line"></span><br><span class="line"># <span class="number">7.</span>查询哪些部门没有员工 </span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> e.employee_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"># <span class="number">8.</span> 查询哪个城市没有部门 </span><br><span class="line"><span class="keyword">SELECT</span> d.department_id,l.city</span><br><span class="line"><span class="keyword">FROM</span> locations l <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> l.location_id <span class="operator">=</span> d.location_id</span><br><span class="line"><span class="keyword">WHERE</span> d.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"># <span class="number">9.</span> 查询部门名为 Sales 或 IT 的员工信息</span><br><span class="line"><span class="keyword">SELECT</span> e.department_id,e.employee_id,e.last_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> d.department_name <span class="operator">=</span> <span class="string">&#x27;sales&#x27;</span></span><br><span class="line"><span class="keyword">OR</span> d.department_name <span class="operator">=</span> <span class="string">&#x27;it&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有的用or连接的可以用in<br>在mysql中，大小写不规范<br>有的题目中没给定明确要求要哪些：比如员工信息，可以是id,可以是名字，也可以是部门.自己看着给点信息就行.</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>函数这块偷懒没写</li><li>一边用一边查一边记忆</li><li>想把函数全背出来太难了</li></ul><h2 id="第七章函数课后练习"><a href="#第七章函数课后练习" class="headerlink" title="第七章函数课后练习"></a>第七章函数课后练习</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">1.</span>显示系统时间</span><br><span class="line"><span class="keyword">SELECT</span> NOW()</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br><span class="line"># <span class="number">2.</span>查询员工工号，姓名，工资，以及工资提高<span class="number">20</span><span class="operator">%</span>后的结果（<span class="keyword">new</span> salary）</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,salary,salary<span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span><span class="number">0.2</span>) <span class="string">&#x27;new salary&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"># <span class="number">3.</span>将员工的姓名按首字母排序，并写出姓名的长度（length函数）</span><br><span class="line"><span class="keyword">SELECT</span> last_name,LENGTH(last_name) <span class="string">&#x27;lenbgth&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> last_name <span class="keyword">ASC</span>;</span><br><span class="line"></span><br><span class="line"># <span class="number">4.</span>查询员工id,last_name,salary,并作为一个列输出（concat函数），别名为out_put</span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(employee_id,last_name,salary) <span class="string">&#x27;out put&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"># <span class="number">5.</span>查询公司员工工作的年数、工作的天数、并按照工作年数进行降序排序(datediff函数)（curdate函数）</span><br><span class="line"><span class="keyword">SELECT</span> DATEDIFF(CURDATE(),hire_date)<span class="operator">/</span><span class="number">365</span> <span class="string">&#x27;worked_years&#x27;</span>,DATEDIFF(CURDATE(),hire_date)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> worked_years <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"># <span class="number">6.</span>查询员工姓名、hire_date,department_id,满足以下条件：</span><br><span class="line"># 雇佣时间在<span class="number">1997</span>年之后，departmen_id为<span class="number">80</span>或<span class="number">90</span>或<span class="number">110</span>，commission_pct不为空(date_format函数)</span><br><span class="line"><span class="keyword">SELECT</span> last_name,hire_date,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IN</span> (<span class="number">80</span>,<span class="number">90</span>,<span class="number">110</span>)</span><br><span class="line"><span class="keyword">AND</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"># <span class="keyword">and</span> hire_date <span class="operator">&gt;=</span> str_to_date(<span class="string">&#x27;1997-01-01&#x27;</span>,<span class="string">&#x27;%Y-%m-%d&#x27;</span>);</span><br><span class="line"><span class="keyword">AND</span> DATE_FORMAT(hire_date,<span class="string">&#x27;%Y&#x27;</span>) <span class="operator">&gt;=</span><span class="string">&#x27;1997&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># <span class="number">7.</span>查询公司中入职超过<span class="number">10000</span>天的员工姓名，入职时间</span><br><span class="line"><span class="keyword">SELECT</span> last_name,hire_date</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> DATEDIFF(CURDATE(),hire_date)<span class="operator">&gt;=</span><span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"># <span class="number">8.</span>做一个查询，产生下面的结果(concat函数)</span><br><span class="line"># <span class="operator">&lt;</span>last_name<span class="operator">&gt;</span>earns<span class="operator">&lt;</span>salary<span class="operator">&gt;</span>monthly but wants <span class="operator">&lt;</span>salary<span class="operator">*</span><span class="number">3</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(last_name,<span class="string">&#x27;earns&#x27;</span>,salary,<span class="string">&#x27;mothly but wants&#x27;</span>,salary<span class="operator">*</span><span class="number">3</span>)</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"># <span class="number">9.</span>使用<span class="keyword">case</span><span class="operator">-</span><span class="keyword">when</span>，按照下面的条件： </span><br><span class="line"># job         grade </span><br><span class="line"># AD_PRES     A </span><br><span class="line"># ST_MAN      B </span><br><span class="line"># IT_PROG     C </span><br><span class="line"># SA_REP      D </span><br><span class="line"># ST_CLERK    E</span><br><span class="line"><span class="keyword">SELECT</span> last_name <span class="string">&#x27;last_name&#x27;</span>,job_id <span class="string">&#x27;Job_id&#x27;</span>,</span><br><span class="line"><span class="keyword">CASE</span> job_id </span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">&#x27;AD_PRES&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">&#x27;ST_MAN&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">&#x27;IT_PROG&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">&#x27;SA_REP&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">&#x27;ST_CLERK&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;E&#x27;</span></span><br><span class="line"><span class="keyword">END</span>&quot;GRADE&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><ul><li>有的函数名不同但是效果是不一样的</li><li>注意语法不要写错.</li></ul><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p>聚合函数又叫组函数，通常是对表中的数据进行统计和计算，一般结合分组(group by)来使用，用于统计和计算分组数据<br>常用的聚合函数:</p><ul><li>count(col): 表示求指定列的总行数</li><li>max(col): 表示求指定列的最大值</li><li>min(col): 表示求指定列的最小值</li><li>sum(col): 表示求指定列的和</li><li>avg(col): 表示求指定列的平均值</li></ul><p>练习：查询部门id为10、20、30、40，这4个部门中最高工资比10000高的部门信息<br>方式1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id,<span class="built_in">MAX</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IN</span> (<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MAX</span>(salary)<span class="operator">&gt;</span><span class="number">10000</span>;</span><br></pre></td></tr></table></figure><p>方式2</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id,<span class="built_in">MAX</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MAX</span>(salary)<span class="operator">&gt;</span><span class="number">10000</span></span><br><span class="line"><span class="keyword">AND</span> department_id <span class="keyword">IN</span> (<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>);</span><br></pre></td></tr></table></figure><blockquote><p>当过滤条件中有聚合函数时，此过滤条件必须声明在HAVING中<br>当过滤条件中没有聚合函数时，次过滤条件声明在WHERE或HAVING中都是可以的，但是建议大家声明在WHERE中</p></blockquote><h3 id="WHERE和HAVING对比"><a href="#WHERE和HAVING对比" class="headerlink" title="WHERE和HAVING对比"></a>WHERE和HAVING对比</h3><p>1.从适用范围上来讲，HAVING的适用范围更广<br>2.如果过滤条件中没有聚合函数，WHERE的效率高于HAVING</p><h2 id="SQL底层执行原理"><a href="#SQL底层执行原理" class="headerlink" title="SQL底层执行原理"></a>SQL底层执行原理</h2><p><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-07-01-15-49-03.png"><br><img src="/2022/06/17/MySQL%E5%AD%A6%E4%B9%A0/2022-07-01-16-05-37.png"></p><h2 id="第8章聚合函数课后练习"><a href="#第8章聚合函数课后练习" class="headerlink" title="第8章聚合函数课后练习"></a>第8章聚合函数课后练习</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1.</span><span class="keyword">where</span>子句可否使用组函数进行过滤? </span><br><span class="line"># 不行</span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>查询公司员工工资的最大值，最小值，平均值，总和</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary),<span class="built_in">MIN</span>(salary),<span class="built_in">AVG</span>(salary),<span class="built_in">SUM</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line">#<span class="number">3.</span>查询各job_id的员工工资的最大值，最小值，平均值，总和 </span><br><span class="line"><span class="keyword">SELECT</span> job_id,<span class="built_in">MAX</span>(salary),<span class="built_in">MIN</span>(salary),<span class="built_in">AVG</span>(salary),<span class="built_in">SUM</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id;</span><br><span class="line"></span><br><span class="line">#<span class="number">4.</span>选择具有各个job_id的员工人数 </span><br><span class="line"><span class="keyword">SELECT</span> job_id,<span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id;</span><br><span class="line"></span><br><span class="line"># <span class="number">5.</span>查询员工最高工资和最低工资的差距（DIFFERENCE）</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary)<span class="operator">-</span><span class="built_in">MIN</span>(salary) <span class="string">&#x27;DIFFERENCE&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"> </span><br><span class="line"># <span class="number">6.</span>查询各个管理者手下员工的最低工资，其中最低工资不能低于<span class="number">6000</span>，没有管理者的员工不计算在内 </span><br><span class="line"><span class="keyword">SELECT</span> manager_id,<span class="built_in">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> manager_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MIN</span>(salary)<span class="operator">&gt;=</span><span class="number">6000</span></span><br><span class="line"><span class="keyword">AND</span> manager_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> manager_id,<span class="built_in">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> manager_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> manager_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MIN</span>(salary)<span class="operator">&gt;=</span><span class="number">6000</span>;</span><br><span class="line"></span><br><span class="line"># <span class="number">7.</span>查询所有部门的名字，location_id，员工数量和平均工资，并按平均工资降序 </span><br><span class="line"><span class="keyword">SELECT</span> d.department_name,d.location_id,<span class="built_in">COUNT</span>(employee_id),<span class="built_in">AVG</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> departments d <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> employees e</span><br><span class="line"><span class="keyword">ON</span> d.department_id <span class="operator">=</span> e.department_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_name,location_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">AVG</span>(salary) <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"># <span class="number">8.</span>查询每个工种、每个部门的部门名、工种名和最低工资</span><br><span class="line"><span class="keyword">SELECT</span> d.department_name,e.job_id,<span class="built_in">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_name,job_id</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> d.department_name,e.job_id,<span class="built_in">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> departments d <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> employees e</span><br><span class="line"><span class="keyword">ON</span> d.department_id <span class="operator">=</span> e.department_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_name,job_id</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;&#x2F;<br>&#x2F;&#x2F;&#x2F;</p><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><h3 id="单行子查询"><a href="#单行子查询" class="headerlink" title="单行子查询"></a>单行子查询</h3><p>单号子查询操作符 &gt; &lt;&gt; &lt; &lt;&#x3D;&gt; &#x3D;<br>需求：谁的工资比Abel高<br>方式1：先查出Abel的工资是多少，在用查出来的工资，重新写一段代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>;# <span class="number">11000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary<span class="operator">&gt;</span><span class="number">11000</span>;</span><br></pre></td></tr></table></figure><p>方式2：自连接，先找到Abel的数据（e1）,在用Abel的数据(e1)和全部数据(e2)比较</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e2.last_name,e2.salary</span><br><span class="line"><span class="keyword">FROM</span> employees e1,employees e2</span><br><span class="line"><span class="keyword">WHERE</span> e1.last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> e2.salary <span class="operator">&gt;</span> e1.salary;</span><br></pre></td></tr></table></figure><p>方式3：子查询<br>方式1是先查出来工资然后记下来，在写一个查询，子查询就相当于把2个查询合在一起</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span>( <span class="keyword">SELECT</span> salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>);</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>子查询要包含在括号内</li><li>将子查询放在比价条件的右侧</li><li>单行操作符对应单行子查询，多行操作符对应多行子查询</li></ul><p>练习：工资大于149号员工工资的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span>( <span class="keyword">SELECT</span> salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">149</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>练习：返回job_id与141号员工相同，salary比143号员工多的员工姓名、job_id和工资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,job_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="operator">=</span> (<span class="keyword">SELECT</span> job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">141</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">AND</span> salary <span class="operator">&gt;</span> (  <span class="keyword">SELECT</span> salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">143</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>练习：返回公司工资最少的员工的last_name,job_id,salary</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,job_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees);</span><br></pre></td></tr></table></figure><p>练习：查询与141号员工的manager_id和department_id相同的其他员工的employee_id,manager_id,department_id</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,manager_id,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> manager_id <span class="operator">=</span> (    <span class="keyword">SELECT</span> manager_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">141</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">AND</span> department_id <span class="operator">=</span> (   <span class="keyword">SELECT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">141</span>)</span><br><span class="line"><span class="keyword">AND</span> employee_id <span class="operator">!=</span> <span class="number">141</span>;</span><br></pre></td></tr></table></figure><p>练习：查询最低工资大于50号部门最低工资的部门id和最低工资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id,<span class="built_in">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MIN</span>(salary) <span class="operator">&gt;</span>(   <span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">50</span>);</span><br></pre></td></tr></table></figure><p>练习：显示员工的employee_id,last_name和location.<br>其中，若员工department_id与location_id为1800的department_id相同，<br>则location为<code>canada</code>,其余为<code>usa</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,</span><br><span class="line"><span class="keyword">CASE</span> department_id <span class="keyword">WHEN</span> (<span class="keyword">SELECT</span> department_id</span><br><span class="line"> <span class="keyword">FROM</span> departments</span><br><span class="line"> <span class="keyword">WHERE</span> location_id <span class="operator">=</span> <span class="number">1800</span>) <span class="keyword">THEN</span> <span class="string">&#x27;Canada&#x27;</span></span><br><span class="line"> <span class="keyword">ELSE</span> <span class="string">&#x27;USA&#x27;</span> </span><br><span class="line"> <span class="keyword">END</span> </span><br><span class="line"> &quot;location&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h3 id="子查询中的空值问题"><a href="#子查询中的空值问题" class="headerlink" title="子查询中的空值问题"></a>子查询中的空值问题</h3><p>看一段代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="operator">=</span> (<span class="keyword">SELECT</span> job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Haas&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这段代码的意思是，先找一个叫Haas的员工的(工作id)job_id，然后在找和Haas的工作id相同的员工的工作id和名字<br>问题来了：其实这个公司没有叫Haas的人<br>那子查询查出来就是一个空值（没有结果）<br>然后整个查询查出来的也是空值，不会报错.</p><h3 id="非法使用子查询"><a href="#非法使用子查询" class="headerlink" title="非法使用子查询"></a>非法使用子查询</h3><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id);</span><br></pre></td></tr></table></figure><p>在这个例子的子查询（括号里的内容）中，查出来的内容是多行的.<br>但是where条件中用的是&#x3D;号，&#x3D;号是单行操作符。<br>最后程序报错</p><h3 id="多行子查询"><a href="#多行子查询" class="headerlink" title="多行子查询"></a>多行子查询</h3><p>多行子查询操作符:IN\ANY\ALL\SOME(同ANY)<br>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id);</span><br></pre></td></tr></table></figure><p>练习：返回其他job_id中比job_id为’IT_PROG’部门任一工资低的员工的员工号，姓名、job_id以及salary<br>首先：找到job_id为’IT_PROG’部门的工资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span>;</span><br></pre></td></tr></table></figure><p>然后：看剩下的条件.（返回其他job_id中）（任一工资低的员工的员工号，姓名、job_id以及salary）<br>（返回其他job_id中）：这句话的意思就是，在查出来的结果中，去掉job_id为’IT_PROG’的数据<br>（任一工资低的员工的员工号，姓名、job_id以及salary）：这句话，就是简单的查询<br>因为过滤条件是任一工资低的，所以用&lt;ANY<br>最后：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,job_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="operator">&lt;&gt;</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> salary <span class="operator">&lt;</span> <span class="keyword">ANY</span> (<span class="keyword">SELECT</span> salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span>);</span><br></pre></td></tr></table></figure><p>练习：返回其他job_id中比job_id为’IT_PROG’部门所有工资低的员工的员工号，姓名、job_id以及salary<br>和上一题比较，题目中的任一被改成所有了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,job_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="operator">&lt;&gt;</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> salary <span class="operator">&lt;</span> <span class="keyword">ALL</span> (<span class="keyword">SELECT</span> salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span>);</span><br></pre></td></tr></table></figure><p>练习：查询平均工资最低的部门id<br>先查出每个部门的平均工资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br></pre></td></tr></table></figure><p>然后在找最低的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(<span class="built_in">AVG</span>(salary))</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br></pre></td></tr></table></figure><p>这种写法是可以的，但是在MYSQL中不支持这样写，oracle可以这么写（付费无敌）</p><p>在MySQL可以要这么写<br>方式1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary) <span class="operator">=</span> (  <span class="keyword">SELECT</span> <span class="built_in">MIN</span>(avg_sal)</span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) avg_sal</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id) t_dept_avg_sal</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>1.先找出所有部门的平均工资，给平均工资重命名为avg_sal，然后把平均工资看成新的一张表。在看成新的一张表的时候，要给这张表起个别名（t_dept_avg_sal）<br>2.那们现在就可以FROM这张表，来求出其中avg_sal最少的部门了<br>3.求出来了最少的平均工资之后，只要用employees表中平均工资和求出来的最少平均工资相等作为过滤条件，就可以查到部门id了</p><p>方式2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary) <span class="operator">&lt;=</span> <span class="keyword">ALL</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) avg_sal</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id);</span><br></pre></td></tr></table></figure><p>解释：子查询查出了所有的部门的平均工资，那只要小于等于全部&lt;&#x3D;ALL（查出的所有的部门的平均工资）</p><h3 id="多行函数空值问题"><a href="#多行函数空值问题" class="headerlink" title="多行函数空值问题"></a>多行函数空值问题</h3><p>在多行函数的子查询中，也要小心不要出现空值.</p><h2 id="相关子查询"><a href="#相关子查询" class="headerlink" title="相关子查询"></a>相关子查询</h2><p>题目：查询员工中工资大于本部门平均工资的员工的last_name,salary和其department_id<br>方式1：使用相关子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,salary,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees e1</span><br><span class="line"><span class="keyword">WHERE</span> salary<span class="operator">&gt;</span>(  <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees e2</span><br><span class="line"><span class="keyword">WHERE</span> department_id<span class="operator">=</span>e1.department_id);</span><br></pre></td></tr></table></figure><p>方法2：在FROM中声明子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,salary,e1.department_id </span><br><span class="line"><span class="keyword">FROM</span> employees e1,(<span class="keyword">SELECT</span> department_id,<span class="built_in">AVG</span>(salary) dept_avg_sal </span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id) e2 </span><br><span class="line"><span class="keyword">WHERE</span> e1.`department_id` <span class="operator">=</span> e2.department_id </span><br><span class="line"><span class="keyword">AND</span> e2.dept_avg_sal <span class="operator">&lt;</span> e1.`salary`;</span><br></pre></td></tr></table></figure><p>题目：查询员工的id,salary,按照department_name 排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,salary </span><br><span class="line"><span class="keyword">FROM</span> employees e </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ( <span class="keyword">SELECT</span> department_name </span><br><span class="line">           <span class="keyword">FROM</span> departments d </span><br><span class="line">           <span class="keyword">WHERE</span> e.`department_id` <span class="operator">=</span> d.`department_id` );</span><br></pre></td></tr></table></figure><p>题目：若employees表中employee_id与job_history表中employee_id相同的数目不小于2，输出这些相同<br>id的员工的employee_id,last_name和其job_id</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,job_id</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">2</span> <span class="operator">&lt;=</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">            <span class="keyword">FROM</span> job_history j</span><br><span class="line">            <span class="keyword">WHERE</span> e.employee_id <span class="operator">=</span> j.employee_id</span><br><span class="line">   );</span><br></pre></td></tr></table></figure><h2 id="EXISTS-与-NOT-EXISTS关键字"><a href="#EXISTS-与-NOT-EXISTS关键字" class="headerlink" title="EXISTS 与 NOT EXISTS关键字"></a>EXISTS 与 NOT EXISTS关键字</h2><ul><li>关联子查询通常也会和 EXISTS操作符一起来使用，用来检查在子查询中是否存在满足条件的行。</li><li>如果在子查询中不存在满足条件的行：<ul><li>条件返回 FALSE</li><li>继续在子查询中查找</li></ul></li><li>如果在子查询中存在满足条件的行：<ul><li>不在子查询中继续查找</li><li>条件返回 TRUE NOT EXISTS关键字表示如果不存在某种条件，则返回TRUE，否则返回FALSE</li></ul></li></ul><p>练习：查询公司管理者的employee_id,last_name,job_id,department_id</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 方式<span class="number">1</span>：自连接</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> e2.employee_id,e2.last_name,e2.job_id,e2.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees e1 <span class="keyword">JOIN</span> employees e2 </span><br><span class="line"><span class="keyword">ON</span> e1.manager_id <span class="operator">=</span> e2.employee_id;</span><br><span class="line"></span><br><span class="line"># 方式<span class="number">2</span>：子查询</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,job_id,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> manager_id</span><br><span class="line">                     <span class="keyword">FROM</span> employees);</span><br><span class="line">                     </span><br><span class="line"># 方式<span class="number">3</span>：使用EXTSTS</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,job_id,department_id </span><br><span class="line"><span class="keyword">FROM</span> employees e1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line">              <span class="keyword">FROM</span> employees e2</span><br><span class="line">              <span class="keyword">WHERE</span> e1.employee_id <span class="operator">=</span> e2.manager_id);</span><br></pre></td></tr></table></figure><p>题目：查询departments表中，不存在于employees表中的部门的department_id和department_name</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id, department_name </span><br><span class="line"><span class="keyword">FROM</span> departments d </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line">                  <span class="keyword">FROM</span> employees </span><br><span class="line">                  <span class="keyword">WHERE</span> department_id <span class="operator">=</span> d.department_id);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改了某些环境变量后博客hexo: command not found,</title>
      <link href="/2022/06/13/%E4%BF%AE%E6%94%B9%E4%BA%86%E6%9F%90%E4%BA%9B%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%90%8E%E5%8D%9A%E5%AE%A2hexo-command-not-found/"/>
      <url>/2022/06/13/%E4%BF%AE%E6%94%B9%E4%BA%86%E6%9F%90%E4%BA%9B%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%90%8E%E5%8D%9A%E5%AE%A2hexo-command-not-found/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>修改了环境变量后，使用git bush heron弄博客时，报错了，弄不了.<br>然后再去<code>npm -v</code><br>又或者  <code>node -v</code><br>都是找不到，不是批处理文件什么什么的，反正就是命名在，但是用不了</p><h2 id="产生的原因"><a href="#产生的原因" class="headerlink" title="产生的原因"></a>产生的原因</h2><p>可能配置别的环境变量的时候把hexo、npm、node、的环境变量弄坏了吧.</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>首先你要找到自己hexo、npm、node、在哪里<br>应该是下载在一起的吧<br>我下载东西的时候喜欢把相关的东西下一起<br>也可能是这几个本来就是要下在一起的.具体我也忘记了，反正我的都在一起</p><p>修改环境变量<br><img src="/2022/06/13/%E4%BF%AE%E6%94%B9%E4%BA%86%E6%9F%90%E4%BA%9B%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%90%8E%E5%8D%9A%E5%AE%A2hexo-command-not-found/2022-06-13-17-38-56.png"><br><img src="/2022/06/13/%E4%BF%AE%E6%94%B9%E4%BA%86%E6%9F%90%E4%BA%9B%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%90%8E%E5%8D%9A%E5%AE%A2hexo-command-not-found/2022-06-13-17-39-42.png"><br><img src="/2022/06/13/%E4%BF%AE%E6%94%B9%E4%BA%86%E6%9F%90%E4%BA%9B%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%90%8E%E5%8D%9A%E5%AE%A2hexo-command-not-found/2022-06-13-17-43-20.png"></p><blockquote><p>最后附上我软件目录对应的文件图<br><img src="/2022/06/13/%E4%BF%AE%E6%94%B9%E4%BA%86%E6%9F%90%E4%BA%9B%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%90%8E%E5%8D%9A%E5%AE%A2hexo-command-not-found/2022-06-13-17-44-18.png"><br><img src="/2022/06/13/%E4%BF%AE%E6%94%B9%E4%BA%86%E6%9F%90%E4%BA%9B%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%90%8E%E5%8D%9A%E5%AE%A2hexo-command-not-found/2022-06-13-17-45-04.png"><br><img src="/2022/06/13/%E4%BF%AE%E6%94%B9%E4%BA%86%E6%9F%90%E4%BA%9B%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%90%8E%E5%8D%9A%E5%AE%A2hexo-command-not-found/2022-06-13-17-45-29.png"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 疑难解答 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java&#39; 不是内部或外部命令,也不是可运行的程序 或批处理文件。</title>
      <link href="/2022/06/13/java-%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4-%E4%B9%9F%E4%B8%8D%E6%98%AF%E5%8F%AF%E8%BF%90%E8%A1%8C%E7%9A%84%E7%A8%8B%E5%BA%8F-%E6%88%96%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E3%80%82/"/>
      <url>/2022/06/13/java-%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4-%E4%B9%9F%E4%B8%8D%E6%98%AF%E5%8F%AF%E8%BF%90%E8%A1%8C%E7%9A%84%E7%A8%8B%E5%BA%8F-%E6%88%96%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E3%80%82/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>1.确定安装好了java,<br>注意！java的安装程序是可以改路径的，但是java的路径是不可以改的</p><p>2.安装好了后使用<code>java -version</code>验证是否安装成功时出现<code>java&#39; 不是内部或外部命令,也不是可运行的程序 或批处理文件。</code></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>不同的人遇到的问题不同，我的解决方案不一定适用所有人.<br>注意：修改环境变量本身不会弄坏电脑.但是可能会导致别的某些程序不能用.<br>我在改变完java变量的时候出现了git bush hero,无法使用了.（已解决，在我的另外一篇疑难解答中）</p><p>安装好了后使用<code>java -version</code>验证是否安装成功时出现&#96;java’ 不是内部或外部命令,也不是可运行的程序 或批处理文件。<br>只要配置环境变量就可以了</p><h3 id="需要配置的第一个环境变量"><a href="#需要配置的第一个环境变量" class="headerlink" title="需要配置的第一个环境变量"></a>需要配置的第一个环境变量</h3><p><img src="/2022/06/13/java-%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4-%E4%B9%9F%E4%B8%8D%E6%98%AF%E5%8F%AF%E8%BF%90%E8%A1%8C%E7%9A%84%E7%A8%8B%E5%BA%8F-%E6%88%96%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E3%80%82/2022-06-13-17-15-43.png"><br><img src="/2022/06/13/java-%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4-%E4%B9%9F%E4%B8%8D%E6%98%AF%E5%8F%AF%E8%BF%90%E8%A1%8C%E7%9A%84%E7%A8%8B%E5%BA%8F-%E6%88%96%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E3%80%82/2022-06-13-17-17-14.png"></p><blockquote><p>一般来说java的安装路径都是一样的在<code>C:\Program Files\Java\jre1.8.0_321</code><br>后面的版本，不同的人不同.<br>怎么看自己的版本？<br>按照路径找到java,拿我的举例子<br><img src="/2022/06/13/java-%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4-%E4%B9%9F%E4%B8%8D%E6%98%AF%E5%8F%AF%E8%BF%90%E8%A1%8C%E7%9A%84%E7%A8%8B%E5%BA%8F-%E6%88%96%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E3%80%82/2022-06-13-17-22-23.png"><br><img src="/2022/06/13/java-%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4-%E4%B9%9F%E4%B8%8D%E6%98%AF%E5%8F%AF%E8%BF%90%E8%A1%8C%E7%9A%84%E7%A8%8B%E5%BA%8F-%E6%88%96%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E3%80%82/2022-06-13-17-19-46.png"></p></blockquote><h3 id="需要配置的第二个环境变量"><a href="#需要配置的第二个环境变量" class="headerlink" title="需要配置的第二个环境变量"></a>需要配置的第二个环境变量</h3><p>配置的变量值<code>.;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</code><br>注意:复制粘贴变量值的时候要复制全，开头的那两个标点也要<br><img src="/2022/06/13/java-%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4-%E4%B9%9F%E4%B8%8D%E6%98%AF%E5%8F%AF%E8%BF%90%E8%A1%8C%E7%9A%84%E7%A8%8B%E5%BA%8F-%E6%88%96%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E3%80%82/2022-06-13-17-26-38.png"></p><h3 id="关于需要配置的第三个环境变量"><a href="#关于需要配置的第三个环境变量" class="headerlink" title="关于需要配置的第三个环境变量"></a>关于需要配置的第三个环境变量</h3><p>在java6以上以后不需要配置这个环境变量了<br>这个环境变量变量叫<code>CLASSPATH</code><br>也有就是叫<code>CLASS</code>的<br>我不清楚<br>反正现在不需要这个了</p>]]></content>
      
      
      <categories>
          
          <category> 疑难解答 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux(Centos7)我的世界开服教程</title>
      <link href="/2022/06/11/linux-Centos7-%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E5%BC%80%E6%9C%8D%E6%95%99%E7%A8%8B/"/>
      <url>/2022/06/11/linux-Centos7-%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E5%BC%80%E6%9C%8D%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="基本软件、环境、需要"><a href="#基本软件、环境、需要" class="headerlink" title="基本软件、环境、需要"></a>基本软件、环境、需要</h2><p>一台云服务器，配置越高越好，最低2h4g吧，轻量云也可以，1h2g的实在太拉了<br>基本工具，Xshell、Xftp。你有别的功能类似的软解也可以.我用这个是因为免费好找，学习时用的也是这个</p><h3 id="Xshell、Xftp的下载使用"><a href="#Xshell、Xftp的下载使用" class="headerlink" title="Xshell、Xftp的下载使用"></a>Xshell、Xftp的下载使用</h3><p><a href="https://www.xshell.com/zh">NETSARNG中国官网</a>，这官网就是下Xshell、Xftp的<br>进入官网，往下翻到底，找到家庭&#x2F;学校免费<br><img src="/2022/06/11/linux-Centos7-%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E5%BC%80%E6%9C%8D%E6%95%99%E7%A8%8B/2022-06-11-11-45-00.png"><br>点进去填姓名和邮箱<br>姓名无所谓随便填<br>邮箱一定要你能收的到的<br>框框选择两者<br><img src="/2022/06/11/linux-Centos7-%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E5%BC%80%E6%9C%8D%E6%95%99%E7%A8%8B/2022-06-11-11-46-09.png"><br>填好选好点击下载，他会给你填的邮箱里发邮件，邮件里有下载链接，点进去下载，安装到自己喜欢的位置就完成了</p><h3 id="配置Xshell、Xftp"><a href="#配置Xshell、Xftp" class="headerlink" title="配置Xshell、Xftp"></a>配置Xshell、Xftp</h3><p>第一次打开Xshell会有一个对话框<br>我因为设置过所以有东西，正常是什么都没有<br>然后点击对话框里的新建<br><img src="/2022/06/11/linux-Centos7-%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E5%BC%80%E6%9C%8D%E6%95%99%E7%A8%8B/2022-06-11-11-51-39.png"><br>不小心关掉了也没事，或者没弹出这个也没事，单机这个就可以打开<br><img src="/2022/06/11/linux-Centos7-%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E5%BC%80%E6%9C%8D%E6%95%99%E7%A8%8B/2022-06-11-11-53-10.png"><br>点击新建后弹出对话框<br><img src="/2022/06/11/linux-Centos7-%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E5%BC%80%E6%9C%8D%E6%95%99%E7%A8%8B/2022-06-11-11-54-07.png"><br>这个对话框好多地方都可以打开，功能都一样的<br><img src="/2022/06/11/linux-Centos7-%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E5%BC%80%E6%9C%8D%E6%95%99%E7%A8%8B/2022-06-11-11-56-21.png"><br><img src="/2022/06/11/linux-Centos7-%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E5%BC%80%E6%9C%8D%E6%95%99%E7%A8%8B/2022-06-11-11-57-42.png"><br>协议：别动，默认就好<br>主机：你服务器的公网ip(在购买的云服务的控制台里有)<br>端口：默认就好<br>其他：你会设置就自己调调，不会默认就好</p><blockquote><p>Xftp大同小异</p></blockquote><p><img src="/2022/06/11/linux-Centos7-%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E5%BC%80%E6%9C%8D%E6%95%99%E7%A8%8B/2022-06-11-12-00-30.png"><br>用户名：linux创建的用户名，没创建就是root<br>密码：创建过用户名的应该知道密码，没创建的过得，去服务器控制台重置下密码在设置一下新密码就知道了（最好是使用在linux里新建用户的账户，别用root）<br>不会的建议先去把linux最最基本的东西学一下，类似windows的开机输入密码进入系统</p><p>（linux的root的密码在第一次用服务器是系统给的，服务器商家可能会发邮件告诉你root的密码，有的你自己去问他会发你。最好是自己重置下密码（在服务器控制台））</p><h2 id="开始开服"><a href="#开始开服" class="headerlink" title="开始开服"></a>开始开服</h2><h3 id="在linux安装java"><a href="#在linux安装java" class="headerlink" title="在linux安装java"></a>在linux安装java</h3><p>输入<br><code>yum list java-1.8*</code>:这个代码查看所有可以下载的java的版本<br>那我要下载的就是这个版本<br><img src="/2022/06/11/linux-Centos7-%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E5%BC%80%E6%9C%8D%E6%95%99%E7%A8%8B/2022-06-11-12-18-57.png"><br>输入<br><code>yum install -y java-1.8.0-openjdk.x86_64</code>:下载这个版本的java,如果害怕java名字打错，直接去上面复制下来就行</p><p>有的人执行这两句代码前面可能要加上<code>sudo</code><br><code>sudo yum list java-1.8*</code></p><p><code>sudo yum install -y java-1.8.0-openjdk.x86_64</code></p><p><code>java -version</code>：检测java是安装完成，成功安装会显示安装的版本等一堆信息.</p><p>输入完没错误，等待安装完毕</p><h3 id="开服工具"><a href="#开服工具" class="headerlink" title="开服工具"></a>开服工具</h3><p>linux也一样，需要使用开服工具.开服工具也有好多种不同的.<br>我先抱怨一下，我看教程的时候，不是直接说什么“哎，我这边有一个下好的开服工具，直接使用Xftpp拖过去”，然后在给你一段代码，然后服务器就开起来了.<br>要么就是，短短几分钟的视频，购买服务器的内容占了一半，回头回到服务器，下完java,反手多了一个server双击运行起来就结束了.<br>哥们，开服工具的选择下载教程呢？开服工具也不是直接下完就运行的吧，中间一段内容的缺失导致根本开不起服务器.<br>服务器最基本的，服务器-开服工具-管理界面-运行起来开服，谁不会啊，细节都没有这么搞.<br>我真的谢谢各位大佬.<br>还有一种操作就是，教程蛮详细的，可是，他在开服工具的配置，和修改服务器的配置是直接在自己的win10的系统上完成的，最后只是把文件传到linux里，涉及到的linux操作就是复制粘贴几个下载软件的代码而已，最后启动服务器.这有什么意思？<br>可能冒犯到各位大佬了<br>下面开始开服</p><blockquote><p>技术有限，暂时隔着了，不是说开不起来，而是没弄明白，（跟着视频教程复制粘贴回车并没有意思，要弄懂每一步的意义和每一个东西的作用和理解就难了）.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 游戏娱乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（Matery主题）hexo博客部署到Github，tags页面404，本地没问题.</title>
      <link href="/2022/06/10/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0Github%EF%BC%8Ctags%E9%A1%B5%E9%9D%A2404%EF%BC%8C%E6%9C%AC%E5%9C%B0%E6%B2%A1%E9%97%AE%E9%A2%98/"/>
      <url>/2022/06/10/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0Github%EF%BC%8Ctags%E9%A1%B5%E9%9D%A2404%EF%BC%8C%E6%9C%AC%E5%9C%B0%E6%B2%A1%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在本地测试和浏览完全没问题<br>上传部署到github<br>再次打开标签页里的某一个标签就404</p><p>！！！注意，我的情况是tags页面可以进，进去后里面部分标签能正常打开，有个别打开404 ！！！<br>什么意思呢，如图<br><img src="/2022/06/10/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0Github%EF%BC%8Ctags%E9%A1%B5%E9%9D%A2404%EF%BC%8C%E6%9C%AC%E5%9C%B0%E6%B2%A1%E9%97%AE%E9%A2%98/2022-06-10-11-56-24.png"><br><img src="/2022/06/10/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0Github%EF%BC%8Ctags%E9%A1%B5%E9%9D%A2404%EF%BC%8C%E6%9C%AC%E5%9C%B0%E6%B2%A1%E9%97%AE%E9%A2%98/2022-06-10-11-56-00.png"><br>看到tags页面是可以正常进入的，但是点击某一个标签的时候有的正常显示，有的是404<br><img src="/2022/06/10/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0Github%EF%BC%8Ctags%E9%A1%B5%E9%9D%A2404%EF%BC%8C%E6%9C%AC%E5%9C%B0%E6%B2%A1%E9%97%AE%E9%A2%98/2022-06-10-11-58-40.png"><br>而且在本地是没问题的，上传后就这样</p><h3 id="产生的原因"><a href="#产生的原因" class="headerlink" title="产生的原因"></a>产生的原因</h3><blockquote><p>暂时不知道</p></blockquote><h3 id="解决方案（非完美解决）"><a href="#解决方案（非完美解决）" class="headerlink" title="解决方案（非完美解决）"></a>解决方案（非完美解决）</h3><p>对所有用这个标签的文章进行重新分一个标签，以我的例子来讲<br>我本来的标签是C语言，C是大写的，我全部改成小写了<br><img src="/2022/06/10/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0Github%EF%BC%8Ctags%E9%A1%B5%E9%9D%A2404%EF%BC%8C%E6%9C%AC%E5%9C%B0%E6%B2%A1%E9%97%AE%E9%A2%98/2022-06-10-12-03-59.png"></p><blockquote><p>说到底，解决方法就是重新起个名</p></blockquote><h3 id="解决方案（完美）"><a href="#解决方案（完美）" class="headerlink" title="解决方案（完美）"></a>解决方案（完美）</h3><blockquote><p>暂时不知道</p></blockquote><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="解决方案一"><a href="#解决方案一" class="headerlink" title="解决方案一"></a>解决方案一</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>在本地测试浏览没问题<br>上传部署到github就打不开<br>注意：是整个博客页面都打不开</p><h4 id="产生的原因-1"><a href="#产生的原因-1" class="headerlink" title="产生的原因"></a>产生的原因</h4><p>你输入的网址有误</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>首先打开github<br>github打不开？<br>github使用魔法上网最快<br>不行就修改dns(自己百度教程，以后我可能会写)<br>进入github首页并登录<br>登录后在首页找到自己博客的正确网址<br><img src="/2022/06/10/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0Github%EF%BC%8Ctags%E9%A1%B5%E9%9D%A2404%EF%BC%8C%E6%9C%AC%E5%9C%B0%E6%B2%A1%E9%97%AE%E9%A2%98/2022-06-10-12-20-28.png"><br>解决成功，没解决看下面</p><h3 id="解决方案二"><a href="#解决方案二" class="headerlink" title="解决方案二"></a>解决方案二</h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><p>排除了上面的错误，还是404</p><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p>那多半是博客配置文件没配置到位<br>首先打开博客的配置文件<br><img src="/2022/06/10/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0Github%EF%BC%8Ctags%E9%A1%B5%E9%9D%A2404%EF%BC%8C%E6%9C%AC%E5%9C%B0%E6%B2%A1%E9%97%AE%E9%A2%98/2022-06-10-12-27-23.png"><br>打开找到下图选项，修改.<br>怎么修改？<br>这是博客搭建那部分的问题<br>这里出问题就说明博客搭建那里出问题了，直接回去重新看看细节到位没有<br><img src="/2022/06/10/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0Github%EF%BC%8Ctags%E9%A1%B5%E9%9D%A2404%EF%BC%8C%E6%9C%AC%E5%9C%B0%E6%B2%A1%E9%97%AE%E9%A2%98/2022-06-10-12-25-40.png"></p><h4 id="产生的原因-2"><a href="#产生的原因-2" class="headerlink" title="产生的原因"></a>产生的原因</h4><p>排除掉了网址输入错误的问题.<br>博客搭建过程出问题了，有的东西没按照教程来，或者没设置对.<br>有的非常自信的人就说：“我肯定没问题”<br>最好在检查一遍</p><h3 id="解决方案三"><a href="#解决方案三" class="headerlink" title="解决方案三"></a>解决方案三</h3><h4 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h4><p>在上面两个方案试过后还没解决</p><h4 id="产生的原因-3"><a href="#产生的原因-3" class="headerlink" title="产生的原因"></a>产生的原因</h4><p>最大的可能是搭建博客的过程中有错</p><h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><p>看着搭建博客的教程重新来一遍</p>]]></content>
      
      
      <categories>
          
          <category> 疑难解答 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机Linux_CenTOS7学习</title>
      <link href="/2022/06/09/%E8%99%9A%E6%8B%9F%E6%9C%BALinux-CenTOS7%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/06/09/%E8%99%9A%E6%8B%9F%E6%9C%BALinux-CenTOS7%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="初识linux"><a href="#初识linux" class="headerlink" title="初识linux"></a>初识linux</h2><p>第一次进linux界面<br><img src="/2022/06/09/%E8%99%9A%E6%8B%9F%E6%9C%BALinux-CenTOS7%E5%AD%A6%E4%B9%A0/2022-06-09-14-47-12.png"></p><p>打开对话框<br><img src="/2022/06/09/%E8%99%9A%E6%8B%9F%E6%9C%BALinux-CenTOS7%E5%AD%A6%E4%B9%A0/2022-06-09-14-48-42.png"></p><p>修改对话框字体大小<br><img src="/2022/06/09/%E8%99%9A%E6%8B%9F%E6%9C%BALinux-CenTOS7%E5%AD%A6%E4%B9%A0/2022-06-09-14-49-43.png"></p><blockquote><p>一些指令<br><code>clear</code>：清空屏幕<br><code>ls</code>:查找当前目录下的文件<br><code>su </code>- :把自己设为超级管理员<br><code>whoami</code>:查看当前自己的身份<br><code>nano /etc/soudoers </code>:用记事本的方式打开文件<br><code>set nu</code>:显示行数<br><code>EXIT</code>：退出<br><code>passwd</code>:修改当前用户密码<br><code>passwd *** </code>：修改指定用户密码<br><code>pwd</code>:显示当前所在文件路径<br><code>ls</code>：显示当前目录下的所有文件<br><code>ls -l</code>：显示当前目录下所有文件的详细信息<br><code>cd</code>：进入一个指定的目录<br><code>ls -la</code>:a表示显示当前目录的所有文件.包括隐藏文件<br><code>mkdir</code>:创建一个目录<br><code>touch</code>:创建一个文件<br><code>rm ****</code>:删除文件<br><code>rm -r ****</code>:删除目录</p></blockquote><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><p><code>d</code>:d开头，文件详细中的前缀,d开头表示他就是一个目录，目录就可以进入（使用cd）<br><code>-</code>：-开头，文件详细中的前缀，-开头表示他是一个</p><h3 id="修改自己的权限"><a href="#修改自己的权限" class="headerlink" title="修改自己的权限"></a>修改自己的权限</h3><p>1.把自己设为超级管理员<code>su -</code>输入root密码<br>2.用记事本的方法打开进入配置文件修改权限 <code>nano /etc/soudoers</code><br>3.修改权限<br><img src="/2022/06/09/%E8%99%9A%E6%8B%9F%E6%9C%BALinux-CenTOS7%E5%AD%A6%E4%B9%A0/2022-06-09-15-02-06.png"><br>4.ctrl+x（^x），然后输入y确认保存修改，回车退出<br>5.exit退出超级管理员模式</p><h3 id="修改root密码"><a href="#修改root密码" class="headerlink" title="修改root密码"></a>修改root密码</h3><p>1.进入超级管理员模式<code>su -</code>输入root密码<br>2.输入<code>passwd</code>,输入新密码（root密码），确认新密码<br>3.提示<code>swd: all authentication tokens updated successfully.</code>修改成功<br>4.exit退出超级用户<br>root一定不要和用户密码一样，而且root密码安全级别一定要比普通密码高<br>直接输入passwd默认修改的是当前用户的密码<br>想修改其他人的密码要在passwd后加上其他人的名字（passwd和名字之间要空格）</p><h3 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h3><p>暂时不用改</p><h3 id="网络连接"><a href="#网络连接" class="headerlink" title="网络连接"></a>网络连接</h3><h4 id="查看网络连接，网络信息，打开-x2F-关闭网络"><a href="#查看网络连接，网络信息，打开-x2F-关闭网络" class="headerlink" title="查看网络连接，网络信息，打开&#x2F;关闭网络"></a>查看网络连接，网络信息，打开&#x2F;关闭网络</h4><p><code>ping -c3 www.baidu.com</code><br>测试网络，-c是const的简写，3是测试几次，<a href="http://www.baidu.com是用来测试的网址,随便换成其他在运行的网站都可以/">www.baidu.com是用来测试的网址，随便换成其他在运行的网站都可以</a><br>-c如果没写就会一直测试持续下去，想要停止.就按ctrl+c停止</p><p><code>ifconfig</code>:查看网络信息</p><p><code>ifdown \*\*\*</code> :关闭网络，***是网络的名字，网络的名字怎么查？<br>输入ifconfig<br><img src="/2022/06/09/%E8%99%9A%E6%8B%9F%E6%9C%BALinux-CenTOS7%E5%AD%A6%E4%B9%A0/2022-06-09-17-58-31.png"><br>ens33就是网络名字<br>用不同NAT配置的人名字可能也会不一样</p><p>那现在要关闭网络输入<code>ifdown ens33</code> ,就好了,可能有人输入后提示错误，执行不了<br>那可能需要输入sudo<br><code>sudo ifdown ens33</code><br>关闭后在输入<code>ifconfig</code><br><img src="/2022/06/09/%E8%99%9A%E6%8B%9F%E6%9C%BALinux-CenTOS7%E5%AD%A6%E4%B9%A0/2022-06-09-18-01-39.png"><br>发现ens33里的ip地址没了，网络就关闭了</p><p><code>ifup</code>:打开网络<br>现在要打开网络<br>输入<code>sudo ifup ens33</code><br>提示没报错<br>在输入<code>ifconfig</code>查看网络信息<br>看到ens33里的ip地址有了，就说明连上网络了</p><h4 id="查看网络是否连接（第二种方法）"><a href="#查看网络是否连接（第二种方法）" class="headerlink" title="查看网络是否连接（第二种方法）"></a>查看网络是否连接（第二种方法）</h4><p>看系统右上角，网络连接上了就有图标没连接上就没有<br><img src="/2022/06/09/%E8%99%9A%E6%8B%9F%E6%9C%BALinux-CenTOS7%E5%AD%A6%E4%B9%A0/2022-06-09-18-06-57.png"><br><img src="/2022/06/09/%E8%99%9A%E6%8B%9F%E6%9C%BALinux-CenTOS7%E5%AD%A6%E4%B9%A0/2022-06-09-18-07-36.png"></p><h3 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h3><h4 id="官方下载软件"><a href="#官方下载软件" class="headerlink" title="官方下载软件"></a>官方下载软件</h4><p><code>sudo yum -y install  ****** </code><br><code>sudo</code>:提升权限<br><code>yum</code>:从指定的服务器下载安装包（官方）<br><code>-y</code>:在软件下载过程中，会问你是否需要下载，加上-y就是默认全部同意，不然需要手动选择yse或者no<br><code>intstall</code> :安装文件<br><code>*****</code> ：要下载的软件名字<br>注：为了保证软件运行的稳定和安全，有些新的软件使用yum从官方下载事可能会下载不到.明明看到别人在用，但是自己下载不到</p><h4 id="非官方下载软件"><a href="#非官方下载软件" class="headerlink" title="非官方下载软件"></a>非官方下载软件</h4><p><code>sudo yum -y install epel-****</code><br>多了个<code>epel</code>,加上<code>epel</code>就是从非官方下载</p><h3 id="配置编写C语言代码的环境和一些软件下载"><a href="#配置编写C语言代码的环境和一些软件下载" class="headerlink" title="配置编写C语言代码的环境和一些软件下载"></a>配置编写C语言代码的环境和一些软件下载</h3><p><code>sudo yum install -y vim</code>:下载vim<br><code>sudo yum install -y gcc</code>:下载gcc</p><h2 id="linux基本指令"><a href="#linux基本指令" class="headerlink" title="linux基本指令"></a>linux基本指令</h2><blockquote><p>clear：清屏</p></blockquote><blockquote><p>date：查看系统时间<br>data 参数：按照参数给的显示<br>%Y：年<br>%m：月<br>%d：日<br>%H：时<br>%M：分<br>%S:秒</p></blockquote><blockquote><p>reboot：重启</p></blockquote><blockquote><p>shutdown：关机<br>-h：把系统的服务停掉后立即关机<br>-r:把系统的服务停掉后重新启动<br>-t 描述：定时关机</p></blockquote><blockquote><p><code>su </code>- :把自己设为超级管理员</p></blockquote><blockquote><p><code>whoami</code>:查看当前自己的身份</p></blockquote><blockquote><p><code>nano /文件名/文件名 </code>:用记事本的方式打开文件</p></blockquote><blockquote><p><code>set nu</code>:显示行数</p></blockquote><blockquote><p><code>EXIT</code>：退出</p></blockquote><blockquote><p><code>passwd</code>:修改当前用户密码</p></blockquote><blockquote><p><code>passwd 用户名 </code>：修改指定用户密码</p></blockquote><blockquote><p><code>pwd</code>:显示当前所在文件路径</p></blockquote><blockquote><p>cd：切换目录<br>cd ..：切换到上一级目录<br>cd &#x2F;文件名&#x2F;文件名&#x2F;….:切换到指定文件目录（相对路径&#x2F;绝对路径）<br>cd ~：切换到当前用户的文件目录里</p></blockquote><blockquote><p>mkdir：文件名：创建一个目录<br>mddir：-p &#x2F;文件名&#x2F;文件名&#x2F;….：连续创建文件目录</p></blockquote><blockquote><p>touch 文件名：创建一个文件</p></blockquote><blockquote><p>rmdir：删除空目录<br>rmdir -p：当子目录被删除后，如果父目录变成空目录的话，就连父目录一起删除</p></blockquote><blockquote><p>rm 文件名：删除文件(单个空文件或目录)<br>rm -r 文件名：删除文件（该文件下的所有内容）（递归式删除）<br>rm -f 文件名：不询问是否删除该文件，直接删除文件<br>rm -i：删除前逐一询问是否删除</p></blockquote><blockquote><p>ls：查看当前目录下的文件列表<br>ls &#x2F;文件名&#x2F;文件名 ：查找指定目录下的文件列表<br>ls -l：查看当前目录下的文件的详细信息<br>ls -a：查看当前目录下的隐藏文件</p></blockquote><blockquote><p><code>sudo</code>:提升权限</p></blockquote><blockquote><p><code>yum</code>:从指定的服务器下载安装包（官方）</p></blockquote><blockquote><p><code>-y</code>:在软件下载过程中，会问你是否需要下载，加上-y就是默认全部同意，不然需要手动选择yse或者no</p></blockquote><blockquote><p><code>intstall</code> :安装文件</p></blockquote><blockquote><p><code>sudo yum -y install  软件名 </code>:下载软件</p></blockquote><blockquote><ul><li>：通配符</li></ul></blockquote><blockquote><p>man 指令名：可以理解为使用手册，查找命令怎么使用<br>man man :查看自己的使用方法</p></blockquote><blockquote><p>stat 文件名：查看文件详细信息</p></blockquote><blockquote><p>cp 拷贝的文件名 拷贝后的文件名：拷贝文件（如果输入的是路径就会在对应的路径发拷贝后的文件）（只输入文件名就会在当前目录放置拷贝后的文件）<br>cp 拷贝的文件名 .. ：拷贝文件到上级目录<br>cp -r 拷贝的文件名 拷贝后的文件名:递归式的拷贝一个目录<br>cp -f 拷贝的文件名 拷贝后的文件名：强制拷贝</p></blockquote><blockquote><p>&gt;：输出重定向（会覆盖原来的内容）（从键盘获取内容输出到文件里）<br>&gt;&gt;：追加输出重定向（在原来的内容上追加内容）（从键盘获取内容输出到文件里）<br>&lt;：输入重定向（从文件中获取内容输入到屏幕上）</p></blockquote><blockquote><p>cat:从键盘获取内容输出到屏幕上<br>cat 文件名：查看目标文件的内容（全部）,不可修改<br>cat -n 文件名：显示行号</p></blockquote><blockquote><p>mv 要剪切的文件名 剪切后文件放在哪个目录或者文件名：剪切目录、修改文件名<br>-f:强制<br>-f：如果有重名文件就询问是否覆盖</p></blockquote><blockquote><p>alias ‘自定义名字&#x3D;某条指令’：对一段指令进行重命名</p></blockquote><blockquote><p>top：性能分析工具<br>-u &lt;用户名&gt;：指定用户名<br>-p &lt;进程号&gt;：指定进程<br>-n &lt;次数&gt;:循环显示的次数</p></blockquote><blockquote><p>ping 网站：测试网络连接<br>-c数字：限制次数</p></blockquote><blockquote><p>ifconfig：显示网络信息</p></blockquote><blockquote><p>ifdown 网络名字：关闭网络</p></blockquote><blockquote><p>ifup 网络名字：打开网络</p></blockquote><blockquote><p>输入不完整命令+键盘上的TAB：命令自动补全<br>输入不完整的命令+双击TAB：显示出不完整命令的可能命令</p></blockquote><blockquote><p>ctrl+c：停止当前程序</p></blockquote><blockquote><p>ctrl+d：可以代替exid命令</p></blockquote><blockquote><p>echo 参数 内容：主要用于字符串的输出</p></blockquote><blockquote><p>find：查找<br>find ~&#x2F;你要在哪找（路径） -name test.c：这句话表示，你要在某个路径里用名字查找，查找一个叫test.c的文件</p></blockquote><blockquote><p>last：显示历史登录服务器的用户的信息<br>last | head -5：表示只输出last显示的前5行</p></blockquote><blockquote><p>export PATH&#x3D;$PATH:程序路径地址：添加环境变量</p></blockquote><blockquote><p>env：查看环境变量</p></blockquote><blockquote><p>which：查看可执行文件的位置</p></blockquote><blockquote><p>chmod：修改文件权限<br>chmod (u&#x2F;x&#x2F;o)(+&#x2F;-)(d&#x2F;b&#x2F;c&#x2F;p&#x2F;s&#x2F;l&#x2F;-) 要修改权限的文件名<br>u：拥有者<br>g：所属组<br>o：其他</p></blockquote><blockquote><p>sudo chown 要给谁（要给的用户的名字） 文件名：修改文件的拥有者<br>sudo chgrp：用户名:所属组 文件名：修改文件的拥有者和所属组<br>chgrp：修改所属组</p></blockquote><blockquote><p>useradd 用户名：创建用户<br>userdel -r 用户名：删除用户<br>-r：删除用户的时候同时也把用户的家（home）目录删除</p></blockquote><p><img src="/2022/06/09/%E8%99%9A%E6%8B%9F%E6%9C%BALinux-CenTOS7%E5%AD%A6%E4%B9%A0/2022-06-13-11-11-06.png"></p><h2 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h2><p>进入一个目录需要的是x权限，不是r和w权限</p><h3 id="文件信息的解读"><a href="#文件信息的解读" class="headerlink" title="文件信息的解读"></a>文件信息的解读</h3><blockquote><p>u：拥有者<br>g：所属组<br>o：其他</p></blockquote><p><img src="/2022/06/09/%E8%99%9A%E6%8B%9F%E6%9C%BALinux-CenTOS7%E5%AD%A6%E4%B9%A0/2022-06-14-11-32-27.png"><br><img src="/2022/06/09/%E8%99%9A%E6%8B%9F%E6%9C%BALinux-CenTOS7%E5%AD%A6%E4%B9%A0/2022-06-14-11-49-34.png"></p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><img src="/2022/06/09/%E8%99%9A%E6%8B%9F%E6%9C%BALinux-CenTOS7%E5%AD%A6%E4%B9%A0/2022-06-14-11-58-47.png"></p><h3 id="修改权限方法一"><a href="#修改权限方法一" class="headerlink" title="修改权限方法一"></a>修改权限方法一</h3><blockquote><p>根据需要修改的内容自行决定<br>chmod (u&#x2F;x&#x2F;o)(+&#x2F;-)(d&#x2F;b&#x2F;c&#x2F;p&#x2F;s&#x2F;l&#x2F;-) 要修改权限的文件名</p></blockquote><h3 id="修改权限方法二"><a href="#修改权限方法二" class="headerlink" title="修改权限方法二"></a>修改权限方法二</h3><p>方法一是用权限的缩写名改<br>方法二用8进制改</p><p>例如：拥有者的读写执行权限，允许是1不允许是0那么rwx就表示是111，换成八进制数就是7<br>举一反三：那rw-j就是110换成8进制数就是6，r–就是4.</p><p>有了上面的例子就可以直接<br><code>chmod 八进制数 文件名</code>：这种方式修改</p><p>举例，我要修改一个文件的权限为不管什么用户都可以读写执行<br><code>chmod 777 文件名</code></p><p>我要修改一个文件的权限为谁都不可以执行<br><code>chmod 000 文件名</code></p><h2 id="修改文件的拥有者"><a href="#修改文件的拥有者" class="headerlink" title="修改文件的拥有者"></a>修改文件的拥有者</h2><p>修改拥有者<br><code>sudo chown 要给谁（要给的用户的名字） 文件名</code><br>修改拥有者和所属组<br><code>sudo chgrp 用户名:所属组 文件名</code></p><h2 id="腾讯云服务器（linux-Centos7-6）"><a href="#腾讯云服务器（linux-Centos7-6）" class="headerlink" title="腾讯云服务器（linux_Centos7.6）"></a>腾讯云服务器（linux_Centos7.6）</h2><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>第一次进入服务器你的身份是lighthouse<br>需要创建新用户</p><blockquote><p>1.<code>su -</code>,把自己设置为超级用户<br> 切换超级用户会让你输入密码，那第一次密码是多少？（不管是输入密码，还是创建密码，修改密码，密码都是不会让你看见的，直接输入然后回车就行）<br> 腾讯云服务器没有默认密码，如果购买云服务器时没有手动设置，那么腾讯云系统会自动生成密码，并将默认密码发送到腾讯云账号的站内信中。云服务器创建后，自动生成的密码将通过站内信发送给您。也可登录云服务器CVM控制台重置密码。<br> 2.<code>su user ***</code>:创建自己的用户名<br> 3.<code>sudo passwd ***</code>:设置用户名密码<br> 4.重复输入密码<br> 5.<code>exit</code>退出超级用户模式<br> 6.<code>su - ***</code>:登录用户<br> 7.输入密码<br> 8.<code>whoami</code>:查看自己是谁.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AMD-V，此主机支持AMD-V但是AMD-V处于禁用状态，虚拟机，</title>
      <link href="/2022/06/09/AMD-V%EF%BC%8C%E6%AD%A4%E4%B8%BB%E6%9C%BA%E6%94%AF%E6%8C%81AMD-V%E4%BD%86%E6%98%AFAMD-V%E5%A4%84%E4%BA%8E%E7%A6%81%E7%94%A8%E7%8A%B6%E6%80%81%EF%BC%8C%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%8C/"/>
      <url>/2022/06/09/AMD-V%EF%BC%8C%E6%AD%A4%E4%B8%BB%E6%9C%BA%E6%94%AF%E6%8C%81AMD-V%E4%BD%86%E6%98%AFAMD-V%E5%A4%84%E4%BA%8E%E7%A6%81%E7%94%A8%E7%8A%B6%E6%80%81%EF%BC%8C%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>创建虚拟机时报错如图<br><img src="/2022/06/09/AMD-V%EF%BC%8C%E6%AD%A4%E4%B8%BB%E6%9C%BA%E6%94%AF%E6%8C%81AMD-V%E4%BD%86%E6%98%AFAMD-V%E5%A4%84%E4%BA%8E%E7%A6%81%E7%94%A8%E7%8A%B6%E6%80%81%EF%BC%8C%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%8C/2022-06-09-14-14-36.png"></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>去主板BIOS里开启SVM Mode选项</p><p>因为不同的主板，bios界面是不一样的.我这边就不放图了，但是大概的流程是一样的<br>先进入BIOS-&gt;找到SVM Mode选项，并开启，然后保存退出重启</p><p>SVM Mode在哪里，在OC的cpu选项里，在高级设置里，都有可能，不懂的人最好去搜索自己主板的bios视频或者图片看看.找自己主板的教程.<br>自己不懂的一定要搜教程看.虽然不至于电脑报废，但是手搓可能不知道碰到了什么东西，导致一些别的问题的出现，也是蛮麻烦的.</p>]]></content>
      
      
      <categories>
          
          <category> 疑难解答 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习（进阶）</title>
      <link href="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/"/>
      <url>/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><h3 id="算术操作符"><a href="#算术操作符" class="headerlink" title="算术操作符"></a>算术操作符</h3><h4 id><a href="#" class="headerlink" title="+"></a>+</h4><p>加号</p><h4 id="-1"><a href="#-1" class="headerlink" title="-"></a>-</h4><p>减号</p><h4 id="-2"><a href="#-2" class="headerlink" title="*"></a>*</h4><p>乘号</p><h4 id="x2F"><a href="#x2F" class="headerlink" title="&#x2F;"></a>&#x2F;</h4><p>除号</p><h4 id="-3"><a href="#-3" class="headerlink" title="%"></a>%</h4><p>取模（余）（余数）<br>什么意思？<br>举例说明：<br>10&#x2F;3=&#x3D;3余1，那10%3=&#x3D;1<br>10&#x2F;2=&#x3D;5余0，那10%2=&#x3D;0</p><p>你问负数怎么办？<br>举例说明：<br>-10%3=&#x3D;?<br>10%-3=&#x3D;?<br>先说明，在用负数取模的时候有两种算法，一种是truncate 除法，一种是floor 除法<br>不同的编译器用的算法不一样，所以不用去深究这方面的问题.了解知道编译器在面对负数取模的时候是怎么算出来的就好</p><blockquote><p>truncate 除法<br> 10 % （-3）&#x3D; 1 的计算结果如下：r &#x3D; 10 - (10 &#x2F; -3) * -3 &#x3D; 10 - (-3 x -3) &#x3D; 1<br> -10 % 3 &#x3D; -1 的计算结果如下：r &#x3D; -10 - (-10 &#x2F; 3) * 3 &#x3D; -10 - (-3 * 3) &#x3D; -1。</p></blockquote><blockquote><p>floor 除法<br> 10 % （-3）&#x3D; -2 的计算结果如下：r &#x3D; 10 - (10 &#x2F; -3) * -3 &#x3D; 10 - (-4 x -3) &#x3D; -2<br>-10 % 3 &#x3D; 2 的计算结果如下：r &#x3D; -10 - (-10 &#x2F; 3) * 3 &#x3D; -10 - (-4 * 3) &#x3D; 2。</p></blockquote><p>至少vs2022用的是truncate 除法.</p><p>还有模0<br>你自己想一想，你模0想干什么<br>模一个负数或者0有没有意义</p><h3 id="移位操作符"><a href="#移位操作符" class="headerlink" title="移位操作符"></a>移位操作符</h3><h4 id="左移操作符"><a href="#左移操作符" class="headerlink" title="左移操作符"></a>左移操作符</h4><p>&lt;&lt;<br>注：打代码时，输入法一定要英文的.输成书名号就不对了<br>左移操作符实际上操作的是被操作数对应的二进制<br>举例说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> b=a&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,b);<span class="comment">//4</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>a);<span class="comment">//2</span></span><br><span class="line">    <span class="comment">//移位操作符不会改变被操作数的值</span></span><br><span class="line">    returm <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>b是怎么变成4的，下面画图解释<br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-09-09-33-31.png"></p><p>负数怎么办？<br>这边用-1举例<br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-09-09-42-15.png"></p><blockquote><p>关于内存原反补的转换，在之前有讲，这里就不谈了.<br> 移位操作符实际操作的是二进制，所以不是二进制直接操作的就不能使用移位操作符，比如浮点数</p></blockquote><h4 id="右移操作符"><a href="#右移操作符" class="headerlink" title="右移操作符"></a>右移操作符</h4><p>&gt;&gt;<br>注意输入法的切换</p><p>右移操作符分为算数右移和逻辑右移</p><blockquote><p>1.算数右移—-右边丢弃左边补原来的符号位<br>2.逻辑右移—-右边丢弃，左边补0</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b=a&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,b);<span class="comment">//5</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>a);<span class="comment">//10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-09-10-01-32.png"></p><p>那就来个负数的，比如-1<br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-09-10-06-02.png"></p><p><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-09-10-10-08.png"></p><blockquote><p>根据实操<br>可以得出结论，vs2022用的是算数右移<br>移位操作符实际操作的是二进制，所以不是二进制直接操作的就不能使用移位操作符，比如浮点数</p></blockquote><h3 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h3><blockquote><p>&amp; —按位与  2个数的32位二进制进行比较，都是1输出1，其他输出0<br>  | —按位或  2个数的32位二进制比较，   有一个是1输出1，其他输出0<br>  ^ —按位异或 2个数的32位二进制比较，   相同为0，不同为1</p></blockquote><h3 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h3><blockquote><p>+&#x3D;<br> -&#x3D;<br> *&#x3D;<br> &#x2F;&#x3D;<br> &gt;&gt;&#x3D;<br> &lt;&lt;&#x3D;<br>  %&#x3D;<br> &amp;&#x3D;<br> |&#x3D;<br> ^&#x3D;</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a+=<span class="number">1</span> == a=a+<span class="number">1</span>;</span><br><span class="line">a-=<span class="number">1</span> == a=a<span class="number">-1</span>;</span><br><span class="line">a*=<span class="number">1</span> == a=a*<span class="number">1</span>;</span><br><span class="line">a/=<span class="number">1</span> == a=a/<span class="number">1</span>;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h3><h4 id="逻辑与"><a href="#逻辑与" class="headerlink" title="逻辑与"></a>逻辑与</h4><p><code>&amp;&amp;</code>:键盘上数字7下面那个符号<br>举例说明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="number">0</span> &amp;&amp; <span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="number">1</span> &amp;&amp; <span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="number">1</span> &amp;&amp; <span class="number">0</span> &amp;&amp; <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//输出2</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑与将输入的操作数进行比较，如果其中有一个为假，就不执行.0就是假，非0就是真.<code>NULL是一个（void*）0</code>,<code>EOF是-1</code> <code>&#39;\0&#39;是0</code></p><h4 id="逻辑或"><a href="#逻辑或" class="headerlink" title="逻辑或"></a>逻辑或</h4><p><code>||</code>：退格键下面那个<br>举例说明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="number">1</span> || <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="number">1</span> || <span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="number">0</span> || <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//输出1，2</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑或将输入的操作数进行比较，只要其中有一个为真，就执行</p><h3 id="条目操作符"><a href="#条目操作符" class="headerlink" title="条目操作符"></a>条目操作符</h3><h4 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h4><p><code>exp1?exp2:exp3</code><br>exp1表达式的结果决定最后运行的结果<br>举例说明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> a=<span class="number">1</span> &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">1</span> &lt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, b);</span><br><span class="line">  <span class="comment">//输出1，0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="逗号表达式"><a href="#逗号表达式" class="headerlink" title="逗号表达式"></a>逗号表达式</h4><p><code>exp1,exp2,exp3,....</code><br>表达式可以无限写下去<br>逗号表达式的值是最后一个表达式的值<br>举例说明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> a = (<span class="number">1</span>+<span class="number">2</span>,<span class="number">2</span>+<span class="number">5</span>,<span class="number">1</span><span class="number">-3</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a);</span><br><span class="line">  <span class="comment">//输出-2</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：逗号表达式最后输出的值是最后一个表达式的值<br>但是要注意一个问题，逗号表达式虽然是只输出最后一个表达式的值，但是题目中会出现这样的陷阱</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> b=<span class="number">2</span>;</span><br><span class="line">  <span class="type">int</span> c=<span class="number">3</span>;</span><br><span class="line">  <span class="type">int</span> d=<span class="number">4</span>;</span><br><span class="line">  a=(a=b+c,c=a+b,a=a+c);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a);</span><br><span class="line">  <span class="comment">//输出12</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>什么陷阱呢？<br>第一个是乱，好几个变量搞来搞去一定要弄清楚<br>第二个是，有人知道逗号表达式的值是最后一个表达式的值，所以前面看都不看直接就算a&#x3D;a+c;最后错了，因为前面的表达式进行了赋值，所以到最后a和c的值也会改变<br>第三点，从第二个点可以知道，逗号表达式里面的表达式运算过后是会改变变量的值的.<br>有的操作符不管你表达式怎么写，最后a还是等于0,c还是等于3.要注意.</p><h4 id="下标引用操作符"><a href="#下标引用操作符" class="headerlink" title="下标引用操作符"></a>下标引用操作符</h4><p><code>[]</code><br>没错，就是数组一直用的那个<br><code>arr[0]</code>:表示引用arr数组中下标为0对应的元素<br>不多说了</p><h4 id="函数调用操作符"><a href="#函数调用操作符" class="headerlink" title="函数调用操作符"></a>函数调用操作符</h4><p><code>()</code><br>没错，就是main()后边跟的这个符号</p><h4 id="结构体访问操作符"><a href="#结构体访问操作符" class="headerlink" title="结构体访问操作符"></a>结构体访问操作符</h4><h5 id="点操作符"><a href="#点操作符" class="headerlink" title="点操作符"></a>点操作符</h5><p><code>.</code><br>一个点，这边不太好说明，放到结构体那一块会容易理解<br>点操作符主要针对的是结构体变量</p><h5 id="箭头操作符"><a href="#箭头操作符" class="headerlink" title="箭头操作符"></a>箭头操作符</h5><p><code>-&gt;</code><br>也是放到结构体那一块会很好理解<br>箭头操作符主要针对结构体指针</p><h3 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h3><p>表达式求值的顺序一部分是由操作符的优先级和结合性决定<br>至于优先级，需要查表<br>有的表达式的操作数在求值的过程中可能需要转换为其他类型，比如从整形计算到小数的时候需要转换成浮点型</p><h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><p>涉及到的一个知识点：整形提升<br>整形提升：在表达式计算时，各种整型首先要提升为int类型，如果int类型不足以表示则要提升为unsigned int类型；然后执行表达式的运算。<br>例一</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> a=<span class="number">3</span>;</span><br><span class="line">  <span class="type">char</span> b=<span class="number">127</span>;</span><br><span class="line">  <span class="type">char</span> c=a+b;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, c);</span><br><span class="line">  <span class="comment">//输出-126</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么会这样呢？<br>从代码中可以解读出，a,b,c三个变量都是char类型的.最后是用%d的形式输出.<br>开始计算<br>那目前a在内存中的二进制补码是00000011，char类型只有8个字节<br>那b在内存中的二进制就是011111111<br>那么现在来到c&#x3D;a+b,从开头有说，表达式计算时，各种整形要提升为int类型.<br>那就提升<br>a提升变成00000000000000000000000000000011<br>b提升变成00000000000000000000000001111111<br>相加就变成00000000000000000000000010000010<br>但是c也是char类型的，所以在放到c里面的时候就会进行截断<br>那最后c里面存的就是10000010<br>当内存里面是这么存的时候，第一个1就表示的是符号位，也就是说10000010中左边的那个1表示的是符号位，不是数字<br>然后来到打印环节，打印我用的是%d打印，那就也要发生整形提升<br>如果符号位是1那就会在前面补1<br>如果符号位是0那就会在前面补0<br>c就变成11111111111111111111111110000010（补码）<br>要打印就要变成原码<br>c的反码11111111111111111111111110000001<br>c的原码10000000000000000000000001111110<br>最后输出的就是-126</p><p>例二</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> a=<span class="number">3</span>;</span><br><span class="line">  <span class="type">char</span> b=<span class="number">127</span>;</span><br><span class="line">  <span class="type">int</span> c=a+b;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, c);</span><br><span class="line">  <span class="comment">//输出130</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果说c是整形类型，那计算结果就不会有什么影响<br>%u输出无符号十进制整数</p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>char类型的取值范围是-128-127<br>为什么呢？<br>因为char类型的0的二进制是00000000<br>1的二进制是000000001<br>以此类推<br>推到01111111，也就是127.<br>在加1变成10000000<br>此时这个1就不是代表数字了，是符号位，那这个二进制怎么解读呢，难不成是-0？<br>其实是-128.就当做这是个规定，C语言中char类型的100000000就是-128，没有为什么.至于喜欢深究的就自己去研究吧<br>那10000000在加1变成10000001在加1变成10000010<br>所以最后结果char的取值范围是-128-127，一共256个数，没毛病.</p><h3 id="算数转换"><a href="#算数转换" class="headerlink" title="算数转换"></a>算数转换</h3><p>如果某个操作符的各个操作数属于不同的类型，那么除非其中一个操作数的转换为另一个操作数的类型，否则操作就无法进行<br>说人话：如果有几个不同类型的数进行计算，那就必须把这几个数转化成同一个类型<br>那向那个类型转换呢？<br>精度低的向精度高的转换<br>比如int和char进行计算，就需要先都变成int类型才开始计算<br>那int和float呢？这两个都是4字节啊，答案是，精度低的向精度高的转换<br>float的精度是大于int的.</p><h3 id="操作符的属性"><a href="#操作符的属性" class="headerlink" title="操作符的属性"></a>操作符的属性</h3><p>操作符有是哪个属性<br>优先级、结合性、是否控制求值顺序<br>优先级查表<br>两个相邻的操作符先执行哪个？<br>如果两者优先级相同，取决于他们的结合性</p><h2 id="调试技巧"><a href="#调试技巧" class="headerlink" title="调试技巧"></a>调试技巧</h2><p>掌握基本的快捷键<br>熟悉调试的方法，调试中有哪些问题<br>多刷题，多看书，多调试，多写代码<br>鹏哥推荐的书籍：<br>1.《c陷阱和缺陷》<br>2.《明解C语言》初级和进阶2版<br>3.《c和指针》<br>4.《比特c课件》<br>5.《C语言深度解剖》<br>6.《C primer plus》  太厚了容易放弃<br>7.谭浩强的C语言 —- 看起来通俗易懂，但是代码风格写的很差，只看他的语法，不模仿代码</p><h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><h3 id="整形家族"><a href="#整形家族" class="headerlink" title="整形家族"></a>整形家族</h3><p>char、short、int、long、longlong<br>unsigned - 无符号的<br>signed - 有符号的<br>数据在内存中是以二进制的方式进行存储<br>对于整数来说：<br>整数在内存中存储的二进制有三种表示形式<br>正整数：原码、反码、补码相同<br>负整数：原码、反码、补码要进行计算<br>按照数值的数据直接写出的二进制序列就是原码<br>原码的符号位不变，其他位按位取反，得到的是反码<br>反码+1，得到的是补码<br>整数在内存中存的是二进制的补码<br>在cpu中是没有减法器的，只有加法器，例如计算1-1，那么等于1+（-1）；在运算中是用补码进行运算<br>来看看下面的几个例子</p><p>int main()<br>{<br>    char a &#x3D; -1;<br>10000000000000000000000000000001   &#x2F;&#x2F;-1的原码<br>11111111111111111111111111111110   &#x2F;&#x2F;-1的反码<br>11111111111111111111111111111111   &#x2F;&#x2F;-1的补码<br>                        11111111   &#x2F;&#x2F;char a &#x3D; -1 中存的补码<br>11111111111111111111111111111111   &#x2F;&#x2F;打印的时候因为打印的是整形，所以需要整形提升.这里的是补码， 在打印的时候我们要的是原码<br>11111111111111111111111111111110   &#x2F;&#x2F;反码<br>10000000000000000000000000000001   &#x2F;&#x2F;原码，最后打印-1<br>signed char b &#x3D; -1;<br>10000000000000000000000000000001   &#x2F;&#x2F;-1的原码<br>11111111111111111111111111111110   &#x2F;&#x2F;-1的反码<br>11111111111111111111111111111111   &#x2F;&#x2F;-1的补码<br>                         11111111   &#x2F;&#x2F;signed char b &#x3D; -1;中存的补码<br>11111111111111111111111111111111   &#x2F;&#x2F;打印的时候因为打印的是整形，所以需要整形提升.这里的是补码， 在打印的时候我们要的是原码<br>11111111111111111111111111111110   &#x2F;&#x2F;反码<br>10000000000000000000000000000001   &#x2F;&#x2F;原码，最后打印-1<br>unsigned char c &#x3D; -1;<br>                        11111111    &#x2F;&#x2F;就算是unsigned，unsigned char c &#x3D; -1;中存的补码也是11111111<br>00000000000000000000000011111111    &#x2F;&#x2F;因为是无符号整形，所以前面补0 这里是补码。<br>00000000000000000000000011111111     &#x2F;&#x2F;因为要输出，所以要求出他的原码，又因为最高位是0，是个正数，正数的原反补相同.<br>00000000000000000000000011111111      &#x2F;&#x2F;最后输出255<br>printf(“%d%d%d”, a, b, c); &#x2F;&#x2F;输出 -1   -1    255<br>return 0;<br>}<br>看完例子后，第一个问题可能就是，为什么一开始-1的原码是32位的，不是创建的char a吗？<br>因为，从底层来看，是把-1放到char a里面，-1是32位就是32位，和创建的变量类型大小无关.但是把-1到char a里面就会被截断成8位<br>char到底是signed char还是unsigned char?<br>c语言标椎没有规定，取决于编译器<br>int 是signed int<br>short是signed short<br>%u — 打印无符号整数<br>int main()<br>{<br>    char a &#x3D; -128;<br>    &#x2F;&#x2F;10000000000000000000000010000000   -原<br>    &#x2F;&#x2F;11111111111111111111111101111111   -反<br>    &#x2F;&#x2F;11111111111111111111111110000000   -补<br>    &#x2F;&#x2F;                        10000000   -char a &#x3D; -128<br>    &#x2F;&#x2F;11111111111111111111111110000000   -整形提升   补<br>    &#x2F;&#x2F;11111111111111111111111110000000   -因为要打印的是无符号整数，所以编译器就认为第一个1是数值，而不是符号位 这里是补码<br>    &#x2F;&#x2F;11111111111111111111111110000000   -既然是个正数，所以第一个1不是符号位，因为补码码原码相同，所以直接打印，输出一个很大的数字  4294967168<br>    printf(“%u”, a);   &#x2F;&#x2F;%u是打印10进制无符号整数<br>    return 0;<br>}</p><p>int main()<br>{<br>    char a &#x3D; 128;<br>    &#x2F;&#x2F;00000000000000000000000100000000   - 原反补相同<br>    &#x2F;&#x2F;                       100000000   - char a &#x3D; 128<br>    &#x2F;&#x2F;11111111111111111111111100000000   - 整形提升 这里是补码<br>    &#x2F;&#x2F;11111111111111111111111100000000   -因为要打印的是无符号整数，所以编译器就认为第一个1是数值，而不是符号位 这里是补码<br>    &#x2F;&#x2F;11111111111111111111111100000000   - 因为是要输出无符号整形，所以第一个不是符号位，正数的原反补相同，所以输出一个很大的数字 4294967168<br>    printf(“%u”, a);<br>    return 0;<br>}<br>有符号的char取值范围是-128到127<br>内存中 10000000  会被直接解析成-128<br>char的取值范围其实可以理解成一个圈，具体看图<br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-15-21-27-34.png"><br>下面又有几个例子.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">9</span>; i &gt;= <span class="number">0</span>; i--)<span class="comment">//因为i是个无符号整数，而无符号整数肯定大于等于0，所以无限循环..</span></span><br><span class="line">&#123;                               </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, i);<span class="comment">//无限循环</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>怎么说呢？<br>当i&#x3D;0时<br>00000000000000000000000000000000<br>那在-1是？<br>0-1知道是-1吧<br>那这里的0-1也是-1<br>是-1那么在内存中存的二进制就是<br>10000000000000000000000000000001<br>又因为i是unsigned int类型的<br>所以10000000000000000000000000000001直接被认为是一个正整数<br>所以无限循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> a[<span class="number">1000</span>];</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = <span class="number">-1</span> - i;</span><br><span class="line">&#125;                           </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="built_in">strlen</span>(a)); <span class="comment">//输出255  </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>怎么说？<br>首先从0开始，也就是是arr数组下标为0的地方被放成-1，然后开始循环<br>一直循环，直到i&#x3D;255(为什么i是255？)自己思考看看<br>因为是从-1开始循环的<br>注意：是i&#x3D;&#x3D;255,但是数组下标为255的地方放的是-127<br>不明白就上去看看char的那个圆<br>当i&#x3D;256的时候，那数组下标256的地方放的是0，没错，是0；<br>而strlen就是遇到0就停下来，且这个0是不算在个数里面的<br>所以最后是255个<br>再次注意：这255个是strlen遇到0了所以只计算到255个，但是数组里面还是放了1000个数字<br>接下来又懵了，那从-1开始减，不就是-1~-127吗，然后就0了，怎么会是255个呢<br>注意：在计算机中，他看到的是二进制，而不是数字<br>也就是说-1-127其实是<br>10000001+（11111111）<br>也就是10000000是-128然后再减<br>-1-128<br>10000001+（10000000）<br>100000001这里是9位<br>而这个数组是char懂吧，前面这个1被抛弃了所以是1然后继续循环<br>那0是什么时候出现的呢？<br>-1-255<br>10000001+（11111111）<br>最后变成00000000</p><blockquote><p>当然在计算的时候肯定发生整形提升了，为了方便我这边就没写整形提升的详细过程.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i = <span class="number">0</span>;       </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; i++)     <span class="comment">//范围是0-255，一共有256个数，刚好等于255的时候在加一就变成0，所以死循环</span></span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello word %d\n&quot;</span>, count);    <span class="comment">//死循环</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义了一个unsigned char i<br>在循环到i&#x3D;255时，在加加，就又变成0了<br>所以死循环<br>至于原理，和上面是差不多的，就不解释了.</p><h3 id="浮点型家族"><a href="#浮点型家族" class="headerlink" title="浮点型家族"></a>浮点型家族</h3><p>xxxxxxxxxx40 1&#x2F;&#x2F;#include &lt;stdlib.h&gt;2&#x2F;&#x2F;void reverse(char* left,char *right)    &#x2F;&#x2F;字符串逆序3&#x2F;&#x2F;{4&#x2F;&#x2F;  while (left &lt; right) 5&#x2F;&#x2F;  {6&#x2F;&#x2F;      char tmp &#x3D; *left;7&#x2F;&#x2F;      *left &#x3D; <em>right;8&#x2F;&#x2F;      <em>right &#x3D; tmp;9&#x2F;&#x2F;      left++;10&#x2F;&#x2F;      right–;11&#x2F;&#x2F;  }12&#x2F;&#x2F;}13&#x2F;&#x2F;int main()14&#x2F;&#x2F;{15&#x2F;&#x2F;  char arr[100] &#x3D; { 0 };16&#x2F;&#x2F;  gets(arr);                 &#x2F;&#x2F;把输入的内容放到arr这个数组中17&#x2F;&#x2F;  int len &#x3D; strlen(arr);18&#x2F;&#x2F;  reverse(arr,arr+len-1);19&#x2F;&#x2F;  char</em> start &#x3D; arr;20&#x2F;&#x2F;  while (<em>start)              &#x2F;&#x2F;当</em>start是’\0’的时候循环就停下21&#x2F;&#x2F;  {22&#x2F;&#x2F;      char</em> end &#x3D; start;      23&#x2F;&#x2F;      while (*end!&#x3D; ‘ ‘&amp;&amp;*end!&#x3D;’\0’)    24&#x2F;&#x2F;      {25&#x2F;&#x2F;          end++;26&#x2F;&#x2F;      }27&#x2F;&#x2F;      reverse(start, end-1);28&#x2F;&#x2F;      if (*end &#x3D;&#x3D; ‘ ‘)29&#x2F;&#x2F;      {30&#x2F;&#x2F;          start &#x3D; end+1;31&#x2F;&#x2F;      }32&#x2F;&#x2F;      else33&#x2F;&#x2F;      {34&#x2F;&#x2F;          start &#x3D; end;35&#x2F;&#x2F;      }36&#x2F;&#x2F;  }37&#x2F;&#x2F;38&#x2F;&#x2F;  printf(“%s”, arr);39&#x2F;&#x2F;  return 0;40&#x2F;&#x2F;}c</p><blockquote><p>（-1）^S * M * 2 ^ E</p></blockquote><blockquote><p>（-1）是一个常数<br>S是0或1（二进制中的第一位）<br>当要存进去的数是正数，S就是1<br>当要存进去的数是负数，S就是0<br>反过来<br>当读取的二进制位中第一个二进制是0读出来的是正数<br>当读取的二进制位中第一个二进制是1读出来的是负数</p></blockquote><blockquote><p>M表示一个有效数字（用科学记数法记的数字）<br>科学计数法是什么？举个例子<br>123456可以被记成1.23456*10^5<br>但是这里的M是二进制的，那二进制变成科学计数法怎么变呢？<br>在举例<br>比如说5.5<br>5的二进制是00000101，应该是32位的，我就里就直接简略写了<br>00000101可以被记成101<br>还没完.5.5后面还有个0.5，这怎么算呢？<br>0.5换成二进制表示就是0.1<br>那么5.5换成二进制就是101.1，然后在换成科学计数法<br>101.1 &#x3D;&#x3D; 1.011*2^2<br>因为是二进制，所以后面跟的是2的2次方.<br>M就等于1.011</p></blockquote><blockquote><p>2是一个常数（也可以说是二进制的2）<br>E表示指数位由上面5.5的例子，那这里的E就是2</p></blockquote><blockquote><p>10进制数0.5是怎么变成0.1的呢？<br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-16-22-09-05.png"><br>接着提供下图给大家参考<br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-16-22-10-02.png"><br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-16-22-10-18.png"></p></blockquote><blockquote><p>然而根据上面的那几张图，又可以发现一些问题<br>由上表可见，十进制数0的下一位是0.0625。因此，这中间的小数， 就无法用小数点后4位数的二进制数来表示。同样，0.0625的下一位 数一下子变成了 0.125。这时，如果增加二进制数小数点后面的位 数，与其相对应的十进制数的个数也会增加，但不管增加多少位， 2 的－○○次幂怎么相加都无法得到0.1这个结果。实际上，十进制数 0.1 转换成二进制后，会变成 0.00011001100…（1100 循环）这样的 循 环小数 A。这和无法用十进制数来表示 1&#x2F;3 是一样的道理。1&#x2F;3 就是 0.3333…，同样是循环小数。<br>说人话：计算机并不是永远准确的<br>比如0.1累加100次后的结果是10，但是计算机算出来结果是10吗？实际上它计算出的结果是10.0000002<br>至于原因是什么呢？怎么避免这种问题呢？<br>我不打算深究这些问题</p></blockquote><h4 id="浮点数存入二进制"><a href="#浮点数存入二进制" class="headerlink" title="浮点数存入二进制"></a>浮点数存入二进制</h4><p>IEEE 754对有效数字M和指数E的规定。<br>1、有效数字M：<br>1&lt;&#x3D;M&lt;2,也就是说，M写成1.xxx……的形式，其中xxx……表示小数部分。</p><p>IEEE 754规定，在计算机内部保存M时，默认这个数的第一位总是1，因此可以被舍去，只保存小数部分。比如保存1.0110001101时，只保存0110001101，后面的位数补0就可以了，等到读取的时候，再把第一位的1补上去。</p><blockquote><p>说人话，既然二进制数换成科学计数法后，第一位肯定是1，那就在存入内存的时候直接把这个1去掉，计算的时候在补上就好了.<br>这样做有什么好处？<br>因为在内存中能存储的位置是有限的，少存这个一，就可以在多放一位有意义的数</p></blockquote><p>2、指数E:<br>首先，E为一个无符号整数（unsigned int）</p><p>如果E为8位，它的取值范围为0~255；如果E为11位，它的取值范围为0~2047。但是，我们知道，科学计数法是可以出现负数的，所以IEEE 754规定，存入内存的E是真实值加上一个中间数，对于8位的E，中间数是127，对于11位的E，中间数是1023。比如，26 的E是6，所以保存为32位浮点数时，必须保存为6+127&#x3D;133，即10000101。</p><blockquote><p>说人话：在内存空间中存E，E只可以是正数。但是呢，科学计数法中E可能是负数，比如10进制0.5换成二进制在换成科学计数法是1.0*2^-1,为了避免出现负数存进内存，所以要加上127或1023<br>比如10存进去，必须变成10+127&#x3D;137，就是10001001存进去<br>比如-1存进去，必须变成-1+127&#x3D;126，就是01111110存进去<br>这里我用的是float来举例的，float里E能放8位，中间数就是127，所以加127<br>如果是double，而double里E能放11位，中间数是1023，所以存到double里要加1023</p></blockquote><p><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-16-22-50-01.png"><br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-16-22-50-16.png"></p><h4 id="浮点数从二进制中取出"><a href="#浮点数从二进制中取出" class="headerlink" title="浮点数从二进制中取出"></a>浮点数从二进制中取出</h4><h5 id="分3种情况"><a href="#分3种情况" class="headerlink" title="分3种情况"></a>分3种情况</h5><p>1.E里面存的有0有1（正常情况）<br>就按照公式把内存中的二进制一一代入公式计算就好了</p><p>2.E里面存的全是0：此时浮点数的指数E等于（1-127）或（1-1023），有效数字不在加上第一位的1，而是还原为0.xxxxxx的小数，这样做是为了表示+-0，以及接近0的很小的数字</p><p>3.E里面存的全是1：如果有效数字全为0，表示+-无穷大（其符号位决定于S）</p><h3 id="大小端字节序"><a href="#大小端字节序" class="headerlink" title="大小端字节序"></a>大小端字节序</h3><blockquote><p>大端字节序：把数据的低位字节序的内容存放在高地址处，高位字节序的内容存放在低地址处<br>小端字节序：把数据的低位字节序的内容存放在低地址处，高位字节序的内容存放在高地址处</p></blockquote><p>写代码判断当前机器字节序是大端还是小端</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">check_sys</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">char</span>* p = (<span class="type">char</span>*)&amp;a;            </span><br><span class="line"><span class="keyword">return</span> *p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ret = check_sys();</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;小端&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;大端&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>怎么说？<br>看图<br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-15-22-23-44.png"><br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-15-23-00-42.png"></p><h3 id="构造类型-自定义类型：结构体类型（struct）、数组、枚举（enum）、联合体-union-、"><a href="#构造类型-自定义类型：结构体类型（struct）、数组、枚举（enum）、联合体-union-、" class="headerlink" title="构造类型-自定义类型：结构体类型（struct）、数组、枚举（enum）、联合体(union)、"></a>构造类型-自定义类型：结构体类型（struct）、数组、枚举（enum）、联合体(union)、</h3><h3 id="指针类型-int、char、float、void、"><a href="#指针类型-int、char、float、void、" class="headerlink" title="指针类型:int、char、float、void、"></a>指针类型:int<em>、char</em>、float<em>、void</em>、</h3><h3 id="空类型-void"><a href="#空类型-void" class="headerlink" title="空类型:void"></a>空类型:void</h3><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><h3 id="一维数组创建"><a href="#一维数组创建" class="headerlink" title="一维数组创建"></a>一维数组创建</h3><p>一维数组–就是平时创建的数组<br>数组–一种相同类型元素的集合.<br>数组是用下标（[]）来访问的，下标是从0开始<br><code>int n=1;int arr[n];</code>这么写是不行的，n是变量，[]里要求常量.这叫变长数组，变长数组在c99标椎才支持.<br>但是可以<code>define N 0;int arr[N]</code>是可以的.</p><h3 id="一维数组初始化"><a href="#一维数组初始化" class="headerlink" title="一维数组初始化"></a>一维数组初始化</h3><p><code>int arr[10]=&#123;1,2,3,4,5,6,7,8,9,10&#125;;</code>这叫完全初始化，创建一个数组，数组可以放10个元素，这10个元素是1，2，3，4，5，6，7，8，9，10.<br><code>int arr[10]=&#123;1,2,3,4,5&#125;;</code>这叫未完全初始化，创建一个数组，数组可以放10个元素，这10个元素是1,2,3,4,5,0,0,0,0,0,0.没有完全初始化的位置会自动补0<br><code>int arr[]=&#123;1,2,3,4,5&#125;;</code>如果这样写，那他会根据后面的内容自动帮你填上[]里的内容.也就是说<code>int arr[]=&#123;1,2,3,4,5&#125;;</code>&#x3D;&#x3D;<code>int arr[5]=&#123;1,2,3,4,5&#125;;</code></p><p><code>char ch[5]=&#123;&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;&#125;;</code>完全初始化，和上面一样，ch里的元素是’h’,’e’,’l’,’l’,’o’<br><code>char ch[5]=&#123;&#39;h&#39;,&#39;e&#39;,&#39;l&#39;&#125;;</code>未完全初始化，和上面一样，没初始化的位置自动补0，ch里的元素是’h’,’e’,’l’,0,0<br><code>char ch[]=&#123;&#39;h&#39;,&#39;e&#39;,&#39;l&#39;&#125;</code>和上面一样，根据后面的内容自动帮你填上，<code>char ch[]=&#123;&#39;h&#39;,&#39;e&#39;,&#39;l&#39;&#125;</code>&#x3D;&#x3D;<code>char ch[3]=&#123;&#39;h&#39;,&#39;e&#39;,&#39;l&#39;&#125;;</code></p><p><code>char ch[5]=&quot;hello&quot;;</code>字符串的初始化和上面的不同，字符串初始化最后会自动补上’\0’,但是如果位置不够.就不会补上’\0’<br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-17-15-17-37.png"><br>因为ch数组只给了5个空间，而后面的内容刚好占满了5个空间，那’\0’就没地方放了.所以打印的时候，没有’\0’就一直往后打印，直到遇到’\0’.<br><code>char ch[5]=&quot;hel&quot;;</code>这里就可以放的下’\0’了，’\0’也是要占一个空间的，如果说’\0’放进去还有空余的位置，那剩下的空余位置就会自动补0，此时这个ch里的元素是h,e,l,\0,0<br><code>char ch[]=&quot;hel&quot;</code>这个数组里的元素是h,e,l,\0,<code>char ch[]=&quot;hel&quot;</code>&#x3D;&#x3D;<code>char ch[4]=&quot;hel&quot;</code></p><p>数组的大小可以通过计算得到（sizeof）<br>用数组总大小除以数组中一个元素的大小就可以算出整个数组的元素个数，sizeof(arr)&#x2F;sizeof(arr[0]);<br>sizeof计算的时候会吧\0算进去，sizeof实际上是求数组大小，单位字节.<br>stelen求字符串长度，不会把\0算进去.</p><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>arr[行][列]<br>行可以省略，列不可以</p><h3 id="二维数组初始化"><a href="#二维数组初始化" class="headerlink" title="二维数组初始化"></a>二维数组初始化</h3><blockquote><p><code>int arr[3][3]=&#123;1,2,3,4,5,6,7,8,9&#125;;</code>完全初始化<br> <img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-17-15-55-14.png"></p></blockquote><blockquote><p><code>int arr[3][3]=&#123;1,2,3,4,5&#125;;</code>不完全初始化，剩下的位置自动补0<br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-17-16-01-08.png"></p></blockquote><blockquote><p><code>int arr[][3]=&#123;1,2,3,4,5,6,7,8,9&#125;;</code>行可以省略，因为就算你不知道有多少行，只要知道列，一列满了就会换行，可以算出有多少行<br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-17-16-04-53.png"></p></blockquote><blockquote><p><code>int arr[][3]=&#123;1,2,3,4&#125;;</code>会自动算出有几行<br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-17-16-08-41.png"></p></blockquote><blockquote><p><code>int arr[3][]=&#123;1,2,3,4,5,6,7,8,9&#125;;</code>没有列会报错<br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-17-16-06-12.png"></p></blockquote><blockquote><p><code>int arr[3][3]=&#123;&#123;1,2&#125;,&#123;3,4&#125;,&#123;5,6&#125;&#125;;</code>可以使用这样的语法给数组初始化<br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-17-16-20-19.png"></p></blockquote><blockquote><p><code>int ch[3][3]=&#123;&#39;a&#39;,&#39;b&#39;,&#39;c&#39;&#125;;</code>创建整形数组，不完全初始化，会直接一ASCLL码值的形式存进去，剩下位置补0<br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-17-16-11-57.png"></p></blockquote><blockquote><p><code>int ch[2][2]=&#123;&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;&#125;;</code>完全初始化，整形数组，ASCLL码值存进去<br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-17-16-14-47.png"></p></blockquote><blockquote><p><code>char ch[2][2]=&#123;&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;&#125;;</code>字符数组，完全初始化，未完全初始化一样的补0<br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-17-16-17-13.png"></p></blockquote><blockquote><p><code>char ch[2][2]=&quot;abcd&quot;;</code>报错<br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-17-16-21-24.png"></p></blockquote><blockquote><p>二维数组的数组名表示首元素地址<br>二维数组的首元素是第一行</p></blockquote><h2 id="数组名"><a href="#数组名" class="headerlink" title="数组名"></a>数组名</h2><p>数组名表示的是数组首元素的地址</p><blockquote><p>但是有两个例外<br>1.sizeof(数组名) - 数组名表示整个数组，计算的是整个数组的大小，单位是字节.<br>2.&amp;数组名 - 数组名表示整个数组，取出的是整个数组的地址<br>其他情况都是数组首元素地址</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> arr1[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>,arr);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>,&amp;arr);</span><br><span class="line">  <span class="comment">//打印的结果是一样的</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然打印的结果是一样的，其实本质上是不一样的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;----------\n&quot;</span>);</span><br><span class="line"><span class="comment">//打印的结果是一样的</span></span><br><span class="line"><span class="type">int</span>* p1 = arr;</span><br><span class="line"><span class="type">int</span>(*p2)[<span class="number">10</span>] = &amp;arr;</span><br><span class="line"><span class="comment">//但是存起来的方式是不一样的</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, p1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, p1+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;----------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, p2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, p2+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-17-13-30-44.png"><br>为什么呢？<br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-17-13-36-39.png"></p><p>下面看个例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="type">int</span>(*parr)[<span class="number">10</span>] = &amp;arr;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *((*parr) + i));    <span class="comment">//解引用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般来说，我们都是直接<code>int* parr =arr;</code><br>但是上面代码用了不太恰当的方式，用了一个数组指针来存arr,导致了下面解引用操作变得很复杂<br>parr是一个指针，指向arr这整个数组，parr指向的是整个arr数组<br>如果对其解应用*parr，那对应的是数组名，如果要打印arr数组里的内容没办法直接打印.<br>要在对其解应用<br>*((*parr) + i)，配合循环才能打印出数组的内容<br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-17-14-23-08.png"></p><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>指针是编程语言中的一个对象，利用地址，他的值直接指向存在电脑储存器中另一个地方的值.由于同过指针能找到锁需要的变量单元，可以说地址指向该变量单元，因此，将地址形象化的称为指针意思是通过他能找到以他为地址的内存单元<br>指针在32位机器上占4字节<br>指针在64位机器上占8字节<br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-17-09-52-15.png"><br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-17-10-05-39.png"><br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-17-10-21-36.png"><br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-17-10-26-18.png"></p><h3 id="指针类型的意义"><a href="#指针类型的意义" class="headerlink" title="指针类型的意义"></a>指针类型的意义</h3><p>1.指针类型决定了：指针解引用权限有多大<br>2.指针类型决定了，指针走一步，能走多远（步长）<br>举个例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> a = <span class="number">0x11223344</span>;</span><br><span class="line">  <span class="type">char</span>* pc = &amp;a;</span><br><span class="line">  *pc=<span class="number">0</span>;</span><br><span class="line">  <span class="comment">//这么操作过后a就变成了0x11223300</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-17-10-38-55.png"></p><h3 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h3><h4 id="1-指针未初始化"><a href="#1-指针未初始化" class="headerlink" title="1.指针未初始化"></a>1.指针未初始化</h4><p>就是指指针指向的位置是不可知的（随机的，不确定的，没有明确限制的）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> *p;<span class="comment">//指针没有初始化，默认为随机值</span></span><br><span class="line">  *p=<span class="number">20</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-指针越界访问"><a href="#2-指针越界访问" class="headerlink" title="2.指针越界访问"></a>2.指针越界访问</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="type">int</span> *p = arr;<span class="comment">//arr本身就是首地址，所以不用加&amp;</span></span><br><span class="line">  <span class="type">int</span> i=<span class="number">0</span>；</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    *p=i;<span class="comment">//这个循环一共循环了11次，但arr只有10个位置,访问了第11个位置，这就是指针越界</span></span><br><span class="line">    p++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-指针指向的空间释放"><a href="#3-指针指向的空间释放" class="headerlink" title="3.指针指向的空间释放"></a>3.指针指向的空间释放</h4><p>解释：就本来有个指针p，指向某个地址，这没问题，过了一会这个地址里的内容因为某些原因被释放了，被干掉了，那这个指针也变成了野指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="title function_">test</span><span class="params">()</span>                            </span><br><span class="line">&#123; <span class="comment">//创建一个test函数，在test函数中创建一个a，返回a的地址，回到主函数后用p来接收，最后解引用通过*p来改变a的值</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;                </span><br><span class="line"><span class="keyword">return</span> &amp;a;</span><br><span class="line">&#125;                                </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> * p = test();</span><br><span class="line">*p = <span class="number">20</span>;<span class="comment">//a的地址是会如实的放到p里，但是a出了test函数就被销毁了，这时再用*p=20，就是非法访问内存.</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里简说一下，会在动态内存开辟的时候讲<br>函数中的变量，用完就会被释放，这个函数用完，a里的内容会被释放，所以虽然指针指向他的地址，但是这个空间已经不归p指针了，这时p就是个野指针</p><h4 id="4-如何规避野指针"><a href="#4-如何规避野指针" class="headerlink" title="4.如何规避野指针"></a>4.如何规避野指针</h4><p>1.指针初始化<br>当前不知道p应该初始化为什么地址的时候（下面可能会初始化），直接先初始化为NULL .<code>int *p = NULL（空指针）</code>;<br>初始化成空指针的指针是不能访问的.不能用的.<br>2.小心指针越界<br>c语言本身是不会检查数据的越界行为的<br>3.指针指向空间释放的时候要及时把它置成NULL<br>4.指针使用之前检查有效性<br><code>if（p != NULL）</code>  判断一下能不能用，是不是空指针</p><h3 id="指针运算"><a href="#指针运算" class="headerlink" title="指针运算"></a>指针运算</h3><p>指针和指针相减的前提是：两个指针指向同一块空间<br>指针-指针得到的是两个指针之间的元素个数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">mian</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,&amp;arr[<span class="number">9</span>]-&amp;arr[<span class="number">0</span>]);<span class="comment">//输出9</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的9代表的是9个地址，也就是arr[9]和arr[0]差了9个地址<br>注意区分指针加减，和，指针加指针，指针减指针的区别<br>指针减指针得到的是两个指针之间的元素个数<br>指针加指针并没有什么用</p><h3 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h3><p>因为指针就是一个地址，那数组也是一个地址，所以可以写成</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> arr[]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="type">int</span> *P =arr;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>p[2]-&gt;*(p+2)</code><br><code>arr[2]-&gt;*(arr+2)-&gt;*(2+arr)-&gt;2[arr]</code><br><code>arr[2] &lt;==&gt; *(arr+2) &lt;==&gt; *(p+2) &lt;==&gt; *(2+p) &lt;==&gt; *(2+arr) &lt;==&gt; 2[arr]</code><br>这里只是示例可以这么写，如果实际编程的时候这么写，头都给你拧下来.</p><h3 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a>二级指针</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span>* pa=&amp;a;<span class="comment">//一级指针</span></span><br><span class="line">  <span class="type">int</span>** ppa=&amp;pa;<span class="comment">//二级指针</span></span><br><span class="line">  <span class="type">int</span>*** pppa =&amp;ppa;<span class="comment">//可以套娃套下去，但是一般二级就已经很麻烦了.</span></span><br><span class="line">  **ppa=<span class="number">0</span>;<span class="comment">//二级指针解应用要2颗*</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h3><p><code>int arr[10];</code> 整形数组 – 存放整形的数组就是整形数组<br><code>char ch[5];</code> 字符数组 - 存放的是字符</p><p>指针数组  –存放指针的数组<br><code>int * parr[] ;</code> 整形指针的数组<br><code>char * pch[] ;</code>字符指针的数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="number">30</span>;</span><br><span class="line"><span class="type">int</span>* arr[<span class="number">3</span>]=&#123;&amp;a,&amp;b,&amp;c&#125;;<span class="comment">//存放整形指针的数组  //非常挫的写法</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, *(arr[i])); <span class="comment">//输出10,20,30</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line"><span class="type">int</span> b[] = &#123; <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>, &#125;;</span><br><span class="line"><span class="type">int</span> c[] = &#123; <span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span> &#125;;</span><br><span class="line"><span class="type">int</span>* arr[<span class="number">3</span>] = &#123; a,b,c &#125;;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *(arr[i] + j));<span class="comment">//输出1 2 3 4 5 </span></span><br><span class="line">&#125;                                 <span class="comment">//   2 3 4 5 6 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);                     <span class="comment">//   3 4 5 6 7</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符指针"><a href="#字符指针" class="headerlink" title="字符指针"></a>字符指针</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *p = <span class="string">&quot;hell&quot;</span>;</span><br><span class="line">  <span class="type">char</span> arr[]=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,p);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,arr);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面程序中，虽然都能打印出来hello<br>但是在本质上是不一样的.<br>char*p只是把hello中h的地址放到了p里<br>char arr[]是确确实实的吧“hello”放进了arr里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> str1[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> str2[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span>* str3 = <span class="string">&quot;hello&quot;</span>; <span class="comment">//常量字符串</span></span><br><span class="line"><span class="type">char</span>* str4 = <span class="string">&quot;hello&quot;</span>; <span class="comment">//常量字符串</span></span><br><span class="line"><span class="keyword">if</span> (str1 == str2)  <span class="comment">//不管放的内容一不一样，一个新的数组会开辟一个新空间，所以1和2不同</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1和2相同\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1和2不同\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (str3 == str4)   </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3和4相同\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3和4不同\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//输出1和2不同，3和4相同</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为str1和str2是两个数组，既然是两个数组，那肯定开辟了两个地址.虽然str1和str2里面的内容是一样.但是对应的地址是不同的<br>而str3和str4,都指向了h的地址.str3和str4都h的地址，所以相同</p><h3 id="数组指针"><a href="#数组指针" class="headerlink" title="数组指针"></a>数组指针</h3><p>指针数组：有一个数组，数组里的内容是指针<br>数组指针：有一个指针，该指针指向的是一个数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="comment">//parr就是一个数组指针</span></span><br><span class="line"><span class="type">int</span>(*parr)[<span class="number">10</span>] = &amp;arr;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span>* d[<span class="number">5</span>];</span><br><span class="line"><span class="type">double</span>* (* pd)[<span class="number">5</span>] = &amp;d;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用<code>double* d[5];</code>举例<br>d[5]是一个数组，里面放的是double<em>类型的元素<br>要是用指针把这个数组存起来，首先要创建一个指针(*pd)<br>注意：pd不是一个指针，加上*才是一个指针。<br>然后加上[],加上[]之后说明是一个数组<br>[]里写多少呢？<br>因为double</em> d[5],所以[]里写5<br>又因为d数组是double*类型的，就是说pd指向的数组内容是double*所以最后<br><code>double* (* pd)[5] = &amp;d;</code></p><blockquote><p>指针数组是一个数组<br>数组指针是一个指针</p></blockquote><p>看一个例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span>(*p)[<span class="number">5</span>], <span class="type">int</span> r, <span class="type">int</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; r; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; c; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, * (*(p + i) + j));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>] = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; ,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125; ,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125; &#125;;</span><br><span class="line">print(arr, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二维数组传参，然后用数组指针接收.要打印怎么打印呢？<br>二维数组的数组名是首元素地址，二维数组的首元素地址是第一行<br>二维数组作为参数传过去以后用（<em>p）接收以后怎么表示第一行？<br>p就表示的第一行，那只要对p进行加减就是二维数组第一行加减了<br>所以p+i,因为p+i是一起的所以拿括号包起来（p+i）<br>此时（p+i）就相当于arr[3][5]中的arr[3]<br>然后在后面+j,就相当于[5]<br>((p+i)+j)&#x3D;&#x3D;arr[i][j]<br>接着就是解引用</em>（（p+i）+j）;</p><p><code>int arr[5]</code>：数组<br><code>int *parr[5]</code>：指针数组<br><code>int (*parr)[10]</code>数组指针</p><blockquote><p><code>int (*parr[10])[5]</code>：parr3是一个存放数组指针的数组，该数组能存放10个数组指针，每个数组指针能够指向一个数组，数组5个元素每个元素是int类型<br>什么意思呢？<br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-19-17-52-08.png"></p></blockquote><h3 id="数组参数、指针参数"><a href="#数组参数、指针参数" class="headerlink" title="数组参数、指针参数"></a>数组参数、指针参数</h3><h4 id="一维数组传参"><a href="#一维数组传参" class="headerlink" title="一维数组传参"></a>一维数组传参</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> arr[])</span><span class="comment">//可以这么写</span></span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> arr[<span class="number">10</span>])</span><span class="comment">//可以这么写</span></span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>* arr)</span><span class="comment">//可以这么写</span></span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test2</span><span class="params">(<span class="type">int</span>* arr[<span class="number">20</span>])</span><span class="comment">//可以这么写</span></span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test2</span><span class="params">(<span class="type">int</span>** arr)</span><span class="comment">//可以这么写</span></span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">mian</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span>* arr2[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">test (arr);</span><br><span class="line">test(arr2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二维数组传参"><a href="#二维数组传参" class="headerlink" title="二维数组传参"></a>二维数组传参</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> arr[<span class="number">3</span>][<span class="number">4</span>])</span><span class="comment">//正确</span></span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> arr[][])</span><span class="comment">//错误，可以省略行，不能省略列</span></span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> arr[][<span class="number">5</span>])</span><span class="comment">//正确</span></span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//总结：二维数组传参，函数形参的设计只能省略第一个[]的数字</span></span><br><span class="line"><span class="comment">//因为对一个二维数组，可以不知道有多少行，但必须知道一行有多少元素</span></span><br><span class="line"><span class="comment">//这样才方便计算</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>* arr)</span><span class="comment">//不行，这样实际接收到的的arr[3],接收到的是第一行的地址</span></span><br><span class="line">&#123;<span class="comment">//接收到的是一个一维数组，二维数组怎么能用一维数组接收呢</span></span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>* arr[<span class="number">5</span>])</span><span class="comment">//不行</span></span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>(*arr)[<span class="number">5</span>])</span><span class="comment">//正确</span></span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>** arr)</span><span class="comment">//不行</span></span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">test(arr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二级指针传参"><a href="#二级指针传参" class="headerlink" title="二级指针传参"></a>二级指针传参</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>** ppa)</span></span><br><span class="line">&#123;</span><br><span class="line">**ppa = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* pa = &amp;a; <span class="comment">//一级指针</span></span><br><span class="line"><span class="type">int</span>** ppa = &amp;pa; <span class="comment">//二级指针</span></span><br><span class="line"><span class="comment">//如果函数里接收的是二级指针，那么可以传那些参数过去呢</span></span><br><span class="line">test(ppa); <span class="comment">//传二级指针自己肯定没问题</span></span><br><span class="line"><span class="comment">//test(&amp;pa) //可以传一级指针变量的地址</span></span><br><span class="line"><span class="comment">//int* arr[10]=&#123;0&#125;;</span></span><br><span class="line"><span class="comment">//test(arr)  //可以传存放一级指针的数组</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, **ppa);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><p>函数指针：指向函数的指针，存放函数地址的指针</p><blockquote><p>数组名 !&#x3D; &amp;数组名<br>函数名 &#x3D;&#x3D; &amp;函数名</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">ADD</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//pf是一个函数指针变量</span></span><br><span class="line"><span class="type">int</span> (*pr)(<span class="type">int</span>,<span class="type">int</span>) = &amp;ADD;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">add(<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;add); <span class="comment">//取地址函数名，就是取得函数的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, add); <span class="comment">//和上面结果一样</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> (*pf)(<span class="type">int</span>, <span class="type">int</span>) = &amp;add; <span class="comment">//pf是一个函数指针</span></span><br><span class="line"><span class="type">int</span> (*pf)(<span class="type">int</span>, <span class="type">int</span>) = add;  <span class="comment">//和上面一样</span></span><br><span class="line"><span class="type">int</span> ret=(*pf)(<span class="number">3</span>, <span class="number">5</span>); <span class="comment">//函数指针解应用</span></span><br><span class="line"><span class="type">int</span> ret = pf(<span class="number">3</span>, <span class="number">5</span>); <span class="comment">//这样使用也没问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//甚至这样</span></span><br><span class="line"><span class="type">int</span> ret=(*******pf)(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">//这个*只是为了方便理解，有没有和有多少个都一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//但是这样不行</span></span><br><span class="line"><span class="type">int</span> ret = *pf(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">//这样写就变成了，先调用函数，算出结果8，然后对8进行解应用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (*pf)(<span class="number">3</span>, <span class="number">5</span>)); <span class="comment">//链式访问</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ret);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面看一个代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">(*(<span class="type">void</span>(*)())<span class="number">0</span>)();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解读这段代码<br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-23-12-45-33.png"><br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-23-12-48-46.png"></p><p>在来一个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">void</span> (*signal(<span class="type">int</span>, <span class="type">void</span>(*)(<span class="type">int</span>)))(<span class="type">int</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解读<br>1.signal先和（）结合，说明signal是一个函数<br>2.signal函数有2个参数，一个的整形，一个是函数指针<br>signal里的函数指针指向参数为int，返回值是void的函数<br>3.signal函数的返回类型也是一个函数指针<br>该函数指针指向参数为int，返回值是void的函数<br>signal是一个函数声明<br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-23-13-57-30.png"><br>换一种方式理解<br>这个函数还可以写成<br><code>void(*)(int)signal(int,void(*)(int));</code><br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-23-14-02-03.png"></p><blockquote><p>这样看更好理解，但是语法规则不能这么写，只能用开头那种写法<br>也就是<code>void (*signal(int, void(*)(int)))(int)</code></p></blockquote><blockquote><p>虽然语法不支持这么写，但是我们可以对这个代码进行简化<br>怎么简化？<br>typedef - 对类型进行重定义（重命名）<br><code>typedef void(*)(int) pfun_t</code> - 把<code>void(*)(int)</code>这个函数指针类型重命名为pfun_t<br>但是呢，上面这种写法是错误的<br>要写成这样<code>typedef void(*pfun_t)(int)</code><br>那么现在<code>void(*)(int)signal(int,void(*)(int));</code>这个代码就可以写成<code>pfun_t signal(int,pfun_t)</code></p></blockquote><h3 id="函数指针数组"><a href="#函数指针数组" class="headerlink" title="函数指针数组"></a>函数指针数组</h3><p>函数指针数组：存放函数指针的数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Div</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x / y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> (*pf1)(<span class="type">int</span>,<span class="type">int</span>) = add;</span><br><span class="line"><span class="comment">//int (*pf1)(int,int) = &amp;add;//和上面效果一样的</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> (*pf2)(<span class="type">int</span>, <span class="type">int</span>) = sub;</span><br><span class="line"><span class="comment">//int (*pf2)(int, int) = &amp;sub;//和上面一样</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> (*pfarr[<span class="number">2</span>])(<span class="type">int</span>, <span class="type">int</span>) = &#123; add,sub &#125;;  <span class="comment">//函数指针数组</span></span><br><span class="line"><span class="comment">//int(*pfarr[2])(int, int) = &#123; pf1,pf2 &#125;; //和上面效果一样</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着来实现一个加减乘除的计算器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Div</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x / y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1.add\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2.sub\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3.mul\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;4.div\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">&#123;</span><br><span class="line">menu();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请选择：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line"><span class="keyword">switch</span> (input)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入两个操作数:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">ret = add(x, y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ret);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入两个操作数:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">ret = sub(x, y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ret);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入两个操作数:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">ret = mul(x, y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ret);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入两个操作数:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">ret = Div(x, y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ret);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;选择错误，重新选择&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (input);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但是随着计算器功能的不断增加，需要的case也会越来越多.代码就会冗余.那么怎么解决这个问题呢？</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Div</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x / y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1.add\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2.sub\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3.mul\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;4.div\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//计算器 - 实现整形的 加 减 乘 除</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//pfarr就是函数指针数组</span></span><br><span class="line"><span class="type">int</span> (*pfarr[<span class="number">5</span>])(<span class="type">int</span>, <span class="type">int</span>) = &#123; <span class="literal">NULL</span>,add,sub,mul,Div &#125;;</span><br><span class="line">menu();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请选择：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line"><span class="keyword">if</span> (input &gt;= <span class="number">1</span> &amp;&amp; input &lt;= <span class="number">4</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入两个操作数：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">ret = (pfarr[input])(x, y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (input == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;程序退出\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;选择错误，重新选择\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (input);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用函数指针数组就可以解决这个问题.</p></blockquote><h3 id="函数指针数组指针"><a href="#函数指针数组指针" class="headerlink" title="函数指针数组指针"></a>函数指针数组指针</h3><p>函数指针数组：存放函数指针的数组<br>函数指针数组指针：指向函数指针数组的指针</p><p>先来看看之前的例子<br>整形数组：<code>int arr1[10]</code><br>整形数组指针：<code>int(*parr1)[10]=&amp;arr</code></p><p>整形指针数组：<code>int*arr2[10]</code><br>整形指针数组指针：<code>int*(*parr2)[10]=&amp;arr</code></p><p>函数指针：<code>int(*p3)(int,int)</code><br>函数指针数组：<code>int(*p4[10])(int,int)</code><br>函数指针数组指针：<code>int(*(*p5)[10])(int,int)=&amp;p4</code></p><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>回调函数就是一个通过函数指针调用的函数，如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，这就是回调函数<br>什么意思？<br>下面举例说明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Div</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x / y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1.add\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2.sub\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3.mul\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;4.div\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0.exit\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">calc</span><span class="params">(<span class="type">int</span>(*p)(<span class="type">int</span>, <span class="type">int</span>))</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入两个操作数:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"><span class="type">int</span> ret = p(x, y);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//计算器 - 实现整形的 加 减 乘 除</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">menu();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请选择：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line"><span class="keyword">if</span> (input == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;程序结束\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (input)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">ret = calc(add);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ret);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">ret = calc(sub);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ret);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">ret = calc(mul);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ret);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">ret = calc(Div);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ret);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;选择错误，重新选择\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (input);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面画图解释<br><img src="/2022/06/08/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/2022-06-23-17-23-35.png"></p><h4 id="回调函数-qsort"><a href="#回调函数-qsort" class="headerlink" title="回调函数 - qsort"></a>回调函数 - qsort</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">qsort</span> <span class="params">(<span class="type">void</span>* base,</span></span><br><span class="line"><span class="params"> <span class="type">size_t</span> num, </span></span><br><span class="line"><span class="params"> <span class="type">size_t</span> size,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> (*compar)(<span class="type">const</span> <span class="type">void</span>*,<span class="type">const</span> <span class="type">void</span>*))</span>;</span><br></pre></td></tr></table></figure><p><code>void* base</code>：base表示待排序数据中第一个对象的地址<br><code>size_t num</code>：排序数据元素的个数<br><code>size_t size</code>：数据中一个元素的大小，单位是字节<br><code>int (*compar)(const void*,const void*))</code>：用来比较待排序数据中的2个元素的函数</p><blockquote><p>主要讲解这个形参<code>int (*compar)(const void*,const void*))</code><br>qsort就是根据这个函数的返回值进行排序</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//整数比较</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp_int</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *(<span class="type">int</span>*)e1 - *(<span class="type">int</span>*)e2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印数组内容</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz ; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//整形数组的排序</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">9</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">45</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">558</span>,<span class="number">1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">qsort(arr, sz, <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]), cmp_int);</span><br><span class="line">print(arr, sz);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>不知道各位在使用的时候发现了没，就是cmp_int这个函数，我们好像并没有把数组传到cmp_int里，但是他却知道了.<br>关于这点，那肯定就是在qsort函数内部实现的.至于qsort函数是怎么实现的，我不知道，暂时没研究，也不打算研究.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//按照年龄来排序</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sort_by_age</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ((<span class="keyword">struct</span> Stu*)e1)-&gt;age - ((<span class="keyword">struct</span> Stu*)e2)-&gt;age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按照名字来排序</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sort_by_name</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">strcmp</span>(((<span class="keyword">struct</span> Stu*)e1)-&gt;name ,((<span class="keyword">struct</span> Stu*)e2) -&gt; name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//使用qsort排序结构体类型数据</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s</span>[3] =</span> &#123; &#123;<span class="string">&quot;zhangsan&quot;</span>,<span class="number">30</span>&#125;,&#123;<span class="string">&quot;lisi&quot;</span>, <span class="number">34</span>&#125;, &#123;<span class="string">&quot;wangwu&quot;</span>, <span class="number">20</span>&#125; &#125;;</span><br><span class="line"><span class="type">int</span> sz = <span class="keyword">sizeof</span>(s) / <span class="keyword">sizeof</span>(s[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//按照年龄来比较</span></span><br><span class="line"><span class="comment">//qsort(s, sz, sizeof(s[0]), sort_by_age);</span></span><br><span class="line"><span class="comment">//按照名字来比较</span></span><br><span class="line">qsort(s, sz, <span class="keyword">sizeof</span>(s[<span class="number">0</span>]), sort_by_name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//结构体数据排序</span></span><br><span class="line">test2();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h2 id="模仿qsort实现一个冒泡排序的通用算法"><a href="#模仿qsort实现一个冒泡排序的通用算法" class="headerlink" title="模仿qsort实现一个冒泡排序的通用算法"></a>模仿qsort实现一个冒泡排序的通用算法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转换</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swp</span><span class="params">(<span class="type">char</span>* e1, <span class="type">char</span>* e2, <span class="type">int</span> witdh)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; witdh; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> tmp = *e1;</span><br><span class="line">*e1 = *e2;</span><br><span class="line">*e2 = tmp;</span><br><span class="line">e1++;</span><br><span class="line">e2++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(<span class="type">void</span>* base, <span class="type">int</span> sz, <span class="type">int</span> width, <span class="type">int</span>(*cmp)(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2))</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; sz - <span class="number">1</span> - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cmp((<span class="type">char</span>*)base + j * width, (<span class="type">char</span>*)base + (j + <span class="number">1</span>) * width) &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//转换</span></span><br><span class="line">swp((<span class="type">char</span>*)base + j * width, (<span class="type">char</span>*)base + (j + <span class="number">1</span>) * width, width);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp_int</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *(<span class="type">int</span>*)e1 - *(<span class="type">int</span>*)e2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">bubble_sort(arr,sz,<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]),cmp_int);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码只对整形数组进行排序，至于其他类型的数组，可以自己去试</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h2 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h2><h2 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h2><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机安装+linux安装（Centos7）教程</title>
      <link href="/2022/06/08/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85-linux%E5%AE%89%E8%A3%85%EF%BC%88Centos7%EF%BC%89%E6%95%99%E7%A8%8B/"/>
      <url>/2022/06/08/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85-linux%E5%AE%89%E8%A3%85%EF%BC%88Centos7%EF%BC%89%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>提前说明<br>linux是一个操作系统是基于汇编和b语言的开发的。之后作者将linux开源了。所以后来衍生出了各种版本的.最常见的ubuntu、CenTOS、kali、fedora等<br><a href="https://www.linux.org/pages/download/">linux官网</a><br>这边我使用的是Centos7这样的版本<br>linux系统可以直接在自己的实物机上安装，但是linux系统对于刚接触的人绝对不如win系统好用。这边就不建议装在自己的电脑上，就算说用什么双系统啊，什么的乱七八糟的，绝对会很烦.<br>linux最好的肯定是去购买云服务器.云服务器上你选一下，他就自动帮你装好了.直接使用就可以了.而且云服务器有自己的公网ip，后期搞什么东西的话直接可以实施.最重要的一点，云服务器上你搞坏了，重头在来一遍就可以了.但是云服务器要花钱.<br>所以我选择使用虚拟机来创建linux系统，注：实物机配置太低，会很卡的。而且用虚拟机以后会出现很多问题.如果喜欢倒腾而且有环境的选择虚拟机，只是学linux的最好还是花钱买云服务器.<br>下面开始虚拟机安装教程</p><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><h4 id="虚拟机的安装"><a href="#虚拟机的安装" class="headerlink" title="虚拟机的安装"></a>虚拟机的安装</h4><p>不花钱还方便的使用linux系统.<br>最方便的肯定是直接用别人的整合包，但是用别人的总感觉别人会在文件里放点东西，不放心，所以走最安全的官方路线<br>先去虚拟机官网下载安装程序<a href="https://www.vmware.com/">VMware虚拟机官网</a><br>我浏览器自带的翻译过了，界面会有点不一样.没翻译过的网站也大同小异.界面没多大变化</p><blockquote><p>点击资源<br><img src="/2022/06/08/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85-linux%E5%AE%89%E8%A3%85%EF%BC%88Centos7%EF%BC%89%E6%95%99%E7%A8%8B/2022-06-09-13-03-19.png"><br>产品试用<br><img src="/2022/06/08/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85-linux%E5%AE%89%E8%A3%85%EF%BC%88Centos7%EF%BC%89%E6%95%99%E7%A8%8B/2022-06-09-13-13-47.png"><br>到达界面后滚轮往下滚，找到桌面虚拟机管理程序.（点击加号是有内容出现和收起的）<br><img src="/2022/06/08/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85-linux%E5%AE%89%E8%A3%85%EF%BC%88Centos7%EF%BC%89%E6%95%99%E7%A8%8B/2022-06-09-13-17-17.png"><br>找到VMware Workstation Player（以前称为 Player Pro，点击旁边的下载免费试用版<br> <img src="/2022/06/08/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85-linux%E5%AE%89%E8%A3%85%EF%BC%88Centos7%EF%BC%89%E6%95%99%E7%A8%8B/2022-06-09-13-18-17.png"><br> 找到图中所示下载（这里后面跟的for windows和for linux是安装在哪个系统上，不是指安装的虚拟机里是什么系统）<br> <img src="/2022/06/08/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85-linux%E5%AE%89%E8%A3%85%EF%BC%88Centos7%EF%BC%89%E6%95%99%E7%A8%8B/2022-06-09-13-19-11.png"></p></blockquote><p>虚拟机的安装程序就下好了.什么？文件保存在哪里好？肯定不是默认的c盘拉~虚拟机的文件可以自定义文件夹，文件夹名字可以有中文.放自己喜欢的地方吧</p><p>然后就是启动安装程序<br>经典下一步下一步下一步下一步完成.虚拟机安装完成<br>下一步的时候，也会有些选项，什么都不懂的直接下一步就完事了.懂得就自己勾勾叉叉吧<br>然后先不急这使用虚拟机<br>去下载下linux系统</p><h4 id="linux系统下载"><a href="#linux系统下载" class="headerlink" title="linux系统下载"></a>linux系统下载</h4><p>你想要什么版本的linux系统就搜什么，直接进入对应版本的官网.<br>我还是从linux官网开始<br><a href="https://www.linux.org/pages/download/">linux官网</a><br><img src="/2022/06/08/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85-linux%E5%AE%89%E8%A3%85%EF%BC%88Centos7%EF%BC%89%E6%95%99%E7%A8%8B/2022-06-09-13-30-30.png"><br>要什么版本就点击对应版本的名字，这也就是直接从linux的官网点击对应版本的官网链接，你直接在搜索的官网一样的.<br>我用的是Centos<br><img src="/2022/06/08/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85-linux%E5%AE%89%E8%A3%85%EF%BC%88Centos7%EF%BC%89%E6%95%99%E7%A8%8B/2022-06-09-13-32-19.png"><br>从linux官网进的直接就是下载界面<br>从Centos进的看图<br><img src="/2022/06/08/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85-linux%E5%AE%89%E8%A3%85%EF%BC%88Centos7%EF%BC%89%E6%95%99%E7%A8%8B/2022-06-09-13-36-30.png"><br>进去后选择自己要的版本，我要的就是Centos7,然后点击mirror,mirror就是镜像的意思<br><img src="/2022/06/08/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85-linux%E5%AE%89%E8%A3%85%EF%BC%88Centos7%EF%BC%89%E6%95%99%E7%A8%8B/2022-06-09-13-38-03.png"><br>接着随便点个能下载的链接下载就好了.链接下载下来的内容都是一样的，只是快慢不同和提供的网站不同而已，文件都是一样的.<br><img src="/2022/06/08/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85-linux%E5%AE%89%E8%A3%85%EF%BC%88Centos7%EF%BC%89%E6%95%99%E7%A8%8B/2022-06-09-13-40-58.png"></p><blockquote><p>看好内容和大小.虚拟机就是模拟从光盘下载linux系统，所以要选DVD，后缀要.iso.然后大小linux也是一个系统，总不可能一点点大或者非常大对吧.大概4.4g，就4g-5g吧，可能别的版本会不同，但是差不了多少，我也没研究过.</p></blockquote><p>下载的内容放到自己喜欢和能找得到的地方，后面要用.文件夹可以有中文</p><h4 id="在虚拟机上安装linux系统"><a href="#在虚拟机上安装linux系统" class="headerlink" title="在虚拟机上安装linux系统"></a>在虚拟机上安装linux系统</h4><p>打开虚拟机<br><img src="/2022/06/08/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85-linux%E5%AE%89%E8%A3%85%EF%BC%88Centos7%EF%BC%89%E6%95%99%E7%A8%8B/2022-06-09-13-47-12.png"><br>创建新虚拟机<br><img src="/2022/06/08/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85-linux%E5%AE%89%E8%A3%85%EF%BC%88Centos7%EF%BC%89%E6%95%99%E7%A8%8B/2022-06-09-13-48-31.png"><br>红色框里就是之前下载的linux的镜像文件的地址.有的刚打开是空白的，那就自己找.有的可能他自己就找到了，那最好.下一步<br><img src="/2022/06/08/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85-linux%E5%AE%89%E8%A3%85%EF%BC%88Centos7%EF%BC%89%E6%95%99%E7%A8%8B/2022-06-09-13-50-31.png"><br>全名：自己看着取，不重要。学到后面莫名其妙就知道了<br>用户名：建议别太长，会用到，起自己名字拼音缩写啊差不多<br>密码：后面要用的，要记住。忘了也没办法，重建一个新的虚拟机就好了<br>确认：确认刚才的密码<br><img src="/2022/06/08/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85-linux%E5%AE%89%E8%A3%85%EF%BC%88Centos7%EF%BC%89%E6%95%99%E7%A8%8B/2022-06-09-13-53-19.png"><br>虚拟机名称：自己看着取<br>位置：放到一个足够大空间的位置，后面会越用越大，大概有50-100感觉差不多了.<br><img src="/2022/06/08/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85-linux%E5%AE%89%E8%A3%85%EF%BC%88Centos7%EF%BC%89%E6%95%99%E7%A8%8B/2022-06-09-13-55-07.png"><br>磁盘大小给50差不多了，上不封顶，小一点30gb勉强凑合<br><img src="/2022/06/08/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85-linux%E5%AE%89%E8%A3%85%EF%BC%88Centos7%EF%BC%89%E6%95%99%E7%A8%8B/2022-06-09-13-56-08.png"><br>点击自定义硬件<br><img src="/2022/06/08/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85-linux%E5%AE%89%E8%A3%85%EF%BC%88Centos7%EF%BC%89%E6%95%99%E7%A8%8B/2022-06-09-13-56-44.png"><br>内存：你内存大就多给点，少就给个1g够了<br>处理器：你处理器核心多就多给点，少就给1个也能用<br>新CD&#x2F;DVD(IDE):不管他默认<br>网络适配器：以后学习会用到，现在默认就好<br>usb控制器：默认<br>声卡：默认<br>打印机：这东西用不到，用不到可以点击移除<br><img src="/2022/06/08/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85-linux%E5%AE%89%E8%A3%85%EF%BC%88Centos7%EF%BC%89%E6%95%99%E7%A8%8B/2022-06-09-14-00-03.png"><br>手搓点错了删错了也没关系，可以添加回来，反正是虚拟机，坏了重新开就ok了<br>显示器：默认<br>配置完后，关闭<br>他是自动保存的，不用你手动保存<br>点击完成，等待虚拟机加载完成就可以使用了</p><blockquote><p>在虚拟机使用过程中，我遇到的错误问题会在我博客的疑难解答中有写，可以去看看有没有相同的问题，我暂时没遇到的问题那我也没办法</p></blockquote><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>直接去找别人的整合包<br>整合包&#x3D;（虚拟机安装程序包）+（linux系统镜像）+（有的可能还带许可（可有可无））+（一些无关紧要的，可能是教程文本之类的）<br>有整合包就简单了<br>首先把整合包下载下来<br>第一步，解压缩，随便放到你喜欢的位置，不会就用他默认的.默认是放到c盘的某处。我是不建议把文件都放到c盘的.不过你既然连安装软件都不会，那最好别乱动，都使用默认设置最好，以便出错方便找错误.<br>第二步，启动压缩包里的虚拟机的安装文件，哪个是虚拟机安装文件？一般是VMware workstation 16 player.exe，这里的16可能随着版本的更新会变化.但是版本不同不影响你之后装linux系统<br>第三步，和方案一同样的安装方式安装完成就ok啦.</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小练习4</title>
      <link href="/2022/05/19/%E5%B0%8F%E7%BB%83%E4%B9%A04/"/>
      <url>/2022/05/19/%E5%B0%8F%E7%BB%83%E4%B9%A04/</url>
      
        <content type="html"><![CDATA[<h2 id="在一个有序数组中查找一个数是否存在"><a href="#在一个有序数组中查找一个数是否存在" class="headerlink" title="在一个有序数组中查找一个数是否存在"></a>在一个有序数组中查找一个数是否存在</h2><p>最普通的方法，可以使用循环，循环出所有的数然后比较.（暴力穷举法）<br>但是这样的查找方式很慢，如果这个数很大，又刚好是在最后，那效率会变得很低，所以可以使用二分查找来提高效率<br>二分查找：<br>假设是一个1-500的数组，让你找300.<br>我先确定一个范围，比如1就是最小值，500是最大值<br>那我先让500&#x2F;2&#x3D;250；<br>在让250和300进行比较，比较结果是250&lt;300,那就说明要找的数可能在250-500这个范围里，目前最小值就是250，最大值是500.<br>我在取250到500这个范围里的中间数375<br>用375和300比较，发现375大于300，那要找的数就可能会在250-375之间，现在最小值是250，最大值是375.<br>每次都找范围里的中间值，在和要找的数比较.<br>继续比较下去，就能找到300<br>如果说最后，最小值等于最大值了，还没找到，那就说明找不到了.<br>二分查找每次可以排除一半的数据，相对来说，效率高了不少.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="type">int</span> n = <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">10</span>]);</span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> right = sz - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (left &lt;= right) </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (arr[mid] &lt; n)</span><br><span class="line">&#123;</span><br><span class="line">left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; n)</span><br><span class="line">&#123;</span><br><span class="line">right = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找到了&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (left &gt; right) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找不到&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个整形数组，用来放有序的数，为了方便，我就使用1<del>10这么个有序数组.<br>关于<code>arr[]</code>里要不要写数字，这里题目上没规定数组要多大，所以不要写<br>为了方便调试，我直接创建变量n，来表示要找的数，当然也是可以用<code>scanf()</code>来输入一个数的<br>然后是要计算处数组中的元素个数，目前C语言是里没有能直接计算出元素个数的函数的.就说<code>函数（arr）</code>然后结果是10，没有这种函数.<br>但是可以通过sizeof来计算出数组中总的元素大小，在除以单个元素大小，就可以求出元素个数了，也就是<code>sizeor(arr)/sizeof(arr[0])</code>，计算出的元素个数我用sz存放<br>接着就是确定最小值（left）和最大值(right)，1</del>10中，最小值是1，最大值是10，但是，在数组中找元素，并不能直接<code>left=1</code>,<code>right=10</code>,这样找.<br>要使用对应的下标来找.数组的下标是从0开始的.所以:<code>left=0</code>,<code>right=sz-1</code>;<br>要的值都创建好了，接下来开始查找.<br>当找到的中间值下标对应的元素小于要找的数，那就让中间值变成最小值.也就是<code>if (arr[mid] &lt; n)&#123;left = mid + 1;&#125;</code><br>为什么要加1？举个例子：<br>在现在这个代码中，我要找的是7，那么通过中间值找到的元素是6，6&lt;7,既然6已经比7小了，那么6也可以直接排除了，所以加1<br>right也差不多，因为right是最大值，所以当比较不满足排除后用的是减<br>只要条件满足<code>whlie(left&lt;=right)</code>,就不断循环，如果在循环中<code>left==right</code>，就说明找到了.<br>如果一直不等于，那么直到循环条件不满足，跳出循环，打印找不到了.</p><h2 id="在一个有序数组中查找一个数是否存在（函数）"><a href="#在一个有序数组中查找一个数是否存在（函数）" class="headerlink" title="在一个有序数组中查找一个数是否存在（函数）"></a>在一个有序数组中查找一个数是否存在（函数）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Lookup</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> right = sz - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (arr[mid] &lt; n)</span><br><span class="line">&#123;</span><br><span class="line">left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; n)</span><br><span class="line">&#123;</span><br><span class="line">right = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找到了&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (left &gt; right) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找不到&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">Lookup(arr, n, sz);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数传参，对应类型的参数，要用对应类型的接收<br>当传的是一个数组的时候，传过去的其实是数组首元素地址，也就是说，如果在函数内部想用sizeof计算元素个数是不行的，需要在函数外面计算好后在传到函数里.<br>函数返回值类型<br>我直接在函数里打印了，所以用void,void是无返回值的意思，如果函数不写返回值，默认返回int类型.不同的编译器会不同</p><h2 id="输入3个整数a-b-c，让其从大到小排列"><a href="#输入3个整数a-b-c，让其从大到小排列" class="headerlink" title="输入3个整数a,b,c，让其从大到小排列"></a>输入3个整数a,b,c，让其从大到小排列</h2><p>比如创建a&#x3D;1,b&#x3D;2,c&#x3D;3;，为了方便，我直接创建的3个数，也可以使用<code>scanf()</code>获取3个数放到a,b,c里<br>排序完后打印的结果是：3 2 1<br>那怎么排序呢？只要3个数比较一下就可以排序了.<br>但是，排序归排序，你打印的时候abc的位置是没法变的，<br>比如当前，我排完序打印应该这么写<code>printf(&quot;%d%d%d&quot;, c,b,a)</code><br>那我如果刚开始给的是a&#x3D;1,b&#x3D;3,c&#x3D;2, 那打印的时候应该<code>printf(&quot;%d%d%d&quot;, b,c,a)</code> ;<br>可是我是没办法随便改变<code>printf（）</code>里abc摆放的位置的.<br>但是我可以改变abc变量里存放的值.<br>假如我现在规定我要打印的内容是<code>printf(&quot;%d%d%d&quot;, a,b,c)</code>;<br>我只要让a的值&gt;b的值&gt;c的值，不就好了吗.<br>所以我通过比较，让abc里的值互换就好了,互换的时候，创建个临时变量tmp用于交换</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">8</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">-7</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="number">55</span>;</span><br><span class="line"><span class="type">int</span> tmp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a &lt; b)</span><br><span class="line">&#123;</span><br><span class="line">tmp=a;</span><br><span class="line">a = b;</span><br><span class="line">b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a &lt; c)</span><br><span class="line">&#123;</span><br><span class="line">tmp=a;</span><br><span class="line">a = c;</span><br><span class="line">c = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (b &lt; c)</span><br><span class="line">&#123;</span><br><span class="line">tmp=b;</span><br><span class="line">b = c;</span><br><span class="line">c = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d%d%d&quot;</span>, a, b, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小练习3</title>
      <link href="/2022/05/17/%E5%B0%8F%E7%BB%83%E4%B9%A03/"/>
      <url>/2022/05/17/%E5%B0%8F%E7%BB%83%E4%B9%A03/</url>
      
        <content type="html"><![CDATA[<h2 id="计算n的阶乘（普通）"><a href="#计算n的阶乘（普通）" class="headerlink" title="计算n的阶乘（普通）"></a>计算n的阶乘（普通）</h2><p>什么是阶乘？<br>阶乘用<code>n!</code>表示<br>1的阶乘&#x3D;1<br>2的阶乘&#x3D;1*2<br>3的阶乘&#x3D;1*2*3<br>4的阶乘&#x3D;1*2*3*4<br>…..<br>0的阶乘规定是1<br>阶乘不可以是负数<br>这里没考虑输入0和负数的情况</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">&#123;</span><br><span class="line">ret = ret * i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ret);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先给一个可以输入的位置<br>既然要计算n的阶乘，就要循环出n个数字<br>每一次循环用ret保留上一次计算的值，在用ret乘接下来的数</p><h2 id="计算n的阶乘（函数）"><a href="#计算n的阶乘（函数）" class="headerlink" title="计算n的阶乘（函数）"></a>计算n的阶乘（函数）</h2><p>这里没考虑输入0和负数的情况</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Factorial</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">j *= i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="type">int</span> ret = Factorial(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ret);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数定义，函数要写返回类型，这里是计算阶乘，所以返回类型是int<br>函数传参，传过去的参是什么类型，就需要用什么类型的接收，n是整形，所以函数里用<code>int n</code>接收</p><h2 id="计算n的阶乘（递归）"><a href="#计算n的阶乘（递归）" class="headerlink" title="计算n的阶乘（递归）"></a>计算n的阶乘（递归）</h2><p>什么是递归？<br>粗俗的认为，递归就是函数里自己调用自己</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Factorial</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Factorial(n - <span class="number">1</span>) * n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="type">int</span> ret = Factorial(n);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细说一下这里的递归是怎么实现的，比说我输入的n是5<br>那么5传到函数里<br>函数1就计算<code>Factorial(5 - 1) * 5</code>,要计算这个的值，就必须计算<code>Factorial(5 - 1)</code>的值<br>编译器就会重新开辟一块内存计算<code>Factorial(5 - 1)</code><br>函数2就计算<code>Factorial(4 - 1) * 4</code>，要计算这个的值，就必须计算<code>Factorial(4 - 1)</code>的值<br>依次类推<br>函数3计算<code>Factorial(3 - 1) * 3</code><br>函数4计算<code>Factorial(2 - 1) * 2</code><br>函数5计算<code>Factorial(1 - 1) * 1</code><br>函数6计算<code>Factorial(0)</code><br>每一次递归，编译器都会在内存中开辟新的空间.当n&#x3D;0的时候，函数终于计算出值了，接着开始返回<br>函数6返回1<br>函数5返回1<br>函数4返回2<br>函数3返回6<br>函数2返回24<br>函数1返回120<br>最后返回值放到ret里，打印出来.<br>5的阶乘是120</p><hr><h2 id="计算n的阶乘相加"><a href="#计算n的阶乘相加" class="headerlink" title="计算n的阶乘相加"></a>计算n的阶乘相加</h2><p>这里没考虑输入0和负数的情况</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">&#123;</span><br><span class="line">ret = ret * j;</span><br><span class="line">&#125;</span><br><span class="line">sum = sum + ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次计算出一个数的阶乘，然后把每次计算的阶乘加起来<br>里面的循环计算阶乘，外面的循环计算阶乘相加.<br>ret重新计算阶乘时要把它置为1<br>如果不重置成1，那ret进第二个循环的时候就会是上一次的值，就不对.<br>比如，计算4的阶乘相加<br>里面的循环第一次计算1的阶乘，计算完后跳出，外面的循环计算（1的阶乘）<br>然后第二次计算出2的阶乘，计算后跳出，外面的循环计算（1的阶乘）+（2的阶乘）<br>第三次计算出3的阶乘，计算后跳出，外面的循环计算（（1的阶乘）+（2的阶乘））+（3的阶乘）<br>第四计算出4的阶乘，计算后跳出，外面的循环计算（（1的阶乘）+（2的阶乘）+（3的阶乘））+（4的阶乘）</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小练习2</title>
      <link href="/2022/05/16/%E5%B0%8F%E7%BB%83%E4%B9%A02/"/>
      <url>/2022/05/16/%E5%B0%8F%E7%BB%83%E4%B9%A02/</url>
      
        <content type="html"><![CDATA[<h2 id="模拟用户情景，输入密码，输错3次就退出程序"><a href="#模拟用户情景，输入密码，输错3次就退出程序" class="headerlink" title="模拟用户情景，输入密码，输错3次就退出程序"></a>模拟用户情景，输入密码，输错3次就退出程序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> password[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入密码:&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, password);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(password, <span class="string">&quot;abcd123&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;密码输入成功\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;密码输入错误，重新输入；&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">3</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入错误超过三次，程序退出\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先打印下“请输入密码”，让用户知道自己要干什么<br>根据题目要求，用户要输入密码，所以需要给个<code>scanf()</code>，来让用户输入，用户输入的数据我通过创建一个字符串数组保存起来.<br>然后，题目又说错误3次就退出程序，所以用一个for循环，来控制次数<br>接着用用户输入的密码和我们自己设置的密码比较，<br>字符串和字符串比较不可以用<code>（password==&quot;abcd123&quot;)</code>直接比较，需要使用<code>strcmp()</code>函数来比较，如果相等strcmp函数会返回0，返回0就提示密码输入成功，并结束循环.strcmp函数需要引用头文件<code>#include &lt;string.h&gt;</code><br>如果输入错误，就继续输入，直到错误超过三次，则循环结束，打印“输入错误超过三次，程序退出”<br>运行结果：<br><img src="/2022/05/16/%E5%B0%8F%E7%BB%83%E4%B9%A02/2022-05-17-12-50-41.png"><br>发现“密码输入错误，请重新输入”多打印了一行<br><img src="/2022/05/16/%E5%B0%8F%E7%BB%83%E4%B9%A02/2022-05-17-12-51-30.png"><br>在稍微改进一下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> password[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入密码:&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, password);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(password, <span class="string">&quot;abcd123&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;密码输入成功\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i&lt;<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;密码输入错误，重新输入；&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">3</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入错误超过三次，程序退出\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/2022/05/16/%E5%B0%8F%E7%BB%83%E4%B9%A02/2022-05-17-12-54-45.png"></p><hr><h2 id="写一个输入密码，并确认密码（getchar使用场景）"><a href="#写一个输入密码，并确认密码（getchar使用场景）" class="headerlink" title="写一个输入密码，并确认密码（getchar使用场景）"></a>写一个输入密码，并确认密码（getchar使用场景）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> password[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, password);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请确认输入的密码（y/n）&quot;</span>);</span><br><span class="line"><span class="type">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;确认成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;确认失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/2022/05/16/%E5%B0%8F%E7%BB%83%E4%B9%A02/2022-05-17-14-31-25.png"><br>输入密码是正常运行了，但是按下回车后就直接确认失败.<br>造成这种结果的原因就是，<code>scanf()</code>在获取字符串的时候，是从缓冲区拿字符串.<br>在输入123456以后，缓冲区里实际放的是123456\n，\n是回车的意思<br>当123456被拿走放到password数组中的时候，\n被留了下来<br>而<code>getchar()</code>在缓冲区拿字符的时候，就直接把\n拿走了，<br>\n被放到了ch里，<code>ch != &#39;y&#39;</code>所以确认失败.<br>修改代码，先用<code>getchar()</code>把\n拿走,再用<code>getchar()</code>获取字符放到ch里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> password[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, password);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请确认输入的密码（Y/N）&quot;</span>);</span><br><span class="line">        getchar();</span><br><span class="line"><span class="type">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;确认成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;确认失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/2022/05/16/%E5%B0%8F%E7%BB%83%E4%B9%A02/2022-05-17-14-43-44.png"><br>继续测试代码：<br>发现如果输入的字符串中有空格，代码就无法正常运行<br><img src="/2022/05/16/%E5%B0%8F%E7%BB%83%E4%B9%A02/2022-05-17-14-44-46.png"><br>这是因为你输入密码后，在缓冲区里放的是123 abc\n<br>而<code>scanf()</code>来缓冲区拿字符串的时候只把123456拿走了，scanf遇到空格就不拿了.<br>此时缓冲区里剩下:空格abc\n<br><code>getchar（）</code>来拿字符串的时候就把空格拿走了（getchar一次只能拿一个字符）<br>接着第二个getchar拿走a并放到ch里，最后确认失败<br>解决方法，用getchar无限拿，直到把\n也拿走.<br>修改代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> password[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, password);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请确认输入的密码（y/n）&quot;</span>);</span><br><span class="line"><span class="type">char</span> tmp;</span><br><span class="line"><span class="keyword">while</span> ((tmp = getchar()) != <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"><span class="type">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;确认成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;确认失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/2022/05/16/%E5%B0%8F%E7%BB%83%E4%B9%A02/2022-05-17-15-00-30.png"></p><h2 id="输入密码，重新输入密码"><a href="#输入密码，重新输入密码" class="headerlink" title="输入密码，重新输入密码"></a>输入密码，重新输入密码</h2><p>这里不考虑密码中含有空格的情况</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> password[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">char</span> tmp[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, password);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请重新输入密码&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, tmp);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(password, tmp) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;确认成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;确认失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/2022/05/16/%E5%B0%8F%E7%BB%83%E4%B9%A02/2022-05-17-15-06-17.png"></p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>warning C4828: 文件包含在偏移 0x725 处开始的字符，该字符在当前源字符集中无效(代码页 936)</title>
      <link href="/2022/05/16/warning-C4828-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9C%A8%E5%81%8F%E7%A7%BB-0x725-%E5%A4%84%E5%BC%80%E5%A7%8B%E7%9A%84%E5%AD%97%E7%AC%A6%EF%BC%8C%E8%AF%A5%E5%AD%97%E7%AC%A6%E5%9C%A8%E5%BD%93%E5%89%8D%E6%BA%90%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%AD%E6%97%A0%E6%95%88-%E4%BB%A3%E7%A0%81%E9%A1%B5-936/"/>
      <url>/2022/05/16/warning-C4828-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9C%A8%E5%81%8F%E7%A7%BB-0x725-%E5%A4%84%E5%BC%80%E5%A7%8B%E7%9A%84%E5%AD%97%E7%AC%A6%EF%BC%8C%E8%AF%A5%E5%AD%97%E7%AC%A6%E5%9C%A8%E5%BD%93%E5%89%8D%E6%BA%90%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%AD%E6%97%A0%E6%95%88-%E4%BB%A3%E7%A0%81%E9%A1%B5-936/</url>
      
        <content type="html"><![CDATA[<h2 id="报错描述"><a href="#报错描述" class="headerlink" title="报错描述"></a>报错描述</h2><p>warning C4828: 文件包含在偏移 0x725 处开始的字符，该字符在当前源字符集中无效(代码页 936)<br>warning C4828: 文件包含在偏移 0xff5 处开始的字符，该字符在当前源字符集中无效(代码页 936)<br>warning C4828: 文件包含在偏移 0xfb5 处开始的字符，该字符在当前源字符集中无效(代码页 936)<br>warning C4828: 文件包含在偏移 0x6ad 处开始的字符，该字符在当前源字符集中无效(代码页 936)</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>不需要管它说偏移 0x某某某 处开始的字符，看到C4828就适用这个解决方案<br>找到工具<br><img src="/2022/05/16/warning-C4828-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9C%A8%E5%81%8F%E7%A7%BB-0x725-%E5%A4%84%E5%BC%80%E5%A7%8B%E7%9A%84%E5%AD%97%E7%AC%A6%EF%BC%8C%E8%AF%A5%E5%AD%97%E7%AC%A6%E5%9C%A8%E5%BD%93%E5%89%8D%E6%BA%90%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%AD%E6%97%A0%E6%95%88-%E4%BB%A3%E7%A0%81%E9%A1%B5-936/2022-05-16-18-15-00.png"><br>找到自定义<br><img src="/2022/05/16/warning-C4828-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9C%A8%E5%81%8F%E7%A7%BB-0x725-%E5%A4%84%E5%BC%80%E5%A7%8B%E7%9A%84%E5%AD%97%E7%AC%A6%EF%BC%8C%E8%AF%A5%E5%AD%97%E7%AC%A6%E5%9C%A8%E5%BD%93%E5%89%8D%E6%BA%90%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%AD%E6%97%A0%E6%95%88-%E4%BB%A3%E7%A0%81%E9%A1%B5-936/2022-05-16-18-16-11.png"><br>找到命令<br><img src="/2022/05/16/warning-C4828-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9C%A8%E5%81%8F%E7%A7%BB-0x725-%E5%A4%84%E5%BC%80%E5%A7%8B%E7%9A%84%E5%AD%97%E7%AC%A6%EF%BC%8C%E8%AF%A5%E5%AD%97%E7%AC%A6%E5%9C%A8%E5%BD%93%E5%89%8D%E6%BA%90%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%AD%E6%97%A0%E6%95%88-%E4%BB%A3%E7%A0%81%E9%A1%B5-936/2022-05-16-18-16-55.png"><br>找到添加命令<br><img src="/2022/05/16/warning-C4828-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9C%A8%E5%81%8F%E7%A7%BB-0x725-%E5%A4%84%E5%BC%80%E5%A7%8B%E7%9A%84%E5%AD%97%E7%AC%A6%EF%BC%8C%E8%AF%A5%E5%AD%97%E7%AC%A6%E5%9C%A8%E5%BD%93%E5%89%8D%E6%BA%90%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%AD%E6%97%A0%E6%95%88-%E4%BB%A3%E7%A0%81%E9%A1%B5-936/2022-05-16-18-18-28.png"><br>在左侧找到文件，在右侧找到高级保存选项<br><img src="/2022/05/16/warning-C4828-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9C%A8%E5%81%8F%E7%A7%BB-0x725-%E5%A4%84%E5%BC%80%E5%A7%8B%E7%9A%84%E5%AD%97%E7%AC%A6%EF%BC%8C%E8%AF%A5%E5%AD%97%E7%AC%A6%E5%9C%A8%E5%BD%93%E5%89%8D%E6%BA%90%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%AD%E6%97%A0%E6%95%88-%E4%BB%A3%E7%A0%81%E9%A1%B5-936/2022-05-16-18-20-14.png"><br>选中高级保存选项，点击确定<br><img src="/2022/05/16/warning-C4828-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9C%A8%E5%81%8F%E7%A7%BB-0x725-%E5%A4%84%E5%BC%80%E5%A7%8B%E7%9A%84%E5%AD%97%E7%AC%A6%EF%BC%8C%E8%AF%A5%E5%AD%97%E7%AC%A6%E5%9C%A8%E5%BD%93%E5%89%8D%E6%BA%90%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%AD%E6%97%A0%E6%95%88-%E4%BB%A3%E7%A0%81%E9%A1%B5-936/2022-05-16-18-21-36.png"><br>回到刚开始的菜单，就可以看到多出来的选项<br><img src="/2022/05/16/warning-C4828-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9C%A8%E5%81%8F%E7%A7%BB-0x725-%E5%A4%84%E5%BC%80%E5%A7%8B%E7%9A%84%E5%AD%97%E7%AC%A6%EF%BC%8C%E8%AF%A5%E5%AD%97%E7%AC%A6%E5%9C%A8%E5%BD%93%E5%89%8D%E6%BA%90%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%AD%E6%97%A0%E6%95%88-%E4%BB%A3%E7%A0%81%E9%A1%B5-936/2022-05-16-18-23-41.png"><br>点击高级保存选项，修改编码为utf-8，点击确定.<br><img src="/2022/05/16/warning-C4828-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9C%A8%E5%81%8F%E7%A7%BB-0x725-%E5%A4%84%E5%BC%80%E5%A7%8B%E7%9A%84%E5%AD%97%E7%AC%A6%EF%BC%8C%E8%AF%A5%E5%AD%97%E7%AC%A6%E5%9C%A8%E5%BD%93%E5%89%8D%E6%BA%90%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%AD%E6%97%A0%E6%95%88-%E4%BB%A3%E7%A0%81%E9%A1%B5-936/2022-05-16-18-25-16.png"><br>解决完毕</p><hr><p>补充，上面创建的高级保存选项是直接出现在整个菜单上的，很丑<br>可以在命令中修改出现的位置，如下图<br><img src="/2022/05/16/warning-C4828-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9C%A8%E5%81%8F%E7%A7%BB-0x725-%E5%A4%84%E5%BC%80%E5%A7%8B%E7%9A%84%E5%AD%97%E7%AC%A6%EF%BC%8C%E8%AF%A5%E5%AD%97%E7%AC%A6%E5%9C%A8%E5%BD%93%E5%89%8D%E6%BA%90%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%AD%E6%97%A0%E6%95%88-%E4%BB%A3%E7%A0%81%E9%A1%B5-936/2022-05-16-18-30-22.png"><br>1.找到你想让高级保存选项出现的位置<br>2.3.4.5.和之前一致<br>同样的只要找到之前创建的高级保存选项的位置也可以在命令中删除之前出现在开始菜单的高级保存选项.</p><hr><h2 id="高级保存选项是灰色的，无法点击"><a href="#高级保存选项是灰色的，无法点击" class="headerlink" title="高级保存选项是灰色的，无法点击"></a>高级保存选项是灰色的，无法点击</h2><p>描述：<br><img src="/2022/05/16/warning-C4828-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%9C%A8%E5%81%8F%E7%A7%BB-0x725-%E5%A4%84%E5%BC%80%E5%A7%8B%E7%9A%84%E5%AD%97%E7%AC%A6%EF%BC%8C%E8%AF%A5%E5%AD%97%E7%AC%A6%E5%9C%A8%E5%BD%93%E5%89%8D%E6%BA%90%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%AD%E6%97%A0%E6%95%88-%E4%BB%A3%E7%A0%81%E9%A1%B5-936/2022-05-16-18-35-20.png"></p><p>解决方案：<br>点击一下代码的区域，让光标出现在代码里，高级保存选项就可以点击了.</p>]]></content>
      
      
      <categories>
          
          <category> 疑难解答 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小练习1</title>
      <link href="/2022/05/16/%E5%B0%8F%E7%BB%83%E4%B9%A01/"/>
      <url>/2022/05/16/%E5%B0%8F%E7%BB%83%E4%B9%A01/</url>
      
        <content type="html"><![CDATA[<h2 id="动态字符串"><a href="#动态字符串" class="headerlink" title="动态字符串"></a>动态字符串</h2><p>效果：字符串两边同时往中间出现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr1[] = <span class="string">&quot;hello_world&quot;</span>;</span><br><span class="line"><span class="type">char</span> arr2[] = <span class="string">&quot;           &quot;</span>;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(arr1);</span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> right = len - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">&#123;</span><br><span class="line">arr2[left] = arr1[left];</span><br><span class="line">arr2[right] = arr1[right];</span><br><span class="line">left++;</span><br><span class="line">right--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的实现思路：<br>创建2个字符串数组<br>一个放字符串，一个放空格<br>找到字符数组的第一个元素的下标（left）和最后一个元素的下标(right)<br>用strlen算出字符串大小就可以找到最后一个元素的下标是多少.因为下标是从0开始算，所以最后一个元素的下标要减去1<br>使用strlen需要引用头文件<code>#include &lt;string.h&gt;</code>,使用<code>main()</code>函数需要引用头文件<code>#include &lt;stdio.h&gt;</code><br>然后把字符串数组下标对应的内容放到空格字符串的第一个和最后一个位置<br>在然后找字符串数组第二个元素和倒数第二个元素的下标，放到空格字符串的第二个和倒数第二个位置<br>不断循环，直到下标小于或者相等，就说明字符串的内容已经全部放过去了<br>也就是说当<code>whlie（left&lt;=right）</code>里的(left&gt;right)的时候判断为假，假就输出0，循环就停止.<br>每循环一次就打印一次<br>运行后发现，默认的操作速度打印的太快了.所以在循环里加上延迟（Sleep）<br>Sleep()是延迟的意思，括号里写延迟多少，单位是毫秒,S需要大写，需要引用头文件<code>#include &lt;windows.h&gt;</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr1[] = <span class="string">&quot;hello_world&quot;</span>;</span><br><span class="line"><span class="type">char</span> arr2[] = <span class="string">&quot;           &quot;</span>;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(arr1);</span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> right = len - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">&#123;</span><br><span class="line">arr2[left] = arr1[left];</span><br><span class="line">arr2[right] = arr1[right];</span><br><span class="line">Sleep(<span class="number">1000</span>);</span><br><span class="line">left++;</span><br><span class="line">right--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在运行发现打印出来的效果是这样的<br><img src="/2022/05/16/%E5%B0%8F%E7%BB%83%E4%B9%A01/2022-05-16-17-22-11.png"><br>但我只要一行，不需要他保留之前的结果<br>所以每次打印后清空一次cmd窗口中的内容，用到<code>system()</code><br>使用<code>system()</code>函数，需要头文件<code>#include &lt;stdilb.h&gt;</code>该函数可以直接调用cmd窗口命令<br><code>system(&quot;cls&quot;)</code>中cls就是清空cmd屏幕的意思</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr1[] = <span class="string">&quot;hello_world&quot;</span>;</span><br><span class="line"><span class="type">char</span> arr2[] = <span class="string">&quot;           &quot;</span>;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(arr1);</span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> right = len - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">&#123;</span><br><span class="line">arr2[left] = arr1[left];</span><br><span class="line">arr2[right] = arr1[right];</span><br><span class="line">Sleep(<span class="number">1000</span>);</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>)</span><br><span class="line">left++;</span><br><span class="line">right--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码使用的库函数和需要引用的头文件可以在：<a href="http://www.cplusplus.com/">cplusplus</a>中查找<br>代码运行时出现的报错：<br>1.一个无法解析的外部符号<br>没引用头文件<br>2.warning C4828: 文件包含在偏移 0x725 处开始的字符，该字符在当前源字符集中无效(代码页 936)<br>在我博客搜索可以找到解决方案<br>3.代码正常运行，且无报错无警告<br>看看<code>printf()</code>是不是放错地方了.</p><hr><p>稍微改变下思路也可以从中间往两边打印</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr1[] = <span class="string">&quot;hello_world&quot;</span>;</span><br><span class="line"><span class="type">char</span> arr2[] = <span class="string">&quot;           &quot;</span>;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(arr1);</span><br><span class="line"><span class="type">int</span> left = (len/<span class="number">2</span>)<span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> right = len/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span> (left&gt;=<span class="number">0</span>||right&lt;=len<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">arr2[left] = arr1[left];</span><br><span class="line">arr2[right] = arr1[right];</span><br><span class="line">Sleep(<span class="number">1000</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">left--;</span><br><span class="line">right++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="猜数字游戏"><a href="#猜数字游戏" class="headerlink" title="猜数字游戏"></a>猜数字游戏</h2><p>先让玩家选择是否游玩<br>要求描述，随机生成一个0-100之间的数字，然后让玩家猜，没猜对，就告诉玩家是猜大了还是猜小了.<br>玩家一直猜，猜错就一直提示，直到猜对，返回是否游玩界面.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//菜单</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">nemu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;***请选择***\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;***1.play***\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;***0.end ***\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">game</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ret = rand();<span class="comment">//生成随机数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//打印菜单</span></span><br><span class="line">nemu();</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择是否游玩</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请选择：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line"><span class="keyword">switch</span> (input)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="comment">//游戏实现函数</span></span><br><span class="line">game();</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//跳出switch语句</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;游戏结束\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//跳出switch语句</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;选择错误，请重新选择\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//跳出switch语句</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (input);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择界面和菜单界面设计好了.<br>开始实现游戏内容部分.<br><code>rand()</code> - 生成一个0-32767的随机数<br><code>srand()</code> - 设置一个起点<br>先要生成一个随机数，需要使用<code>rand()</code>,调试的时候我把随机数打印出来看看对不对.打印后发现<br>随机数并不随机，如下图所示：生成的数是随机的，但是每次生成的数不是随机的<br><img src="/2022/05/16/%E5%B0%8F%E7%BB%83%E4%B9%A01/2022-05-19-12-24-47.png"><br>查阅<code>rand（）</code>使用文档后，知道，使用<code>rand()</code>之前需要先使用<code>srand（）</code>来设置随机数生成器<br>修改代码，加上srand再次调试<br><img src="/2022/05/16/%E5%B0%8F%E7%BB%83%E4%B9%A01/2022-05-19-12-40-25.png"><br>又发现问题，就是只有当<code>srand（）</code>括号里的数字发生变化，生成的随机数才会变化<br>那怎么才能让括号里的值一直发生变化呢，这里想到的是<strong>时间</strong>，时间是一直发生变化的.<br>那时间怎么变成一个数字呢，就是<strong>时间戳</strong>，时间戳详情百度.<br>在C语言中提供了一个函数<code>time()</code>,这个函数就会返回一个时间戳，返回的时间戳是你调用这个函数时候的那个时间点<br>但是就算这样的话，只要知道现在时间就能计算出时间戳.也不随机.<br>那就在time函数里加上一个空指针（NULL）这样就随机了，解释一下当你传过去空指针的时候，time函数就不会根据程序运行时候的时间生成时间戳.<br>但是time肯定会生成一个时间戳.这样就成随机了.<br>在查阅time函数使用文档，根据文档，time函数要引用头文件<code>#include &lt;time.h&gt;</code>,time函数返回值是一个整形类型<br>根据srand文档知道srand函数返回类型是<code>(unsigned int)</code>,所以这里直接把time函数的返回类型强制转换成<code>（unsigned int） </code><br>最后成品<code>srand((unsigned int)time(NULL))</code><br><img src="/2022/05/16/%E5%B0%8F%E7%BB%83%E4%B9%A01/2022-05-19-12-58-37.png"><br>继续调试<br><img src="/2022/05/16/%E5%B0%8F%E7%BB%83%E4%B9%A01/2022-05-19-13-03-47.png"><br>这样的原因是什么？<br>因为<code>srand((unsigned int)time(NULL))</code>放在了<code>game()</code>函数里，这么做的话，每次开始游戏就会调用一次.这就是造成上面这种现象的原因.<br>这么办呢，直接把它放到主函数里去，那他就只会被调用一次了<br><img src="/2022/05/16/%E5%B0%8F%E7%BB%83%E4%B9%A01/2022-05-19-13-10-17.png"><br>根据题目要求要的是0-100的随机数，那就先模（%）上100，0-32767模（%）100肯定是0-99，那在加1，不就是0-100了么<br>代码：<code>rand()%100+1</code><br>随机数的问题解决了，接下来就简单了.<br>给个位置让玩家输入猜的数<br>然后根据玩家输入的数和生成的随机数进行比较<br>大了就打印大了，小了就打印下了.一直猜，什么时候猜对了，退出game函数.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="comment">//菜单</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">nemu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;***请选择***\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;***1.play***\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;***0.end ***\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">game</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ret = rand()%<span class="number">100</span>+<span class="number">1</span>;<span class="comment">//生成随机数</span></span><br><span class="line"><span class="type">int</span> guess = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请猜数字：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;guess);</span><br><span class="line"><span class="keyword">if</span> (guess &gt; ret)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;猜大了\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (guess &lt; ret)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;猜小了\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;猜对了\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">srand((<span class="type">unsigned</span> <span class="type">int</span>)time(<span class="literal">NULL</span>));<span class="comment">//设置一个起点</span></span><br><span class="line"><span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//打印菜单</span></span><br><span class="line">nemu();</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择是否游玩</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请选择：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line"><span class="keyword">switch</span> (input)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="comment">//游戏实现函数</span></span><br><span class="line">game();</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//跳出switch语句</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;游戏结束\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//跳出switch语句</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;选择错误，请重新选择\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//跳出switch语句</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (input);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打印1-100中3的倍数"><a href="#打印1-100中3的倍数" class="headerlink" title="打印1-100中3的倍数"></a>打印1-100中3的倍数</h2><p>多种思路.先用循环，循环出1-100，在比较，能被3整除就是3的倍数.怎么判断能被3整除？用模，什么是模？，百度.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以用乘的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">ret = i * <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">100</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ret);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在优化一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">3</span>;i&lt;=<span class="number">100</span>;i+=<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求2个数的最大公约数"><a href="#求2个数的最大公约数" class="headerlink" title="求2个数的最大公约数"></a>求2个数的最大公约数</h2><p>什么是最大公约数？给两个数，能被这两个数同时整除的最大值，就是最大公约数<br>比如<br>12和24，最大公约数是12<br>9和12，最大公约数为3<br>1和13，最大公约数为1<br>其实列出来后仔细看看会发现，最大公约数一定不会超过2个数中小的那个数.<br>所以先比较哪个小在从哪个开始除就好了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> min = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line"><span class="keyword">if</span> (m &gt; n)</span><br><span class="line">&#123;</span><br><span class="line">min = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">min = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m % min == <span class="number">0</span> &amp;&amp; n % min == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;最小公约数是：%d&quot;</span>, min);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">min--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式不够简便，可以在优化<br>使用辗转相除法<br>什么是辗转相除法？<br>举例说明<br>输入24和18</p><blockquote><p>24 % 18 &#x3D; 6<br>18 % 6 &#x3D; 0<br>最大公约数就是6</p></blockquote><p>输入48和18</p><blockquote><p>48 % 18 &#x3D; 12<br>18 % 12 &#x3D; 6<br>12 % 6 &#x3D; 0<br>最大公约数是6</p></blockquote><p>如果说是小数字在前大数字在后呢<br>输入18和48</p><blockquote><p>18 % 48 &#x3D; 18<br>48 % 18 &#x3D; 12<br>18 % 12 &#x3D; 6<br>12 % 6 &#x3D; 0</p></blockquote><p>发现辗转相除法，不需要在乎大小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> min = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> tmp=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line"><span class="keyword">while</span> (tmp = m % n)</span><br><span class="line">&#123;</span><br><span class="line">m = n;</span><br><span class="line">n = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打印1000-2000之间的闰年"><a href="#打印1000-2000之间的闰年" class="headerlink" title="打印1000-2000之间的闰年"></a>打印1000-2000之间的闰年</h2><p>什么是闰年？能被4整除，不能被100整除，能被400整除的是闰年<br>先用个循环，循环出所有的年份，然后把满足要求的年份打印出来就好了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1000</span>; i &lt;= <span class="number">2000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((i % <span class="number">4</span> == <span class="number">0</span>) &amp;&amp; (i % <span class="number">100</span> != <span class="number">0</span>) || (i % <span class="number">400</span> == <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打印1000-2000之间的闰年-函数"><a href="#打印1000-2000之间的闰年-函数" class="headerlink" title="打印1000-2000之间的闰年(函数)"></a>打印1000-2000之间的闰年(函数)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">is_leap_year</span><span class="params">(<span class="type">int</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; a % <span class="number">100</span> != <span class="number">0</span>||a%<span class="number">400</span>==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1000</span>; i &lt;= <span class="number">2000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (is_leap_year(i) == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">is_leap_year</span><span class="params">(<span class="type">int</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; a % <span class="number">100</span> != <span class="number">0</span> || a % <span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1000</span>; i &lt;= <span class="number">2000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">is_leap_year(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打印100-200之间是素数"><a href="#打印100-200之间是素数" class="headerlink" title="打印100-200之间是素数"></a>打印100-200之间是素数</h2><p>什么是素数，素书即是质数。质数的定义：一个大于1的自然数，除了1和它本身外没有其它的约数。只能被1和他本身整除的就是素数，1不是素数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">100</span>; i &lt;= <span class="number">200</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">2</span>; j &lt; i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i % j == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j == i)</span><br><span class="line">count++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;count=%d&quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环出范围里的所有数，并用每个数去试除.除不尽后.跳出循环后i++加上1.<br>当i&#x3D;&#x3D;j就是素数.count是用来计算一共有几个素数.<br>这种算法效率太低,可以使用开平方，<code>sqrt()</code>，这个函数返回类型是double，但是我创建的i是整形，所以会自动丢掉小数点以后<br>只要产生2~&#96;sqrt(i)&#96;之间是数字去试除i,如果其中找到一个数字能整除i的话就不用找其他数字了.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">100</span>; i &lt;= <span class="number">200</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">2</span>; j &lt;= <span class="built_in">sqrt</span>(i); j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i % j == <span class="number">0</span>) </span><br><span class="line">&#123;</span><br><span class="line">tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tmp==<span class="number">1</span>) </span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;count=%d&quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里把tmp初识化为1，当<code>i % j == 0</code>就把tmp变成0，就说明不是素数就不打印，不然，出循环时tmp还是1就说说明这个是素数，就打印.<br>关于为什么比较到2~&#96;sqrt(i)&#96;就行，下面举例子说明<br>比如100，<br>100可以变成<br>1*100<br>2*50<br>4*25<br>5*20<br>10*10 &#x3D;&#x3D; （sqrt(100)）<br>这里是所有2个数相乘可以组成100的整数.<br>目前j的取值范围就是2-10（因为素数可以被1除，所以已经把1排除了）<br>把数值代入到代码中去<br>100 % 2 &#x3D;&#x3D; 0；<br>就已经确定不是素数了<br>而既然100%2可以等于0，<br>那100%50也肯定可以等于0.<br>换句话说，<br>只要模上组成100的两个数中的较小值，就不用再去模那个大的值了</p><p>在举个例子<br>135<br>1*135<br>5*27<br>11.618…=&#x3D;sqrt(135)(因为i是整形，所以这里去掉小数点以后变成11)<br>目前j的取值是2-11<br>把数值代入代码<br>135 % 5 &#x3D;&#x3D; 0<br>所以135不是素数</p><p>在来个是素数的例子<br>101<br>1*101<br>10.04=&#x3D;sqrt(101)(因为i是整形，所以这里去掉小数点以后变成11)<br>目前j的取值是2-10<br>101 % 2 !&#x3D; 0<br>101 % 3 !&#x3D; 0<br>101 % 4 !&#x3D; 0<br>...<br>101 % 10 !&#x3D; 0<br>跳出循环<br>tmp&#x3D;&#x3D;1，就说明是素数，然后打印</p><p>上面的代码还可以继续优化<br>怎么优化呢<br>既然求的是素数，那双数肯定不是素数（因为双数都可以被2整除）所以只要列出100-200之间的单数比较就行了<br>代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="built_in">sqrt</span>(<span class="number">101</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">101</span>; i &lt;= <span class="number">200</span>; i+=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">2</span>; j &lt;= <span class="built_in">sqrt</span>(i); j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i % j == <span class="number">0</span>) </span><br><span class="line">&#123;</span><br><span class="line">tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tmp==<span class="number">1</span>) </span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;count=%d&quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打印100-200之间素数（函数）"><a href="#打印100-200之间素数（函数）" class="headerlink" title="打印100-200之间素数（函数）"></a>打印100-200之间素数（函数）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">is_Prime_number</span><span class="params">(<span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j =<span class="number">2</span>; j &lt;= <span class="built_in">sqrt</span>(i); j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i % j == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">101</span>; i &lt;= <span class="number">200</span>; i+=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (is_Prime_number(i) == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n%d&quot;</span>, count);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习（初识）</title>
      <link href="/2022/05/15/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%88%9D%E8%AF%86%EF%BC%89/"/>
      <url>/2022/05/15/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%88%9D%E8%AF%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="hello-word"><a href="#hello-word" class="headerlink" title="hello word"></a>hello word</h2><p> 1.创建一个项目<br> 2.创建一个源文件（.c）<br> 3.写代码<br> 4.编译代码+运行<br> 写代码   &#x2F;&#x2F;注意在写代码过程中一定要用英文输入法，中文的没法读.每段代码结束后面加上；<br>1.写出主函数（main函数）<br> c语言是从主函数的第一行开始执行<br> int&#x3D;返回类型 &#x2F;&#x2F;返回一个值<br> printf  &#x2F;&#x2F;输出  &#x2F;&#x2F;库函数 在屏幕上打印信息<br> stdio.h  &#x2F;&#x2F;引用头文件<br> include &#x2F;&#x2F;包含头文件的意思<br> **\n  \n的意思是分行<br> 一个.c文件只能有一个main（）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line"> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello word\n&quot;</span>);</span><br><span class="line">    getchar ();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="字符数据类型"><a href="#字符数据类型" class="headerlink" title="字符数据类型"></a>字符数据类型</h2><p>   char  &#x2F;&#x2F;字符数据类型<br> short    &#x2F;&#x2F;短整型<br> int   &#x2F;&#x2F;整形<br> long   &#x2F;&#x2F;长整形<br> longlong   &#x2F;&#x2F;长长整形<br> float    &#x2F;&#x2F;单精度浮点数<br> double   &#x2F;&#x2F;双精度浮点数<br> sizeof   &#x2F;&#x2F;关键字-操作符-计算机类型或变量所占空间的大小 &#x2F;&#x2F;单位是字节（byte）<br> c语言规定sizeof（long）只要大于等于sizeof（int）就可以，不需要大于.<br> 计算机单位：计算机最小单位bit-比特位<br> byte字节 1byte&#x3D;8bit &#x2F;&#x2F;kb&#x3D;1024byte  &#x2F;&#x2F;mb&#x3D;1024kb  &#x2F;&#x2F;gb&#x3D;1024mb  &#x2F;&#x2F;tb&#x3D;1024gb &#x2F;&#x2F;pb&#x3D;1024tb<br> 8进制0-7  &#x2F;&#x2F;10进制0-9</p><h2 id="初始长量变量"><a href="#初始长量变量" class="headerlink" title="初始长量变量"></a>初始长量变量</h2><p>  定义变量的方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="type">int</span> age = <span class="number">150</span>;   <span class="comment">//age是自己取的名字 //创建一个变量</span></span><br><span class="line">     <span class="type">double</span> weight = <span class="number">75.3</span>;  <span class="comment">//weight是体重的意思,也是自定义</span></span><br><span class="line">     age = age + <span class="number">1</span>;   <span class="comment">//变量可变</span></span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>,weight);  <span class="comment">//打印体重  //%lf是打印浮点数 //整数用%d,小数用%lf</span></span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,age);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;由于不知道什么原因，代码块下面的拖动条如果后面不加上2行字就动不了<br>&#x2F;&#x2F;所以后面有拖动条的代码块都会加上&#x2F;&#x2F;</p><h2 id="变量的分类"><a href="#变量的分类" class="headerlink" title="变量的分类"></a>变量的分类</h2><p> 局部变量  全局变量<br> 在大括号({})里面的叫局部变量,在大括号外面的叫全局变量<br> 当局部变量和全局变量冲突的时候（比如局部a&#x3D;10，全局a&#x3D;100）那么是局部变量优先 ps：不建议全局变量和局部变量用同一个字符 </p><h2 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h2> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>;   </span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span> (<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);  <span class="comment">//scanf是输入函数   //只是对数据做一个存放</span></span><br><span class="line">    sum = a + b;    <span class="comment">//sum=和</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, sum);   <span class="comment">//前面的sum=只打印， 后面的sum和%d对应，表示以整形的方式打印sum的值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上直接编译会报错，因为用了scanf<br>VScode2022可能不会报错，如果报错还一定要用的话，在整个程序第一行，一定要第一行输入#define _CRT_SECURE_NO_WARNINGS 1；<br>vs编译器中提供了一个scanf_s,但是只能在vs的编译器里用.</p><h2 id="变量的作用域和声明周期"><a href="#变量的作用域和声明周期" class="headerlink" title="变量的作用域和声明周期"></a>变量的作用域和声明周期</h2><p>作用域：哪里起作用哪里就是作用域.<br>局部变量的作用域；就是局部变量所在的范围，{}包起来的就是局部变量的范围<br>全局变量的作用域：整个工程<br> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1:%d\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> b = <span class="number">5</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2:%d\n&quot;</span>, a);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;3:%d\n&quot;</span>, b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;4:%d\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> extern – 声明函数，在另一个.c文件中指明目前.c文件的全局变量，就可以在另一个.c文件中使用<br> 例如现在在另一个.c文件中的代码是<code>int d = 114514；</code><br> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> d;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, d);  <span class="comment">//输出114514</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="变量生命周期"><a href="#变量生命周期" class="headerlink" title="变量生命周期"></a>变量生命周期</h2><p>局部变量的生命周期：进入局部范围开始出局部范围生命结束<br>全局变量的生命周期：程序的生命周期（main函数开始到结束）</p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><h3 id="1-字面常量"><a href="#1-字面常量" class="headerlink" title="1.字面常量"></a>1.字面常量</h3><p>不会变的常量，可以是一个数字比如1,2,3,可以是一个字符一个字符串比如”a”,”b”，”bc,”hjahf”</p><h3 id="2-const修饰的常变量"><a href="#2-const修饰的常变量" class="headerlink" title="2.const修饰的常变量"></a>2.const修饰的常变量</h3><p>在变量前面加上const变量就不会变.见下文<br>常变量还是变量，数组里不能用变量.<br>常变量属于变量，不是常量. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123; </span><br><span class="line">   <span class="type">const</span> <span class="type">int</span> a = <span class="number">10</span>；   <span class="comment">//常变量</span></span><br><span class="line">   a = <span class="number">20</span>;              </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);   <span class="comment">//加上了constd在输入a = 20 运行就会报错</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>就算加上了const变量还是变量，不会变成常量</p><h3 id="3-define定义的标识符常量"><a href="#3-define定义的标识符常量" class="headerlink" title="3.#define定义的标识符常量"></a>3.#define定义的标识符常量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 10000     <span class="comment">//此时MAX是一个标识符常量，不可以被 MAX = ***；更改为其他数</span></span></span><br><span class="line"> MAX = <span class="number">20000</span>       err  <span class="comment">//上面加上#define后， MAX的数不可以被更改</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;<br>&#x2F;&#x2F;</p><h3 id="4-枚举常量（enum）"><a href="#4-枚举常量（enum）" class="headerlink" title="4.枚举常量（enum）"></a>4.枚举常量（enum）</h3><p>可以被一一列举的常量.枚举常量从0开始.<br>枚举常量的格式:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sex</span>       //<span class="title">sex</span>是性别的意思（自定义）</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//这种枚举变量的未来可能取值</span></span><br><span class="line">MALE,          <span class="comment">//可以在&#123;&#125;里面加上值，比如MALE = 2,这种值叫赋初值.只能在&#123;&#125;里面赋初值，不能在&#123;&#125;外面赋初值.</span></span><br><span class="line">FEMALE,       <span class="comment">//这三个英文是男，女，保密，的意思（自定义）</span></span><br><span class="line">SECRET        <span class="comment">//3个量之间用逗号隔开</span></span><br><span class="line">&#125;;                <span class="comment">//结尾有分号</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> <span class="title">s</span> =</span> MALE; </span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> <span class="title">s</span> =</span> FENALE;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> <span class="title">s</span> =</span> SECRET;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;<br>&#x2F;&#x2F;</p><h2 id="初识字符串"><a href="#初识字符串" class="headerlink" title="初识字符串"></a>初识字符串</h2><h3 id="1-字符"><a href="#1-字符" class="headerlink" title="1.字符"></a>1.字符</h3><p>被’’单个包起来的是字符，被””包起来的单个或者多个是字符串，字符串结尾自带”\0”</p><h3 id="2-字符数组"><a href="#2-字符数组" class="headerlink" title="2.字符数组"></a>2.字符数组</h3><p>是一组相同类型的元素<br>每个字符串在结尾的位置隐藏了一个\0的字符，\0是字符串结束标志.<br>比如”hello”,是由 h、e、l、l、o、\0六个元素组成.<br><code>char arr[] = &quot;hello&quot;;</code>      &#x2F;&#x2F;char是字符串类型 arr[]是创建数组<br><code>char arr1[] = &quot;abc&quot;;</code><br><code>char arr2[] = &#123;’a’，’b’，’c’&#125;;</code>        &#x2F;&#x2F;可以在添加一个\0作为结束<br>%s是引用char类型的意思<br><code>printf（&quot;%s\n&quot;, arr1);</code>    输出为abc<br><code>printf（&quot;%s\n&quot;, arr2);</code>    输出为abc烫烫烫bc   &#x2F;&#x2F;烫烫烫bc是乱码    &#x2F;&#x2F;加上\0结果为abc，不加上则为乱码<br><code>int len = strlen（&quot;***&quot;）;</code>&#x2F;&#x2F;strlen全名是string length是求字符串长度的意思，len是自己给的名字<br> <code>printf(&quot;%d\n&quot;, len);</code>        &#x2F;&#x2F;结果为3<br> 在计算字符串长度的时候\0是不计算在长度里的.如果没有\0则会无限计算下去，直到遇到\0停下.<br>提示报错strlen未定义，因为没有引用头文件#include &lt;string.h&gt;,头文件可以多个引用.<br>如果没在数组后加上\0,在计算数组长度的时候会是一个随机值.<br>监视窗口打开方法：F10-调试-窗口-监视</p><h2 id="初识转义字符"><a href="#初识转义字符" class="headerlink" title="初识转义字符"></a>初识转义字符</h2><p>在想输出三字母词的时候会被变成别的，比如想输出??),会变成],想输出\n的时候会变成换行.<br>vs2022已经不支持三字母了<br>%c是打印字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//打印一个逗号</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, <span class="string">&#x27;\&#x27;&#x27;</span>);   <span class="comment">//如果想输出一个逗号，直接用引号把逗号包起来不行，要加上一个反斜杠，这就是转义字符</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, <span class="string">&#x27;a&#x27;</span>);        <span class="comment">//%c打印字符，字符用英文单引号包起来</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">100</span>);       <span class="comment">//%d打印整形，整形不用包起来直接用</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;abc&quot;</span>);     <span class="comment">//%s打印字符串，字符串用英文双引号 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, <span class="number">3.1415</span>);    <span class="comment">//$lf打印浮点数，浮点数不用包起来直接用</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, a);          <span class="comment">//%p用来打印地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;b&quot;</span>);        <span class="comment">//如果用%s打印字符串，要用双引号包起来</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;\\t&quot;</span>);     <span class="comment">//想输出\t \n 之类的，在前面加上\就好了</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ASCII码值：详情百度.<br><code>\ddd</code>:ddd是自己取的3个数字，数字必须是8进制的<br> <code>\xdd</code>:dd是自己取的2个数字，数字必须是16进制的<br>8进制转换：从最右边开始，第一个数乘以8的0次方，第二个数乘以8的二次方，以此类推<br> 例：130是8进制     等于1乘8的2次方+3乘8的1次方+0乘8的0次方<br>10进制转换：从最右边开始，第一个系数乘以10的0次方，第二个系数乘以10的1次方，最后相加.<br><code>printf（&quot;%c\n&quot;, ’\130’）</code>   &#x2F;&#x2F;输出结果是X. &#x2F;&#x2F;用%d会输出10进制数88，用%c会输出X<br> \130中130表示的的8进制数，加上\后，会把130从8进制转换成10进制数，在把10进制数转换成对应的ASCII码值<br> 因为\130从8进制转换成10进制数是88，而88对应的10进制ASCII码值是X，所以最后输出的结果是X   &#x2F;&#x2F;ASCII码值对应值请百度</p><h2 id="初识选择语句if-else"><a href="#初识选择语句if-else" class="headerlink" title="初识选择语句if else"></a>初识选择语句if else</h2> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> input = <span class="number">0</span>;   <span class="comment">//输入的值,ibput是输入的意思，可以自己取名字</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;加入比特:&gt;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;那要好好学习吗(1/0)?:&gt;\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);        <span class="comment">//scanf是放一个可以输入的空间</span></span><br><span class="line"><span class="keyword">if</span> (input == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;好offer\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;卖红薯\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="初识循环语句"><a href="#初识循环语句" class="headerlink" title="初识循环语句"></a>初识循环语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//while循环</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;  <span class="comment">//a自定义</span></span><br><span class="line"><span class="keyword">while</span>(a&lt;<span class="number">1145</span>)    <span class="comment">//while是循环   //while后面不能有分号！！！</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;写代码:%d\n&quot;</span>, a);      </span><br><span class="line">a++; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1145</span>)         <span class="comment">//if后面不能有分号</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;好offer\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>什么是函数，y&#x3D;kx+b就是函数也可以写成f(x)&#x3D;kx+b</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> axy, <span class="type">int</span> bxy)</span><span class="comment">//对函数做定义&#123;int Add（）&#125;，就是这个函数该干什么</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> d = <span class="number">0</span>;</span><br><span class="line">d = axy + bxy;    <span class="comment">//用函数做加法</span></span><br><span class="line"><span class="keyword">return</span> d;    <span class="comment">//最后returm d；输出函数的值    </span></span><br><span class="line">&#125;                   </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>         </span><br><span class="line">&#123;                   </span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;       </span><br><span class="line"><span class="type">int</span> b = <span class="number">0</span>;                          </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b); <span class="comment">//先创建2个可以输入值的地方（scanf），别忘记加上&amp;</span></span><br><span class="line"><span class="type">int</span> c = Add(a, b);<span class="comment">////要打印出来函数值，先给他赋值，int c = Add（a，b）；</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;<br>&#x2F;&#x2F;</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组-一种相同类型的元素集合<br>char ch[5] &#x3D; {‘a’,’b’,’c’};   &#x2F;&#x2F;给了5个元素的位置，但是只放了三个，这种没放满的叫不完全初始化，剩余的默认为0</p><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><h3 id="1-算数操作符"><a href="#1-算数操作符" class="headerlink" title="1.算数操作符"></a>1.算数操作符</h3><p>算数操作符：+ - * &#x2F; %    &#x2F;&#x2F;%是取模（余） &#x2F;&#x2F;什么是余？ &#x2F;&#x2F;比如9&#x2F;2，那么2乘4等于8,9-8&#x3D;1，这个1就是余数<br> int a &#x3D; 9&#x2F;2          &#x2F;&#x2F;输出结果是4<br> float a &#x3D; 9&#x2F;2         &#x2F;&#x2F;输出结果还是4   &#x2F;&#x2F;flota是单精度浮点数<br> 如果9&#x2F;2，9和2都是整数那么得到的结果都是整数，只要其中一个加上小数点就是4.5. 比如9&#x2F;2.0、9.0&#x2F;2、9.0&#x2F;2.0.</p><h3 id="2-移位操作符：-gt-gt-lt-lt"><a href="#2-移位操作符：-gt-gt-lt-lt" class="headerlink" title="2.移位操作符：&gt;&gt;   &lt;&lt;"></a>2.移位操作符：&gt;&gt;   &lt;&lt;</h3><p><code>int a = 2;</code><br><code>int b =a &lt;&lt; 1；</code><br><img src="/2022/05/15/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%88%9D%E8%AF%86%EF%BC%89/2022-05-15-09-50-47.png"></p><h3 id="3-赋值操作符："><a href="#3-赋值操作符：" class="headerlink" title="3.赋值操作符："></a>3.赋值操作符：</h3><p>&#x3D; , +&#x3D; , -&#x3D; , *&#x3D; , &#x2F;&#x3D; , &amp;&#x3D; , ^&#x3D; , |&#x3D; , &gt;&gt;&#x3D; , &lt;&lt;&#x3D;</p><h3 id="4-双目操作符"><a href="#4-双目操作符" class="headerlink" title="4.双目操作符"></a>4.双目操作符</h3><p>有两个操作数，比如a+b，a和b是两个操作数，</p><h3 id="单目操作符"><a href="#单目操作符" class="headerlink" title="单目操作符"></a>单目操作符</h3><h4 id="！逻辑操作符"><a href="#！逻辑操作符" class="headerlink" title="！逻辑操作符"></a>！逻辑操作符</h4><p>把假变成真，真变成假。c语言中0代表假，非0为真<br><code>int a = 0；</code><br><code>printf（&quot;%d\n&quot;, !a）;</code>   &#x2F;&#x2F;结果为 1    &#x2F;&#x2F;0代表假，!a把假变为真，真就输出1（c语言规定）<br><code>int a = 1；</code><br><code>printf（&quot;%d\n&quot;, !a）;</code>  &#x2F;&#x2F;结果为 0    &#x2F;&#x2F;1代表真，!a把真变为假 ，假就输出0</p><h4 id="2"><a href="#2" class="headerlink" title="2.-"></a>2.-</h4><p> 负值</p><h4 id="3"><a href="#3" class="headerlink" title="3.+"></a>3.+</h4><p> 正值</p><h4 id="4-amp"><a href="#4-amp" class="headerlink" title="4.&amp;"></a>4.&amp;</h4><p> 取地址</p><h4 id="5-sizeof"><a href="#5-sizeof" class="headerlink" title="5.sizeof"></a>5.sizeof</h4><p> 操作数的类型长度（单位&#x2F;字节）1字节&#x3D;8比特   整形占用4字节<br> sizeof计算的是字节，所以在计算数组的时候，数组中一个数字（整形）占用4字节</p><h4 id="6"><a href="#6" class="headerlink" title="6.~"></a>6.~</h4><p> 按位取反<br>原码取反得到反码，反码+1得到补码（反之亦然）<br>整数在内存中存的是补码（最后输出的是原码）<br>1按位取反<br><img src="/2022/05/15/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%88%9D%E8%AF%86%EF%BC%89/2022-05-15-09-58-55.png"><br>-1的按位取反<br><img src="/2022/05/15/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%88%9D%E8%AF%86%EF%BC%89/2022-05-15-10-02-14.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ~a);  <span class="comment">//结果为-1 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-–"><a href="#7-–" class="headerlink" title="7.++ –"></a>7.++ –</h4><p>前置++<br>例：++a     先加在用<br>后置++<br>例：a++     先用在加<br>–一样</p><h4 id="8"><a href="#8" class="headerlink" title="8.*"></a>8.*</h4><p>间接访问操作符（解引用操作符）</p><h4 id="9-（类型）"><a href="#9-（类型）" class="headerlink" title="9.（类型）"></a>9.（类型）</h4><p>例 int a &#x3D; 3.14<br>   printf（”%d\n”, a）;<br>这样输出会报警 ，从浮点数到整形会丢失数据<br>这时在前面加上 int a &#x3D; 3.14<br>                printf（”%d\n”, (int)a);<br>这样就不会报警</p><h4 id="10-算数符"><a href="#10-算数符" class="headerlink" title="10.算数符"></a>10.算数符</h4><blockquote><p>&gt;,     &lt;,    &lt;&#x3D;,       &gt;&#x3D;，      !&#x3D;,    &#x3D;&#x3D;,</p></blockquote><h4 id="11-逻辑与：-amp-amp"><a href="#11-逻辑与：-amp-amp" class="headerlink" title="11.逻辑与：&amp;&amp;"></a>11.逻辑与：&amp;&amp;</h4><h4 id="12-逻辑或："><a href="#12-逻辑或：" class="headerlink" title="12.逻辑或：||"></a>12.逻辑或：||</h4><p>逻辑与和逻辑或反应真假问题.就是{与（&amp;&amp;）}起来或者{或（||）}起来.是真就输出真（1），假就输出假（0）.</p><h4 id="13-条件操作符，也叫三目操作符"><a href="#13-条件操作符，也叫三目操作符" class="headerlink" title="13.条件操作符，也叫三目操作符"></a>13.条件操作符，也叫三目操作符</h4><p> exp1 ? exp2 : exp3<br>exp1成立，exp2计算 整个表达式的结果是：exp2的结果<br>exp1不成立，exp3计算 整个表达式的结果是:exp3的结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> d = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (a &gt; b)</span><br><span class="line">d = a;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">d = b;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上语句可以直接写成:d &#x3D; a &gt; b ? a : b;</p><h4 id="14-逗号表达式"><a href="#14-逗号表达式" class="headerlink" title="14.逗号表达式"></a>14.逗号表达式</h4><p>逗号隔开的一串表达式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="number">3</span>; <span class="comment">//计算顺序是，先算a=b+c，然后把算出来a的值代入b=a+c，最后吧计算后的a和b的值代入c.</span></span><br><span class="line"><span class="type">int</span> d = (a = b + c, b = a + c, c = a + b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, d);<span class="comment">//输出13     //逗号表达式是从左到右依次计算</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;<br>&#x2F;&#x2F;</p><h4 id="15-下标引用，函数调用和结构成员"><a href="#15-下标引用，函数调用和结构成员" class="headerlink" title="15.下标引用，函数调用和结构成员"></a>15.下标引用，函数调用和结构成员</h4><p>[],  (),  .,  -&gt;</p><h2 id="初识常见关键字"><a href="#初识常见关键字" class="headerlink" title="初识常见关键字"></a>初识常见关键字</h2><p>c语言提供的关键字<br>1.c语言提供的，不能自己创建关键字<br>2.变量名不能是关键字<br>auto–是自动的，每个局部变量都是auto修饰的<br> break–跳出变量<br> case–没讲（case语句的时候会讲）<br> char–字符类型<br> const–常变量<br> continue–继续<br> default–默认<br> do–dowhile循环<br> double–双精度浮点数<br> else–else语句（if那里出现的）<br> enum–枚举<br> extern–声明外部符号–声明变量<br> float–单精度浮点数<br> for–for循环<br> goto–goto语句<br> if–if语句<br> int–整形<br> long–长整形<br> register–寄存器关键字<br> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="type">int</span> a = <span class="number">1</span>;<span class="comment">//作用是：建议a的值存放在寄存器中   ps：仅仅是建议，放不放不知道，编译器自己说了算</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>计算机中数据的存储<br>计算机中的数据可以存放到那些内容中去呢？<br> 内存，硬盘，网盘，高速缓存，寄存器<br> return–返回值<br> short–短整形<br> signed–有符号位的，描述的数字有符号的有正负的，和他相对应的有unsigned<br> unsigned–无符号的<br> sizeof–计算所占空间大小（单位&#x2F;字节）<br> static–静态的<br> struct–结构体<br> switch–switch结构语句<br> typedef–类型定义  也叫类型重命名，就是给特别长的关键字缩写<br> union–联合体（共用体）<br> void–无，没有，空的意思<br> volatile–体现c语言段位的意思，c语言暂时不讲<br> while–循环<br>define–不是关键字是预处理指令<br>include–不是关键字是预处理指令</p><h2 id="常见关键字"><a href="#常见关键字" class="headerlink" title="常见关键字"></a>常见关键字</h2><h3 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h3><p>类型定义  也叫类型重命名，就是给特别长的关键字缩写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> u_int;    <span class="comment">//typedef就是给特别长的关键字一个缩写</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> a = <span class="number">0</span>;   <span class="comment">//unsigned是无符号的意思</span></span><br><span class="line">u_int a = <span class="number">0</span>;          </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="static-静态的"><a href="#static-静态的" class="headerlink" title="static-静态的"></a>static-静态的</h3><p>1.static修饰局部变量<br>static修饰局部变量，改变了局部变量的生命周期（本质上是改变了变量的存储类型）<br>静态局部变量，生命周期是全局的，作用域是局部的</p><p>2.static修饰全局变量<br>static修饰全局变量，会使这个全局变量只能在自己所在的源文件里使用<br>其他源文件不能用！！！<br>全局变量在其他源文件可以使用，是因为全局变量具有外部链接属性<br>但是被static修饰之后，就变成了内部链接属性，其他源文件就链接不到这个静态的全局变量了</p><p>3.static修饰函数<br>static修饰函数，使函数也只能在自己所在的源文件内部使用，和修饰全局变量一样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span>                                                         </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;<span class="comment">//循环10次，每次新建一个a，所以是10个1</span></span><br><span class="line">a++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a);<span class="comment">//输出10个1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>                       </span><br><span class="line">&#123;                        </span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) </span><br><span class="line">&#123;</span><br><span class="line">test();</span><br><span class="line">i++;        </span><br><span class="line">&#125;             </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">static</span> <span class="type">int</span> a = <span class="number">0</span>;<span class="comment">//循环10次，被static修饰后每次不新建一个a，所以是1到10</span></span><br><span class="line">a++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a);<span class="comment">//输出1 2 3 4 5 6 7 8 9 10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>                       </span><br><span class="line">&#123;                                 </span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">test();</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;<br>&#x2F;&#x2F;</p><h2 id="定义常量和宏"><a href="#定义常量和宏" class="headerlink" title="定义常量和宏"></a>定义常量和宏</h2><p>define–预处理指令<br> 定义常量：<br> #define MAX 1000；</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">定义宏</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> hanshu(x,y) x+y  <span class="comment">//这就是定义宏</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;                          <span class="comment">//上面宏最后的xy没加括号</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">4</span>*hanshu(<span class="number">2</span>, <span class="number">3</span>));  <span class="comment">//运算结果是 4*2+3=11  </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> hanshu(x,y) ((x)+(y))</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>                <span class="comment">//加上括号后才算的是整体</span></span><br><span class="line">&#123;                            <span class="comment">//4*（2+3）</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">4</span> * hanshu(<span class="number">2</span>, <span class="number">3</span>));<span class="comment">//4*(2+3)=20</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="初识指针"><a href="#初识指针" class="headerlink" title="初识指针"></a>初识指针</h2><p> &amp; - 取地址<br> * -  解引用操作符<br>内存中地址是16进制，16进制1-9是数字表达，10<del>15是字母a\</del>f<br>%p用来打印地址<br> 在新建一个变量的时候<code>int a = 10 </code>会在内存中分配一个4字节的空间，这个空间有自己的地址.<code>int* pa =&amp;a；</code>就是把地址放到一个新的空间中(pa).<br> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;   <span class="comment">//定义了一个a，a会在内存中被分配4个字节</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;a);<span class="comment">//%p打印地址  //&amp;是取地址的意思 //这里的地址每次都是随机的</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> a = <span class="number">10</span>；</span><br><span class="line">    <span class="type">int</span>* pa = &amp;a   <span class="comment">//pa是用来存放地址的，在c语言中pa叫指针变量  //在int 后面加上* ，就说明pa是指针变量</span></span><br><span class="line">    *pa = <span class="number">20</span>；    <span class="comment">//*pa可以直接改变变量的值    //* - 解引用操作符</span></span><br><span class="line">   通过pa中的地址，找到a的地址，改变a的值.</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>指针变量的大小<br>指针需要多大的空间，取决地址的存储需要多大空间<br>32位系统是4字节，64位是8字节</p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>struct–结构体 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">jiegouti</span>            //创建一个结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> mingzi[<span class="number">10</span>];      <span class="comment">//一一对应的类型和自定义名字</span></span><br><span class="line"><span class="type">int</span> nianling;</span><br><span class="line"><span class="type">double</span> tizhong;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//.--点操作符</span></span><br><span class="line"><span class="comment">//-&gt;--箭头操作符</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">jiegouti</span> <span class="title">a</span> =</span> &#123; <span class="string">&quot;张三&quot;</span>, <span class="number">20</span>, <span class="number">75.5</span>&#125;;       <span class="comment">//结构体的创建和初始化</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %d %lf\n&quot;</span>, a.mingzi, a.nianling, a.tizhong); <span class="comment">//结构体变量，成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">jiegouti</span>* <span class="title">pa</span> =</span> &amp;a;           <span class="comment">//指针     //结构体也可以用指针</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %d %lf\n&quot;</span>, (*pa).mingzi,(*pa).nianling,(*pa).tizhong); <span class="comment">//指针+点操作符</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %d %lf\n&quot;</span>, pa-&gt;mingzi, pa-&gt;nianling, pa-&gt;tizhong);    <span class="comment">//-&gt;箭头操作符  //要有（struct jiegouti* pa = &amp;a;）才能用</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;<br>&#x2F;&#x2F;</p><h2 id="分支语句if-else"><a href="#分支语句if-else" class="headerlink" title="分支语句if else"></a>分支语句if else</h2><p>c语言是结构化的程序语言：顺序结构，选择结构，循环结构.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span> (a &lt; <span class="number">10</span>)                  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);   <span class="comment">//如果写成else（20&lt;=a&gt;=10）;结果是不对的，要用&amp;&amp;或者||</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a &gt;= <span class="number">10</span> &amp;&amp; a &lt;= <span class="number">20</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a &gt; <span class="number">20</span> &amp;&amp; a &lt; <span class="number">30</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span>)               </span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">2</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);            </span><br><span class="line"><span class="keyword">else</span>       <span class="comment">//else会和最近的if匹配                </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);            </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;    <span class="comment">//代码结果是什么都不输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为这样写就相当于</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span>) </span><br><span class="line">      &#123;              </span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">2</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);            </span><br><span class="line"><span class="keyword">else</span>                       </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>); </span><br><span class="line">      &#125;           </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><p>编程时要注意代码的分行，养成好的书写代码习惯.<br>《高质量c++编程》作者：林锐（博士） 完成日期：2001.7.24  没实体书.</p><h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><p> case语句<br> break–跳出 ，停止<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">switch（整形表达式）</span><br><span class="line">&#123;</span><br><span class="line">语句项</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);            <span class="comment">//给一个可以输入的空间</span></span><br><span class="line"><span class="keyword">switch</span> (a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:                       </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);   <span class="comment">//case前面给一个值，你输入就输出对应的东西</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:           <span class="comment">//这样写如果给1，会输出1 2 3 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3&quot;</span>);   <span class="comment">//给2会输出2 3 </span></span><br><span class="line">&#125;                 <span class="comment">//他不会自己停下，会一直运行到结束</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);     <span class="comment">//break 跳出停止的意思</span></span><br><span class="line"><span class="keyword">switch</span> (a)          <span class="comment">//要想不发生上面的情况在结尾加上break</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);      <span class="comment">//case后面必须是整形常量表达式</span></span><br><span class="line"><span class="keyword">break</span>;             <span class="comment">//字符也可以在case后面</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:                       </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:                  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;                        </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;                                   </span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line"><span class="keyword">switch</span> (a) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:    <span class="comment">//输入1-3输出1</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:        <span class="comment">//输入5-6输出2</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;              <span class="comment">//最后的break可加可不加，最好加上      </span></span><br><span class="line"><span class="keyword">default</span> :        <span class="comment">//default语句，当输入的值没有出现在要求中，就可以使用default</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入错误&quot;</span>);       </span><br><span class="line"><span class="keyword">break</span>;        <span class="comment">//default和case的顺序无所谓，不过习惯放在最后</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;<br>&#x2F;&#x2F;</p><h2 id="循环语句while"><a href="#循环语句while" class="headerlink" title="循环语句while"></a>循环语句while</h2><p>break–停止，跳出<br>continue–继续</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (a &lt; <span class="number">10</span>)                    </span><br><span class="line">&#123;                                 </span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">5</span>)</span><br><span class="line"><span class="keyword">break</span>; / <span class="keyword">continue</span>;<span class="comment">//如果是break，则a走到5时程序结束</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);   <span class="comment">//如果是continue，则a走到5时程序会跳到while (a &lt; 10)这一行无限循环下去</span></span><br><span class="line">a++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EOF – end of file –文件结束标志<br>getchar（）–从键盘获得一个字符<br>putchar（）–输出获得的字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((a = getchar()) != EOF)  <span class="comment">//从键盘获得一个字符放到a里，如果这个字符不是EOF（错误）</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">putchar</span>(a);    <span class="comment">//把获得的字符打印出来            </span></span><br><span class="line">&#125;                 <span class="comment">//想要结束就ctrl+z，就读取结束</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;<br>&#x2F;&#x2F;</p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>一个基本的while循环有三个部分</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> main（）</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>；               初始化</span><br><span class="line"><span class="keyword">while</span>（a&lt;<span class="number">10</span>）             判断部分</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>（<span class="string">&quot;***&quot;</span>）</span><br><span class="line">a++；                 调整部分 </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> for循环的基本结构：for (初始化; 判断部分; 调整部分)<br>for循环的特点，初始化部分只被循环一次<br>break–跳出，停止<br>continue–继续</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (a=<span class="number">1</span>; a&lt;<span class="number">10</span>; a++)   <span class="comment">//a=1只被循环一次</span></span><br><span class="line">&#123;   </span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">5</span>)           <span class="comment">//加了continue之后，当a==5时会回到for (a=1; a&lt;10; a++)这一行，不执行printf(&quot;%d\n&quot;, a);</span></span><br><span class="line"><span class="keyword">continue</span>;          <span class="comment">//continue上去后会继续执行a&lt;10;a++;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);  <span class="comment">//输出1234 6789         </span></span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">&#125;                      </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环体内不建议在加循环（可以加但是不建议）<br>for循环的变种</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (;;)    <span class="comment">//for循环的三个部分从语法上都可以省略.但是判断部分的省略就会使得代码死循环</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hh\n&quot;</span>); <span class="comment">//输出无限个hh</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;<br>&#x2F;&#x2F;</p><h2 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h2><p>for和while都是先判断在循环，do..while是先循环在判断<br>因为循环体至少要执行一次，所以应用场合不多</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">5</span>)         <span class="comment">//brake和另外两个循环一样，结束循环</span></span><br><span class="line"><span class="keyword">continue</span>;               </span><br><span class="line">            </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);   <span class="comment">//输出01234无限循环</span></span><br><span class="line">a++;</span><br><span class="line">&#125; <span class="keyword">while</span> (a &lt; <span class="number">10</span>);   <span class="comment">//最后的分号不能省略 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="goto语句"><a href="#goto语句" class="headerlink" title="goto语句"></a>goto语句</h2><p>C语言中提供了可以随意滥用的goto语句和标记跳转符号<br>从理论上降goto语句是没有必要的，实践中没有goto语句也可以很容易写出代码<br>但在某些场合goto语句还是能用到的，最常见的做法就是终止程序在某些深度嵌套的结构的处理过程，例如一次跳出两层或多层循环<br>这种情况使用break是达不到的，break只能从最内层循环退出到上一层循环</p><p>一个关机程序,只要运行起来电脑会在一段时间内关机；如果输入：我是猪，就取消关机.<br>      shutdown -s -t 60<br>shut down是英文关闭的意思<br>-s表示设置关机<br>-t表示设置时间<br>60表示设置的时间<br>shutdown -a取消关机<br>c语言提供了一个函数system()–执行系统命令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> c[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">system(<span class="string">&quot;shutdown -s -t 360&quot;</span>);                       <span class="comment">//system引用头文件&lt;stdlib.h&gt;</span></span><br><span class="line">    again:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请注意你的电脑在360秒后关机，输入 我是猪 取消关机.&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, c);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(c, <span class="string">&quot;我是猪&quot;</span>)==<span class="number">0</span>)                      <span class="comment">//比较两个字符串要用strcmp，引用头文件&lt;string.h&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">system(<span class="string">&quot;shutdown -a&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> again;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>goto语句只能在一个函数范围内跳转，不能跨函数<br>&#x2F;&#x2F;</p><h2 id="函数的嵌套调用和链式访问"><a href="#函数的嵌套调用和链式访问" class="headerlink" title="函数的嵌套调用和链式访问"></a>函数的嵌套调用和链式访问</h2><p>函数的嵌套，函数可以在另一个函数中使用，但是不可以在一个函数中定义一个函数.<br>链式访问：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="built_in">strlen</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a);</span><br><span class="line"><span class="comment">//链式访问直接可以写成   printf(&quot;%d&quot;, strlen(&quot;abc&quot;));</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> a[<span class="number">6</span>] = &#123; <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数声明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">30</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">40</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;<span class="comment">//函数声明-告诉编译器参数是什么返回类型是什么，但是具体存不存在无所谓 </span></span><br><span class="line">c=add(a, b); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数的定义</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown教程</title>
      <link href="/2022/05/09/Markdown%E6%95%99%E7%A8%8B/"/>
      <url>/2022/05/09/Markdown%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="本教程只限于Windows系统"><a href="#本教程只限于Windows系统" class="headerlink" title="本教程只限于Windows系统"></a>本教程只限于Windows系统</h2><p>这篇博客是用vscode的情况下写的</p><p>在vscode上有的功能实现挺麻烦的</p><h2 id="1-编辑器的选择"><a href="#1-编辑器的选择" class="headerlink" title="1.编辑器的选择"></a>1.编辑器的选择</h2><p>Typora – 这个编辑器就是适用于Markdown这个语言的，不过现在收费了（89元）。<br>但是任然可以选择在官往下载历史版本（免费使用）.<br><a href="https://typoraio.cn/">Typora官网</a><br>VsCode – 目前免费的编辑器，很好用，支持各种插件，功能强大，还有大牛最喜欢的黑色主题.（用来写Markword的时候VsCode和Typora比显然是Typora好用）<br><a href="https://visualstudio.microsoft.com/zh-hans/">Visual Studio官网</a><br>对于刚接触的小白，强烈建议购买Typora<br>code很强大且免费，但是对于小白及其不友好.<br>一门编程语言如果有他对应的编程软件，最好是使用对应的编程软件写.</p><hr><h2 id="2-标题"><a href="#2-标题" class="headerlink" title="2.标题"></a>2.标题</h2><p>标题的操作符是 “#”<br>操作符和内容之间需要一个空格</p><h3 id="标题等级"><a href="#标题等级" class="headerlink" title="标题等级"></a>标题等级</h3><p>标题一共分6个等级.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 我是一级标题</span><br><span class="line">## 我是二级标题   </span><br><span class="line">### 我是三级标题</span><br><span class="line">#### 我是四级标题</span><br><span class="line">##### 我是五级标题</span><br><span class="line">###### 我是六级标题</span><br></pre></td></tr></table></figure><h3 id="标题的使用"><a href="#标题的使用" class="headerlink" title="标题的使用"></a>标题的使用</h3><p>在我学习的时候，我发现很多教程里面对于标题使用方法的解释都有误导，或者说解析的根本不全，导致很多小白错误的认识和理解标题.<br>最常见的就是把标题代码一列，然后下面放一个效果展示，（可以去看我刚开始写的markdown教程，我就是被误导了）<br>我刚开始以为标题就是调整字体的大小.<br>实际上，标题就像是书的目录一样，有一个大的分类，然后里面有小的分类.（解释不太好说明）看图片<br><img src="/2022/05/09/Markdown%E6%95%99%E7%A8%8B/2022-05-09-19-24-32.png"><br><img src="/2022/05/09/Markdown%E6%95%99%E7%A8%8B/2022-05-09-19-16-05.png"><br>我对正文部分进行了缩放，可以对着上面两张图自己解析一下标题的用法<br>标题的等级决定了哪个标题在哪个标题的里面<br>只要设置同等级的标题，标题和标题就会被分开<br>可以在低等级的标题外面设置更大标题把低等级的包起来（最大是一级标题）<br>也可以在高等级的标题里设置更小的标题（最小的是六级标题）<br>注意：标题并不适合用来调整正文里面文字的大小.有的人发现加上标题字体会变化后，会把标题当做用来放大字体的工具.（如果你这么做了，那你博客里面的目录，或者大纲会变得很灿烂，详情参考我之前写的markdown教程）.<br>关于在使用标题时候遇到的一些稀奇古怪的问题，可以去我的疑难解答里找找.<br>至少我会把我学习时候遇到的问题记录下来.</p><hr><h2 id="3-段落（正文）"><a href="#3-段落（正文）" class="headerlink" title="3.段落（正文）"></a>3.段落（正文）</h2><p>很蛋疼的一个点，在markdown中想用空格分开内容是做不到的，至少我没找到方法，它会自动忽略文字和文字之间的空格并且将内容对齐.</p><p>文本分段，前后至少保留一个空行即可<br>这里提一句，在编译器中写代码并且预览的时候可能会遇到这个问题，（或者在预览的时候没有，在博客里有）.<br>什么问题呢？<br>具体表现为一个标题正文最后的内容，被当成了一个新的标题，字体被放大了.具体表现为下图:</p><p><img src="/2022/05/09/Markdown%E6%95%99%E7%A8%8B/2022-05-09-21-33-12.png"></p><p><img src="/2022/05/09/Markdown%E6%95%99%E7%A8%8B/2022-05-09-21-32-29.png"></p><p>可以看到我在段落的最后想加上分隔符，但是最后结果是分隔符没有，段落里的正文部分乱了<br>怎么解决？<br>就是没分段，在一个标题正文的结尾分行就好了.<br><img src="/2022/05/09/Markdown%E6%95%99%E7%A8%8B/2022-05-09-21-37-49.png"></p><hr><h2 id="4-字体（文本）"><a href="#4-字体（文本）" class="headerlink" title="4.字体（文本）"></a>4.字体（文本）</h2><p>操作符和内容之间不能有空格</p><p><code>**加粗**</code><br><strong>加粗</strong></p><p><code>*斜体*</code><br><code>_斜体_</code><br><em>斜体</em></p><p><code>***粗斜体***</code><br><code>___粗斜体___</code><br><em><strong>粗斜体</strong></em></p><p><code>~~删除线~~</code><br><del>删除线</del></p><p><code>&lt;u&gt;下划线&lt;/u&gt;</code><br><u>下划线</u></p><p><code>==高亮==</code></p><p>&#x3D;&#x3D;高亮&#x3D;&#x3D;</p><p>在vscode默认设置中，高亮是无法直接显示，在typora里也需要在设置中设置：文件 &gt;  偏好设置 &gt; Markdown</p><hr><h2 id="5-引用"><a href="#5-引用" class="headerlink" title="5.引用"></a>5.引用</h2><p>引用操作符和内容之间加不加空格都可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; 我是引用</span><br><span class="line">&gt; 我是引用</span><br><span class="line">&gt;&gt; 我是引用</span><br><span class="line">&gt;&gt;&gt; 我是引用</span><br><span class="line">&gt;&gt;&gt;&gt; 我是引用</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; 我是引用</span><br></pre></td></tr></table></figure><blockquote><p>我是引用<br>测试1<br>我是引用</p><blockquote><p>我是引用<br>测试2</p><blockquote><p>我是引用<br>测试3</p><blockquote><p>  我是引用<br>测试4</p><blockquote><blockquote><p>我是引用<br>引用操作符没有数量限制</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote><p>测试测试</p><p>​             –测试</p></blockquote><p>这里我是想写一个类似名人名言的格式，就是一段话，后面加个名字，但是名字想靠到后面打空格不管用，只会在最前面.由于我并不怎么使用引用这个功能，所以这方面会在以后补充</p><hr><h2 id="6-分割线"><a href="#6-分割线" class="headerlink" title="6.分割线"></a>6.分割线</h2><p>分割线操作符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//分割线1</span><br><span class="line">---</span><br><span class="line">//分割线2</span><br><span class="line">***</span><br></pre></td></tr></table></figure><p>两种写法只是写法不同，实际使用效果都一样.</p><hr><h2 id="7-代码"><a href="#7-代码" class="headerlink" title="7.代码"></a>7.代码</h2><p>代码操作符是ESC下面的那个点.</p><h3 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h3><p>用”&#96;”把代码包起来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入 `printf()`</span><br></pre></td></tr></table></figure><p>效果 <code>printf()</code></p><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>在typora上，输入&#96;&#96;&#96;回车，可以在右下角选择自己代码的语言.</p><p>也可以在&#96;&#96;&#96;后面输入自己代码的语言在回车</p><p>在vscode上,无法直接选择语言，只能在&#96;&#96;&#96;后面输入自己代码的语言</p><hr><h2 id="8-图片插入"><a href="#8-图片插入" class="headerlink" title="8.图片插入"></a>8.图片插入</h2><p>关于图片插入，如果只是在typora或者vscode里插入本地图片，本地图片使用<code>![自定义名字](本地图片的地址)</code>就好了.</p><p>图片是网络图片<code>![自定义名字](图片的链接地址)</code></p><p>在typora插入本地图片他会让你选择图片在哪一个文件里.</p><p>在vscode中下载插件后，导入截图很方便，用快捷键就好，但是导入本地图片满烦的，有各种问题.比如图片地址格式都是对的，但是预览不出来，又或者预览没问题但是上传后又显示不出来</p><p>使用typora的可以把图片上传图床就很好解决，又或者在设置里设置不同的方式</p><p>使用vscode的我不确定.</p><p>这里看看参考一下我的另外一篇关于markdown插入图片的教程.（我的教程绝对不是最好的，也不是最简洁的，但我的教程是我自己摸索的，没有专人指导）</p><p>我所使用的方法，肯定不是最佳解决方案.不过对于我来说，这种图片插入的的解决方法很方便，就算后期找到的更好的解决方法，之前所保存的图片也不会乱掉.</p><hr><h2 id="9-超链接"><a href="#9-超链接" class="headerlink" title="9.超链接"></a>9.超链接</h2><p>超链接语法:<br>一个中括号，加上一个小括号.<br>中括号里的内容自定义，小括号里的是链接.<br>例：<br><img src="/2022/05/09/Markdown%E6%95%99%E7%A8%8B/2022-05-09-17-43-07.png"><br>效果如下：<br><a href="https://github.com/AKYCCCC/AKYCCCC.github.io">我的Github</a></p><hr><h2 id="10-列表"><a href="#10-列表" class="headerlink" title="10.列表"></a>10.列表</h2><p>列表操作符 “-“ ，”+” , “*” 三个都可以，不管写哪个操作符效果都一样<br>就算你在列表嵌套的时候3个操作符随便写，最后效果也是一样的，看下面例子</p><ul><li>一级列表<ul><li>二级列表<ul><li>三级列表</li></ul></li></ul></li></ul><p><img src="/2022/05/09/Markdown%E6%95%99%E7%A8%8B/2022-05-09-20-12-20.png"><br>列表开头的那个图案，一级列表是实心圆，二级列表是空心圆，三级列表是实心方块。实心方块在往后就都是实心方块了.</p><p>操作符后面需要一个空格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 列表 </span><br><span class="line">* 列表</span><br><span class="line">+ 列表</span><br></pre></td></tr></table></figure><p>效果展示：</p><ul><li>列表</li></ul><ul><li>列表</li></ul><ul><li>列表</li></ul><h3 id="有序列表和无序列表"><a href="#有序列表和无序列表" class="headerlink" title="有序列表和无序列表"></a>有序列表和无序列表</h3><p>列表还分为有序列表和无序列表.<br>什么是无序列表？我的理解就是：只要使用上面三个操作符直接写的列表就是无序列表，不管是否嵌套（我不确定）</p><p>什么是有序列表？我的理解就是：一个数字后面加个”.”,这样的叫有序列表.<br>在”.”的后面也需要一个空格</p><ol><li>列表</li><li>列表<ol><li>子列表</li><li>子列表</li><li>子列表<ol><li>子列表</li></ol></li></ol></li><li>列表<ol><li>子列表<br>   有序列表的序号只要给第一个，后面的序号会自动在前面的基础上加1<br>   在有序列表中创建子列表的时候，第一个子列表的序号默认是1，不过都是可以自己改的.</li></ol></li></ol><p>关于开头的数字，只需要起个头，接下来按回车会自动续写.不一定是1.就算你写114514.，按回车后下一个自动生成114515.序号是可以随意改动的.</p><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>就是在一个列表里创建子列表<br>操作方法：在上一个列表的下面空四格，再创建一个列表就是列表嵌套.</p><hr><h2 id="11-markdown符号或图标"><a href="#11-markdown符号或图标" class="headerlink" title="11.markdown符号或图标"></a>11.markdown符号或图标</h2><p>这里就不去复制粘贴别人的文档了，这没有意义.需要用到什么特殊符号就去搜索吧（网上基本都是复制粘贴一搜就有）</p><p>使用方法是找到想要输出的符号，的对应代码然后写入就好</p><p><a href="https://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&rsv_idx=1&tn=baidu&wd=markdown%E7%AC%A6%E5%8F%B7%E6%88%96%E5%9B%BE%E6%A0%87%E5%A4%A7%E5%85%A8&fenlei=256&oq=markdown%25E7%25AC%25A6%25E5%258F%25B7%25E6%2588%2596%25E5%259B%25BE%25E6%25A0%2587%25E5%25A4%25A7%25E5%2585%25A8&rsv_pq=9a946b880002757e&rsv_t=082bTw5wpwusc1QwPIJHq58mlNWUOJwZqKiIbUIJOBMbsHaa7V7sEhYW23o&rqlang=cn&rsv_enter=0&rsv_btype=t&rsv_dl=tb&rsv_sug3=2&rsv_sug1=3&rsv_sug7=100&rsv_sug4=4713&rsv_sug=1">markdown符号或图标大全</a></p><h3 id="插入表情符号"><a href="#插入表情符号" class="headerlink" title="插入表情符号"></a>插入表情符号</h3><p>和上面一样，找到表情对应的代码写入就可以了.（网上一查一堆一模一样的）</p><p>一个冒号（英文输入法）+对应表情的英文<br><a href="https://www.webfx.com/tools/emoji-cheat-sheet/">对应表情的英文</a></p><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>和很多语言一样，有些符号有自己的作用，想被直接写出来是不行的.<br>只要在想要输出的符号前面加上\就可以直接输出符号<br>如果想出\就直接写\\就可以了</p><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>在使用vscode编写的时候，在默认配置下，脚注是没法直接实现，可能需要配置某些选项，因为我是购买的正版Typora，所以没去学习vscode添加脚注的教程.</p><p>在Typora添加脚注</p><p>先找找到要添加脚注的内容，在内容的后面加上<code>[^ 1]</code>, 这个“^”是数字6下面的那个符号，后面的数字要和符号空一格，后面的数字是自定义的</p><p>示范：</p><p>我是脚注<a href="%E8%84%9A%E6%B3%A8%E6%98%AF%E5%9C%A8%E5%8D%B0%E5%88%B7%E7%9A%84%E4%B9%A6%E9%A1%B5%E6%AD%A3%E6%96%87%E4%B8%8B%E9%9D%A2%E6%88%96%E5%9C%A8%E5%90%84%E8%A1%A8%E4%B8%8B%E9%9D%A2%E7%9A%84%E9%99%84%E6%B3%A8">^ 1</a>.在添加好脚注后，对脚注的内容进行解释，在下一行写入<code>[^ 1]:</code></p><p><img src="/2022/05/09/Markdown%E6%95%99%E7%A8%8B/image-20220510110208912.png"></p><p>在书写代码的时候，脚注解释是在你自己写入时放的位置，在博客中，脚注会出现在整篇文章的最后面</p><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>公式操作符”$”,</p><p>使用方法输入<code>$e^i+y=0 $</code></p><p>输出$e^i+y&#x3D;0 $</p><p>想要i在e的上面就输入“ ^”,记得用$$包起来</p><p>想要i在e的下面就输入“_” ，记得用$$包起来</p><p>公式分有单行公式和多行公式</p><p>我目前用不到公式，而且公式很烦，用书面的不好理解，建议去看视频教程.</p><p>后续的内容会在以后补充</p><hr><h2 id="12-目录"><a href="#12-目录" class="headerlink" title="12.目录"></a>12.目录</h2><p>因为我是有加上主题，所以右边自带目录</p><p>markdown自己也是有目录的，目录就是文章最开头绿色字体可以跳转的那个东西</p><p>目录的使用方法<code>[toc]</code>,把这个代码放到你想放的位置就可以了.目录会随着你后面的改动自动编辑.</p><hr><h2 id="13-表格"><a href="#13-表格" class="headerlink" title="13.表格"></a>13.表格</h2><p>我的建议是直接使用typora段落&gt;表格&gt;插入表格，很方便，还可以自定义几行几列</p><p>插入表格后可以转到代码，可以看到代码第二行里有“—-”，这个表示内容的位置，比如你想让内容靠左你就这样写“:—-”,靠右就”—-:”,居中就””:—-:”</p><p>vscode可以使用代码.我的建议还是用typora，小表格还好，大表格很累的</p><hr><h2 id="14-样式"><a href="#14-样式" class="headerlink" title="14.样式"></a>14.样式</h2><p>在markdown中没有或者没法表现的效果，可以直接使用HTML语法来写.</p><hr><h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><p><a href="https://www.bilibili.com/video/BV1hJ411X75X">https://www.bilibili.com/video/BV1hJ411X75X</a><br><a href="https://www.bilibili.com/video/BV1da411v7o9?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1da411v7o9?spm_id_from=333.337.search-card.all.click</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>破解版我的世界联机+PCL2使用</title>
      <link href="/2022/04/28/%E7%A0%B4%E8%A7%A3%E7%89%88%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E8%81%94%E6%9C%BA-PCL2%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/04/28/%E7%A0%B4%E8%A7%A3%E7%89%88%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E8%81%94%E6%9C%BA-PCL2%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>去JAVA官网下载最新版的JAVA<br><a href="https://www.java.com/zh-CN/download/manual.jsp">https://www.java.com/zh-CN/download/manual.jsp</a></p><p>去龙猫爱发电，搜龙腾猫跃，找到最新的PCL2并下载<br><a href="https://afdian.net/@LTCat">https://afdian.net/@LTCat</a></p><p>PCL2和JAVA下载教程<br><a href="https://www.bilibili.com/video/BV1U34y1S71y?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1U34y1S71y?spm_id_from=333.337.search-card.all.click</a></p><p>PCL2使用教程<br><a href="https://www.bilibili.com/video/BV1o64y187GJ?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1o64y187GJ?spm_id_from=333.337.search-card.all.click</a></p>]]></content>
      
      
      <categories>
          
          <category> 游戏娱乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo+github博客的搭建</title>
      <link href="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h4 id="使用的视频教程"><a href="#使用的视频教程" class="headerlink" title="使用的视频教程"></a>使用的视频教程</h4><p><a href="https://www.bilibili.com/video/BV1Yb411a7ty?spm_id_from=333.880.my_history.page.click">https://www.bilibili.com/video/BV1Yb411a7ty?spm_id_from=333.880.my_history.page.click</a></p><p><a href="https://www.bilibili.com/video/BV19p411f7x9?spm_id_from=333.880.my_history.page.click">https://www.bilibili.com/video/BV19p411f7x9?spm_id_from=333.880.my_history.page.click</a></p><p><a href="https://www.bilibili.com/video/BV1D7411U7Yk?spm_id_from=333.880.my_history.page.click">https://www.bilibili.com/video/BV1D7411U7Yk?spm_id_from=333.880.my_history.page.click</a></p><p><a href="https://www.bilibili.com/video/BV1hJ411X75X?spm_id_from=333.880.my_history.page.click">https://www.bilibili.com/video/BV1hJ411X75X?spm_id_from=333.880.my_history.page.click</a></p><p>####<a href="https://www.bilibili.com/video/BV1mU4y1j72n?spm_id_from=333.880.my_history.page.click">https://www.bilibili.com/video/BV1mU4y1j72n?spm_id_from=333.880.my_history.page.click</a>   —- b站教程</p><h4 id="https-blog-csdn-net-help-child-article-details-124186644-—-个人博客教程"><a href="#https-blog-csdn-net-help-child-article-details-124186644-—-个人博客教程" class="headerlink" title="https://blog.csdn.net/help_child/article/details/124186644  —- 个人博客教程"></a><a href="https://blog.csdn.net/help_child/article/details/124186644">https://blog.csdn.net/help_child/article/details/124186644</a>  —- 个人博客教程</h4><p>看视频来操作</p><h3 id="简述下具体过程"><a href="#简述下具体过程" class="headerlink" title="简述下具体过程"></a>简述下具体过程</h3><p>#第一步，下载Node   从下面官网下载<br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-12-20-32.png"><br><a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a><br><a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a><br>两个链接都是node的下载地方，我用的第二个链接<br>版本的选择：小白就选择长期支持版吧.</p><p>下载完的压缩包或者安装程序放在自己喜欢的文件夹里<br>ps：下载下来的是安装程序，需要双击运行.然后一直下一步下一步就好了</p><h1 id="第二步，下载-git-从下面官网下载"><a href="#第二步，下载-git-从下面官网下载" class="headerlink" title="第二步，下载 git  从下面官网下载"></a>第二步，下载 git  从下面官网下载</h1><p><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-12-20-58.png"><br><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a><br>自己是什么系统就下什么版本的</p><p>下载完的压缩包或者安装程序放在自己喜欢的文件夹里<br>ps：下载下来的是安装程序，需要双击运行.然后一直下一步下一步就好</p><h1 id="第三步，验证一下，软件有没有下载成功"><a href="#第三步，验证一下，软件有没有下载成功" class="headerlink" title="第三步，验证一下，软件有没有下载成功"></a>第三步，验证一下，软件有没有下载成功</h1><p>可以在桌面&#x3D;&#x3D;空白处&#x3D;&#x3D;右击鼠标，打开&#x3D;&#x3D;git bash here&#x3D;&#x3D;<br>也可以win+r，打开cmd</p><p>随便挑一个打开，我用的是git打开<br>分别输入<br>git –version<br>输入完回车运行后在输入下一条，输出的应该是类型版本号的东西就说明软件装好了<br>node -v<br>输入完回车运行后在输入下一条，输出的应该是类型版本号的东西就说明软件装好了<br>npm -v<br>输入完回车运行后在输入下一条，输出的应该是类型版本号的东西就说明软件装好了<br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-12-21-31.png"></p><h1 id="第四步，安装hexo"><a href="#第四步，安装hexo" class="headerlink" title="第四步，安装hexo"></a>第四步，安装hexo</h1><p>在你喜欢的位置建一个博客（blog）的文件夹<br>在blog文件下右击打开&#x3D;&#x3D;git bash here&#x3D;&#x3D;打开后可以看到路径是blog<br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-12-22-22.png"></p><p>输入：npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a><br>代码输完，回车运行完，在输下一个</p><p>在输入：npm install hexo-cli -g<br>这代码的意思是下载hexo，这里我用的是国内淘宝镜像，下载快<br>用hexo自己的可能需要魔法上网<br>下载完之后输入hexo -v，看看是否安装完成<br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-12-23-08.png"></p><h1 id="第五步-创建博客的基本文件"><a href="#第五步-创建博客的基本文件" class="headerlink" title="第五步.创建博客的基本文件"></a>第五步.创建博客的基本文件</h1><p>在blog文件夹下右击打开&#x3D;&#x3D;git bash here&#x3D;&#x3D;<br>输入：hexo init 回车<br>等待一会，可以看见本来什么都没有的blog文件夹下出现了很多文件就对了<br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-12-24-13.png"><br>如果没出现很多文件就再来一遍hexo init<br>成功后<br>输入hexo s<br>会输出一段话，和一个类型网页链接的东西.<br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-12-24-47.png"><br>复制粘贴到浏览器打开<br>成功打开的话，就说明&#x3D;&#x3D;本地&#x3D;&#x3D;博客创建成功了<br>ctrl+c关闭本地博客，注：是直接在键盘上嗯ctrl+c，不是输入到命令窗口里<br>想要在打开本地博客就在hexo s</p><h1 id="第六步，注册github"><a href="#第六步，注册github" class="headerlink" title="第六步，注册github"></a>第六步，注册github</h1><p><a href="https://github.com/">https://github.com/</a><br>推荐用魔法上网，github还蛮卡的<br>github起的名字后面会用到，建议起个阳间一点的.</p><h1 id="第七步，生成SSH-KEY-和github进行绑定"><a href="#第七步，生成SSH-KEY-和github进行绑定" class="headerlink" title="第七步，生成SSH KEY,和github进行绑定"></a>第七步，生成SSH KEY,和github进行绑定</h1><p>这一步解释一下就是把本地的博客放到github的服务器上，这样别人就可以在线浏览你的博客了.<br>随便进入一个文件夹（不管进的哪个文件夹不影响后面操作的不要钻牛角尖），在&#x3D;&#x3D;空白&#x3D;&#x3D;处点击右键，点击Git Bash Here（注意一定要在空白处点击右键）<br>执行”ssh”命令，检测一下电脑有没安装ssh，默认是已经安装了的<br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-12-18-55.png"></p><p>接着执行”ssh-keygen -t rsa -C “邮箱地址” ”邮箱地址输入自己注册github账号时的邮箱地址，执行成功后界面如下<br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-12-29-30.png"><br><strong>&#x3D;&#x3D;注意了，这里输完要按几下回车（是4下还是几下来着，我忘了）看到下面的框框出来就好了&#x3D;&#x3D;</strong><br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-12-31-07.png"><br>这一步的效果就是&#x3D;&#x3D;生成&#x3D;&#x3D;&#x3D;&#x3D;公钥&#x3D;&#x3D;和&#x3D;&#x3D;私钥&#x3D;&#x3D;<br>私钥自己放着，公钥后面要用</p><p>然后在c盘<br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-12-34-47.png"><br>找到用户（有的人这里可能不是用户，是users）<br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-12-37-01.png"><br>找到ASUS（有的人可能是administrator）<br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-12-38-46.png"><br>找到.ssh<br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-12-39-46.png"><br>找到id.rsa.pub(id.rsa是&#x3D;&#x3D;私钥&#x3D;&#x3D;，id.rsa.pub是&#x3D;&#x3D;公钥&#x3D;&#x3D;)<br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-12-40-36.png"><br>我们要的是公钥，用记事本，或者vscode打开（只要能完整显示&#x3D;&#x3D;id.rsa.pub&#x3D;&#x3D;里面内容就好.）<br>打开后全选复制.<br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-12-44-40.png"><br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-12-45-02.png"><br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-12-45-16.png"><br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-12-45-28.png"><br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-12-45-53.png"><br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-12-46-14.png"><br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-12-46-34.png"></p><h1 id="第八步，部署到github平台上"><a href="#第八步，部署到github平台上" class="headerlink" title="第八步，部署到github平台上"></a>第八步，部署到github平台上</h1><p>注册账号时要记住自己的用户名和邮箱哦，后面会用到。</p><p><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-12-50-55.png"></p><p>版权声明：本文为CSDN博主「忘尘游」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/help_child/article/details/124186644">https://blog.csdn.net/help_child/article/details/124186644</a></p><p>####复制仓库的地址<br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-12-51-50.png"></p><p>打开blog下的_config.yml打开（用能编辑的软件打开，vscode或者记事本吧）<br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-12-53-32.png"><br>修改里面的内容，红圈框起来的改成你刚才你在github复制的地址，记得:后面要有一个空格<br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-12-56-17.png"><br>修改保存好就可以关闭了</p><p>接着在&#x3D;&#x3D;Blog文件夹&#x3D;&#x3D;下面打开Git Bash Here<br>执行”npm install hexo-deployer–git –save”<br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-12-58-32.png"><br>在执行hexo g<br>运行完别关</p><p>#关键来了，这一步是把你的博客弄成在线浏览，别人可以浏览的步骤</p><h3 id="续上面的"><a href="#续上面的" class="headerlink" title="续上面的"></a>续上面的</h3><p>###在执行hexo d</p><h3 id="这上面的操作都是为了这一步"><a href="#这上面的操作都是为了这一步" class="headerlink" title="这上面的操作都是为了这一步."></a>这上面的操作都是为了这一步.</h3><h3 id="这一步就是把你本地的文件放到github的仓库里，这样别人才能在线浏览"><a href="#这一步就是把你本地的文件放到github的仓库里，这样别人才能在线浏览" class="headerlink" title="这一步就是把你本地的文件放到github的仓库里，这样别人才能在线浏览."></a>这一步就是把你本地的文件放到github的仓库里，这样别人才能在线浏览.</h3><h3 id="注意：就算你本地的博客关闭了，在线的博客不会关闭"><a href="#注意：就算你本地的博客关闭了，在线的博客不会关闭" class="headerlink" title="注意：就算你本地的博客关闭了，在线的博客不会关闭."></a>注意：就算你本地的博客关闭了，在线的博客不会关闭.</h3><h3 id="本地的博客每次写完，保存后要hexo-g（我不知道怎么描述，就类似于把你写好的内容生成编译一下？），然后在hexo-s（开本地博客）"><a href="#本地的博客每次写完，保存后要hexo-g（我不知道怎么描述，就类似于把你写好的内容生成编译一下？），然后在hexo-s（开本地博客）" class="headerlink" title="本地的博客每次写完，保存后要hexo g（我不知道怎么描述，就类似于把你写好的内容生成编译一下？），然后在hexo s（开本地博客）"></a>本地的博客每次写完，保存后要hexo g（我不知道怎么描述，就类似于把你写好的内容生成编译一下？），然后在hexo s（开本地博客）</h3><h3 id="执行hexo-d命令的时候，会跳出一个网址，类似于授权"><a href="#执行hexo-d命令的时候，会跳出一个网址，类似于授权" class="headerlink" title="执行hexo d命令的时候，会跳出一个网址，类似于授权."></a>执行hexo d命令的时候，会跳出一个网址，类似于授权.</h3><h3 id="你打开网站发现授权按钮是点不了的，在授权按钮下面有一串小字，你翻译下看看，是不是让你跳转到某个网址"><a href="#你打开网站发现授权按钮是点不了的，在授权按钮下面有一串小字，你翻译下看看，是不是让你跳转到某个网址" class="headerlink" title="你打开网站发现授权按钮是点不了的，在授权按钮下面有一串小字，你翻译下看看，是不是让你跳转到某个网址"></a>你打开网站发现授权按钮是点不了的，在授权按钮下面有一串小字，你翻译下看看，是不是让你跳转到某个网址</h3><h3 id="是的话就复制网址跳转，跳转后是一片空白-会出现一个窗口，是然你输入github的账户名，（注意！是名字，不是邮箱）"><a href="#是的话就复制网址跳转，跳转后是一片空白-会出现一个窗口，是然你输入github的账户名，（注意！是名字，不是邮箱）" class="headerlink" title="是的话就复制网址跳转，跳转后是一片空白.会出现一个窗口，是然你输入github的账户名，（注意！是名字，不是邮箱）"></a>是的话就复制网址跳转，跳转后是一片空白.会出现一个窗口，是然你输入github的账户名，（注意！是名字，不是邮箱）</h3><h3 id="名字在哪里找？-红圈就是你的名字"><a href="#名字在哪里找？-红圈就是你的名字" class="headerlink" title="名字在哪里找？  红圈就是你的名字"></a>名字在哪里找？  红圈就是你的名字</h3><p><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-13-10-21.png"><br>输入后，会出现第二个窗口，这里之前是让你输入github密码的，但是现在改成令牌了</p><h1 id="生成令牌"><a href="#生成令牌" class="headerlink" title="生成令牌"></a>生成令牌</h1><p><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-13-12-34.png"><br>#####找到Developer settings(看具体名字找，别看图中位置找，随着更新，位置会变的)<br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-13-13-21.png"><br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-13-15-36.png"><br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-13-15-58.png"><br>1.输入自己喜欢的东西<br>2.看着选，都无所谓  我选了30天<br>3.自己看选，无所谓，我全勾<br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-13-18-09.png"></p><h4 id="！！！！！！！注意了，生成后出现的令牌只会出现一次，记得保存下来！！！！！！！！！！！"><a href="#！！！！！！！注意了，生成后出现的令牌只会出现一次，记得保存下来！！！！！！！！！！！" class="headerlink" title="！！！！！！！注意了，生成后出现的令牌只会出现一次，记得保存下来！！！！！！！！！！！"></a>！！！！！！！注意了，生成后出现的令牌只会出现一次，记得保存下来！！！！！！！！！！！</h4><p>####回到刚才要输入密码的窗口，把令牌复制进去.回车结束<br>等待程序运行完，就完成在线博客的创建了<br>你的网页就是下面红线画出来的<br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-13-22-43.png"><br>###———————————————————–<br>在hexo d的步骤里会出现错误.<br>1.错误：提示网络啊，上传什么的超时之类的，就是网不好，需要魔法上网<br>2.错误：无法自动找到检测邮箱地址和地址什么的，<br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-13-28-33.png"><br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-13-30-13.png"><br>按照图中修改<br><img src="/2022/04/28/%E4%BD%BF%E7%94%A8Hexo-github%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/2022-04-28-13-31-01.png"></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言中阶</title>
      <link href="/2022/04/28/c%E8%AF%AD%E8%A8%80%E4%B8%AD%E9%98%B6/"/>
      <url>/2022/04/28/c%E8%AF%AD%E8%A8%80%E4%B8%AD%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="———————————————————————goto语句———————————————————"><a href="#———————————————————————goto语句———————————————————" class="headerlink" title="———————————————————————goto语句———————————————————-"></a>———————————————————————goto语句———————————————————-</h1><p>&#x2F;&#x2F;C语言中提供了可以随意滥用的goto语句和标记跳转符号<br>&#x2F;&#x2F;从理论上降goto语句是没有必要的，实践中没有goto语句也可以很容易写出代码<br>&#x2F;&#x2F;但在某些场合goto语句还是能用到的，最常见的做法就是终止程序在某些深度嵌套的结构的处理过程，例如一次跳出两层或多层循环<br>&#x2F;&#x2F;这种情况使用break是达不到的，break只能从最内层循环退出到上一层循环<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;一个关机程序,只要运行起来电脑会在一段时间内关机；如果输入：我是猪，就取消关机.<br>&#x2F;&#x2F;      shutdown -s -t 60<br>&#x2F;&#x2F;shut down是英文关闭的意思<br>&#x2F;&#x2F;-s表示设置关机<br>&#x2F;&#x2F;-t表示设置时间<br>&#x2F;&#x2F;60表示设置的时间<br>&#x2F;&#x2F;shutdown -a取消关机<br>&#x2F;&#x2F;c语言提供了一个函数system()–执行系统命令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//char c[20] = &#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">//system(&quot;shutdown -s -t 360&quot;);                       //system引用头文件&lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">//    again:</span></span><br><span class="line"><span class="comment">//printf(&quot;请注意你的电脑在360秒后关机，输入 我是猪 取消关机.&quot;);</span></span><br><span class="line"><span class="comment">//scanf(&quot;%s&quot;, c);</span></span><br><span class="line"><span class="comment">//if (strcmp(c, &quot;我是猪&quot;)==0)                      //比较两个字符串要用strcmp，引用头文件&lt;string.h&gt;</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//system(&quot;shutdown -a&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//goto again;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;goto语句只能在一个函数范围内跳转，不能跨函数</p><h1 id="—————————————————————-函数讲解——————————————————————–"><a href="#—————————————————————-函数讲解——————————————————————–" class="headerlink" title="—————————————————————-函数讲解——————————————————————–"></a>—————————————————————-函数讲解——————————————————————–</h1><p>&#x2F;&#x2F;通过各种网站软件自己学习各种库函数<br>&#x2F;&#x2F;库函数功能有限，我们要自己创造函数.<br>&#x2F;&#x2F;函数返回类型写成 void，表示这个函数不返回任何值，也不需要返回.<br>&#x2F;&#x2F;一个函数只能返回（return）一个值，可以写多个return但是最后只能返回一个.<br>&#x2F;&#x2F;数组传到函数里，实际传递的不是数组本身，只传过去数组首元素的地址.<br>&#x2F;&#x2F;作业：创建一个函数求</p><p>&#x2F;&#x2F;1.判断100-200之间的素数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int is_Prime_number(int a)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int j = 0;</span></span><br><span class="line"><span class="comment">//for (j = 2; j &lt; a; j++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (a % j  == 0)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return 1;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int i;</span></span><br><span class="line"><span class="comment">//int con = 0;</span></span><br><span class="line"><span class="comment">//for (i = 100; i &lt;= 200; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (is_Prime_number(i) == 1)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//con++;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d &quot;, i);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//printf(&quot;\n%d&quot;, con);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;2.打印1000-2000之间的闰年</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int is_leap_year(int a)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (a % 4 == 0 &amp;&amp; a % 100 != 0||a%400==0)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//return 1;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int i;</span></span><br><span class="line"><span class="comment">//for (i = 1000; i &lt;= 2000; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (is_leap_year(i) == 1)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d &quot;, i);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;3.在一个1-10的有序数组中查找一个值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int search(int arr[], int key, int sz)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int left = 0;</span></span><br><span class="line"><span class="comment">//int right = sz-1;</span></span><br><span class="line"><span class="comment">//while (left &lt;=right) </span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int mid = (left + right) / 2;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//if (arr[mid] &gt; key)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//right = mid - 1;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else if (arr[mid] &lt; key)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//left = mid + 1;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//return mid;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return -1;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int arr[] = &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;</span></span><br><span class="line"><span class="comment">//int key = 7;</span></span><br><span class="line"><span class="comment">//int sz = sizeof(arr) / sizeof(arr[0]);</span></span><br><span class="line"><span class="comment">//int ret = search(arr,key,sz);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//if (-1 == ret )</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;找不到&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;找到了是：%d&quot;, ret);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;4.写一个函数， 每调用一次函数，num的值就会+1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//void add(int*num)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//(*num)++;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int num = 0;</span></span><br><span class="line"><span class="comment">//add(&amp;num);</span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, num);</span></span><br><span class="line"><span class="comment">//add(&amp;num);</span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, num);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h1 id="———————————————————函数的嵌套调用和链式访问——————————————————————"><a href="#———————————————————函数的嵌套调用和链式访问——————————————————————" class="headerlink" title="———————————————————函数的嵌套调用和链式访问——————————————————————-"></a>———————————————————函数的嵌套调用和链式访问——————————————————————-</h1><p>&#x2F;&#x2F;printf这个函数返回值，是打印在屏幕上的字符的个数.<br>&#x2F;&#x2F; 函数的声明放在头文件里.<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;函数的嵌套，函数可以在另一个函数中使用，但是不可以在一个函数中定义一个函数.<br>&#x2F;&#x2F;链式访问：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a = strlen(&quot;abc&quot;);</span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, a);</span></span><br><span class="line"><span class="comment">////链式访问直接可以写成   printf(&quot;%d&quot;, strlen(&quot;abc&quot;));</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//char a[6] = &#123; &#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27; &#125;;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, sizeof(a));</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;<br>&#x2F;&#x2F;函数声明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a = 30;</span></span><br><span class="line"><span class="comment">//int b = 40;</span></span><br><span class="line"><span class="comment">//int c = 0;</span></span><br><span class="line"><span class="comment">//int add(int, int);//函数声明-告诉编译器参数是什么返回类型是什么，但是具体存不存在无所谓 </span></span><br><span class="line"><span class="comment">//c=add(a, b); </span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, c);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">////函数的定义</span></span><br><span class="line"><span class="comment">//int add(int x, int y)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//return x + y;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h1 id="——————————————————————–函数递归——————————————————————"><a href="#——————————————————————–函数递归——————————————————————" class="headerlink" title="——————————————————————–函数递归——————————————————————-"></a>——————————————————————–函数递归——————————————————————-</h1><p>&#x2F;&#x2F;递归–函数自己调用自己.<br>&#x2F;&#x2F;递归层次不能太深，否则栈溢出.<br>&#x2F;&#x2F;递归的两个必要条件<br>&#x2F;&#x2F;1.存在限制条件，当满足这个限制条件，递归便不在进行.<br>&#x2F;&#x2F;2.每次递归调用之后越来越接近这个限制条件.<br>&#x2F;&#x2F;练习1.接受一个整形值（无符号），按照顺序打印他的每一位.例如：输入：1234，打印1 2 3 4.<br>&#x2F;&#x2F;%u – 无符号整形.<br>&#x2F;&#x2F;unsigned –无符号整形.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//void print(unsigned int n)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (n&gt;9)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//print(n / 10);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d &quot;, n % 10);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//unsigned int num = 0;</span></span><br><span class="line"><span class="comment">//scanf(&quot;%u&quot;, &amp;num);</span></span><br><span class="line"><span class="comment">//print(num);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;练习2.编写函数不允许创建临时变量，求字符串长度.<br>&#x2F;&#x2F;普通方式实现，因为创建了c这个临时变量，所以不符合题目要求.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int my_strlen(char* str)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int c = 0;                </span></span><br><span class="line"><span class="comment">//while (*str != &#x27;\0&#x27;)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//c++;</span></span><br><span class="line"><span class="comment">//str++;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return c;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//char arr[] = &quot;bit&quot;;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, my_strlen(arr));</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用递归的方式实现</span></span><br><span class="line"><span class="comment">//int my_strlen(char* str)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (*str != &#x27;\0&#x27;) </span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//return 1 + my_strlen(str + 1);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//char arr[] = &quot;bit&quot;;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, my_strlen(arr));</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;递归与迭代<br>&#x2F;&#x2F;循环是迭代的一种方式方式.<br>&#x2F;&#x2F;练习3.求n的阶乘</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a = 0;</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d&quot;, &amp;a);</span></span><br><span class="line"><span class="comment">//int i = 0;</span></span><br><span class="line"><span class="comment">//int b = 1;</span></span><br><span class="line"><span class="comment">//for (i = 1; i &lt;= a; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//b = i * b;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, b);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;用递归写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int fac(int n)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (n &lt;= 1)</span></span><br><span class="line"><span class="comment">//return 1;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//return n * fac(n - 1);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a = 0;</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d&quot;, &amp;a);</span></span><br><span class="line"><span class="comment">//int b = 0;</span></span><br><span class="line"><span class="comment">//b = fac(a);</span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, b);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;练习4<br>&#x2F;&#x2F;求第n个斐波那契数（不考虑溢出）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int fib(int n)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (n &lt;= 2)</span></span><br><span class="line"><span class="comment">//return 1;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//return fib(n - 1) + fib(n - 2);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a = 0;</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d&quot;, &amp;a);</span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, fib(a));</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;用循环写斐波那契数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int fib(int n)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a = 1;</span></span><br><span class="line"><span class="comment">//int b = 1;</span></span><br><span class="line"><span class="comment">//int c = 1;</span></span><br><span class="line"><span class="comment">//while (n &gt; 2)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//c = a + b;</span></span><br><span class="line"><span class="comment">//a = b;</span></span><br><span class="line"><span class="comment">//b = c;</span></span><br><span class="line"><span class="comment">//n--;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return c;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int n = 0;</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d&quot;, &amp;n);</span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, fib(n));</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h1 id="———————————————————-函数递归完—————————————————————"><a href="#———————————————————-函数递归完—————————————————————" class="headerlink" title="———————————————————-函数递归完—————————————————————-"></a>———————————————————-函数递归完—————————————————————-</h1><p>&#x2F;&#x2F;作业：编写程序数一下1-100的所有整数中出现多少个9</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int i;</span></span><br><span class="line"><span class="comment">//int c = 0;</span></span><br><span class="line"><span class="comment">//for (i = 1; i &lt;= 100; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (i % 10 == 9)</span></span><br><span class="line"><span class="comment">//c++;</span></span><br><span class="line"><span class="comment">//if (i / 10 == 9)</span></span><br><span class="line"><span class="comment">//c++;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d &quot;, c);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;作业：计算1&#x2F;1-1&#x2F;2+1&#x2F;3-1&#x2F;4………+1&#x2F;99-1&#x2F;100.的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//double i = 0.0;</span></span><br><span class="line"><span class="comment">//int b = 1;</span></span><br><span class="line"><span class="comment">//double c = 0.0;</span></span><br><span class="line"><span class="comment">//for (i = 1; i &lt;= 100; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//c += b * 1.0 / i;</span></span><br><span class="line"><span class="comment">//b = -b;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//printf(&quot;%lf&quot;, c);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;作业：求10个数中的最大值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int arr[] = &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;</span></span><br><span class="line"><span class="comment">//int i;</span></span><br><span class="line"><span class="comment">//int max = arr[0];</span></span><br><span class="line"><span class="comment">//for (i = 0; i &lt;= 10; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (arr[i] &gt; max)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//max = arr[i];</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;作业：打印乘法口诀表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int i;</span></span><br><span class="line"><span class="comment">//for (i = 1; i &lt;= 9; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int j;</span></span><br><span class="line"><span class="comment">//for (j = 1; j &lt;= i; j++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d*%d=%-2d &quot;, j, i, i * j);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;作业：字符串逆序不允许使用库函数（可以自己创建和库函数一样的函数）（分别用普通方法和递归写）<br>&#x2F;&#x2F;普通方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int my_strlen(char* arr)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (*arr != &#x27;\0&#x27;)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//return 1 + my_strlen(arr + 1);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//void strint_reverse(char* arr)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int left = 0;</span></span><br><span class="line"><span class="comment">//int right = my_strlen(arr) - 1;</span></span><br><span class="line"><span class="comment">//while (left &lt; right)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//char tmp = arr[left];</span></span><br><span class="line"><span class="comment">//arr[left] = arr[right];</span></span><br><span class="line"><span class="comment">//arr[right] = tmp;</span></span><br><span class="line"><span class="comment">//left++;</span></span><br><span class="line"><span class="comment">//right--;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//char arr[] = &quot;789456&quot;;</span></span><br><span class="line"><span class="comment">//strint_reverse(arr);</span></span><br><span class="line"><span class="comment">//printf(&quot;%s&quot;, arr);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;用指针（先接触一下，后期才细讲）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int my_strlen(char* arr)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (*arr != &#x27;\0&#x27;)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//return 1 + my_strlen(arr + 1);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//void strint_reverse(char* arr)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int left = 0;</span></span><br><span class="line"><span class="comment">//int right = my_strlen(arr) - 1;</span></span><br><span class="line"><span class="comment">//while (left &lt; right)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//char tmp = *(arr+left);</span></span><br><span class="line"><span class="comment">//*(arr+left) = *(arr+right);</span></span><br><span class="line"><span class="comment">//*(arr+right) = tmp;</span></span><br><span class="line"><span class="comment">//left++;</span></span><br><span class="line"><span class="comment">//right--;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//char arr[] = &quot;789456&quot;;</span></span><br><span class="line"><span class="comment">//strint_reverse(arr);</span></span><br><span class="line"><span class="comment">//printf(&quot;%s&quot;, arr);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;用递归写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int my_strlen(char* arr)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (*arr != &#x27;\0&#x27;)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//return 1 + my_strlen(arr + 1);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//void reverse_string(char* arr)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//char tmp = *arr;</span></span><br><span class="line"><span class="comment">//int len = my_strlen(arr);</span></span><br><span class="line"><span class="comment">//*arr = *(arr+len-1);</span></span><br><span class="line"><span class="comment">//*(arr + len - 1) = &#x27;\0&#x27;;</span></span><br><span class="line"><span class="comment">//if (my_strlen(arr+1) &gt;= 2)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//reverse_string(arr + 1);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//*(arr + len - 1) = tmp;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//char arr[] = &quot;abcdef&quot;;</span></span><br><span class="line"><span class="comment">//reverse_string(arr);</span></span><br><span class="line"><span class="comment">//printf(&quot;%s&quot;, arr);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;作业；写一个递归函数Digitsum(n),输入一个非负整数，返回组成他的数字之和.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int Digitsum(int num)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (num &gt; 9)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//return Digitsum(num / 10) + num % 10;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//return num;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int num = 0;</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d&quot;, &amp;num);</span></span><br><span class="line"><span class="comment">//int sum = Digitsum(num);</span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, sum);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;作业：编写一个函数计算n的k次方.（递归）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int pow1(int n, int k)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int q = n;</span></span><br><span class="line"><span class="comment">//int p = k - 1;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//if (k == 0)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//return 1;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//while (p--)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//n = n * q;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return n;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int n, k;</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d%d&quot;, &amp;n, &amp;k);</span></span><br><span class="line"><span class="comment">//int ret=pow1(n, k);</span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, ret);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;递归</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//double pow1(int n, int k)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (k == 0.0)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//return 1.0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else if (k &gt; 0.0)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//return n * pow1(n, k - 1);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//return 1.0 / (pow1(n, -k));</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int n, k;</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d%d&quot;, &amp;n, &amp;k);</span></span><br><span class="line"><span class="comment">//double ret=pow1(n, k);</span></span><br><span class="line"><span class="comment">//printf(&quot;%lf&quot;, ret);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><h1 id="———————————————————————-一维数组，二维数组——————————————————————————–"><a href="#———————————————————————-一维数组，二维数组——————————————————————————–" class="headerlink" title="———————————————————————-一维数组，二维数组——————————————————————————–"></a>———————————————————————-一维数组，二维数组——————————————————————————–</h1><p>&#x2F;&#x2F;一维数组–就是平时创建的数组<br>&#x2F;&#x2F;数组–一种相同类型元素的集合.<br>&#x2F;&#x2F;数组是用下标（[]）来访问的，下标是从0开始<br>&#x2F;&#x2F;一维数组在内存中是连续存放的<br>&#x2F;&#x2F;！！！！！！！！！！！！！！！！\0是在字符，字符串数组中才有，整形数组中没有\0.！！！！！！！！！！！！！！！！！！<br>&#x2F;&#x2F;数组的大小可以通过计算得到（sizeof）<br>&#x2F;&#x2F;sizeof会计算整个数组，\0也算在长度里面;sizeof计算数组元素个数<br>&#x2F;&#x2F;                                             strlen求字符串长度不会把\0算进去，但是如果数组有\0存在那他也是这个数组的元素啊，要注意这里求的是数组元素个数.<br>&#x2F;&#x2F;strlen计算到\0为止，\0不算在长度里   strlen用来求字符串长度，整形数组一般不用<br>&#x2F;&#x2F;%p–按地址格式打印—16进制的打印（00000000）<br>&#x2F;&#x2F; printf(“%p”, 0x12); 结果是00000012；<br>&#x2F;&#x2F;16进制输出.<br>&#x2F;&#x2F; printf（”%x”, 0x12）; 结果是12；<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;二维数组<br>&#x2F;&#x2F;arr[行][列]<br>&#x2F;&#x2F;行可以省略，列不可以.二维数组下标也是从0开始<br>&#x2F;&#x2F;二维数组在内存中也是连续的.    行内部连续，跨行也是连续的.<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;数组作为函数参数<br>&#x2F;&#x2F;冒泡排序 bubble_sort()<br>&#x2F;&#x2F;冒泡排序的思想：两两相邻的元素进行比较，并且可能的话需要交换！<br>&#x2F;&#x2F;        冒泡排序<br>&#x2F;&#x2F; 9 8 7 6 5 4 3 2 1 0   &#x2F;&#x2F;第一步9和8比较，因为我要升序，而9比8大，所以9和8交换<br>&#x2F;&#x2F; 8 9 7 6 5 4 3 2 1 0    &#x2F;&#x2F;9和8交换了<br>&#x2F;&#x2F; 8 7 9 6 5 4 3 2 1 0     &#x2F;&#x2F;7和9比较，同理，所以9和7交换了<br>&#x2F;&#x2F; 8 7 6 9 5 4 3 2 1 0     &#x2F;&#x2F;6和9比较，同理，所以9和6交换了<br>                            &#x2F;&#x2F;以此类推<br>&#x2F;&#x2F;最后效果就是，9一步一步往后移动.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//void bubble_sort(int arr[],int sz)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int i;</span></span><br><span class="line"><span class="comment">//for (i = 0; i &lt; sz - 1; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int j = 0;</span></span><br><span class="line"><span class="comment">//for (j = 0; j &lt;sz-1-i ; j++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (arr[j] &gt; arr[j + 1])</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int tmp = arr[j];</span></span><br><span class="line"><span class="comment">//arr[j] = arr[j + 1];</span></span><br><span class="line"><span class="comment">//arr[j + 1] = tmp;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int arr[] = &#123; 9,8,7,6,5,4,3,2,1,0 &#125;;      //这个数组是降序的.</span></span><br><span class="line"><span class="comment">//int sz = sizeof(arr) / sizeof(arr[0]);</span></span><br><span class="line"><span class="comment">//bubble_sort(arr,sz);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;<br>&#x2F;&#x2F;数组名是什么？<br>&#x2F;&#x2F;数组名是数组首元素地址<br>&#x2F;&#x2F;但是有2个例外<br>&#x2F;&#x2F;1.sizeof（数组名）—数组名表示整个数组–计算的是整个数组的大小，单位是字节.<br>&#x2F;&#x2F;2.&amp;数组名—数组名表示整个数组–取出的是整个数的地址<br>&#x2F;&#x2F;数组的地址就是数组首元素的地址<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;优化冒泡排序<br>&#x2F;&#x2F;冒泡排序在循环里不断的比较，如果本来就是有序数组，也会一个一个比较<br>&#x2F;&#x2F;怎么办呢，加上个flag&#x3D;1<br>&#x2F;&#x2F;因为如果说本来就是有序的，那么就不会进if里flag一直都是1；直接跳出循环就可以了.<br>&#x2F;&#x2F;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//void bubble_sort(int arr[], int sz)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int i;</span></span><br><span class="line"><span class="comment">//int flag = 1;</span></span><br><span class="line"><span class="comment">//for (i = 0; i &lt; sz - 1; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int j = 0;</span></span><br><span class="line"><span class="comment">//for (j = 0; j &lt; sz - 1 - i; j++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (arr[j] &gt; arr[j + 1])</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int tmp = arr[j];</span></span><br><span class="line"><span class="comment">//arr[j] = arr[j + 1];</span></span><br><span class="line"><span class="comment">//arr[j + 1] = tmp;</span></span><br><span class="line"><span class="comment">//flag = 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//if (flag == 1)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int arr[] = &#123; 9,8,7,6,5,4,3,2,1,0 &#125;; </span></span><br><span class="line"><span class="comment">//int sz = sizeof(arr) / sizeof(arr[0]);</span></span><br><span class="line"><span class="comment">//bubble_sort(arr, sz);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h1 id="————————————————————————-操作符详解————————————————————————————–"><a href="#————————————————————————-操作符详解————————————————————————————–" class="headerlink" title="————————————————————————-操作符详解————————————————————————————–"></a>————————————————————————-操作符详解————————————————————————————–</h1><p>&#x2F;&#x2F;1.算数操作符<br>&#x2F;&#x2F;+ - * &#x2F; %<br>&#x2F;&#x2F;除号想要得到小数，被除数或者除数至少有一个也要是小数<br>&#x2F;&#x2F;模数，取模的两个数必须都是整数.不可以模0和负数.<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;2.移位操作符<br>&#x2F;&#x2F;1.&lt;&lt;–左移操作符   2.&gt;&gt;–右移操作符<br>&#x2F;&#x2F;移位操作符是把要移位的数的二进制位移动一位.<br>&#x2F;&#x2F;左移操作符  现在移动的数是2.  向左移动一位<br>&#x2F;&#x2F; int a&#x3D;2;<br>&#x2F;&#x2F; int b&#x3D;a&lt;&lt;1<br>&#x2F;&#x2F; printf(“%d”, b)   输出4<br>&#x2F;&#x2F; printf(“%d”, a)   输出2<br>&#x2F;&#x2F;    00000000000000000000000000000010     2的32位2进制<br>&#x2F;&#x2F;   00000000000000000000000000000010   向左移动一位        左边丢弃，右边补0<br>&#x2F;&#x2F;    00000000000000000000000000000100     最左边的去掉，最右边的0补上   输出4<br>&#x2F;&#x2F;右移操作符<br>&#x2F;&#x2F; 1.算数右移—-右边丢弃左边补原来的符号位<br>&#x2F;&#x2F; 2.逻辑右移—-右边丢弃，左边补0<br>&#x2F;&#x2F; vs2022用的是算数右移.<br>&#x2F;&#x2F;int a &#x3D; 10<br>&#x2F;&#x2F;int b &#x3D; a &gt;&gt; 1<br>&#x2F;&#x2F;printf(“%d”, b)   输出5<br>&#x2F;&#x2F;printf(“%d”, a)  输出10<br>&#x2F;&#x2F;    00000000000000000000000000001010      10的32位2进制<br>&#x2F;&#x2F;     00000000000000000000000000001010      向右移动一位<br>&#x2F;&#x2F;    00000000000000000000000000000101        因为是正数，所以不管用逻辑还是算数结果都一样.<br>&#x2F;&#x2F;int a &#x3D; -1<br>&#x2F;&#x2F;int b &#x3D;a &gt;&gt; 1<br>&#x2F;&#x2F;printf(“%d”, b)<br>&#x2F;&#x2F;负数：-1<br>&#x2F;&#x2F;存放在内存中<br>&#x2F;&#x2F;-1存放在内存中的是二进制的补码<br>&#x2F;&#x2F;整数的二进制表示形式：有3种<br>&#x2F;&#x2F; 原码：直接根据数值写出的二进制序列就是原码<br>&#x2F;&#x2F; 反码：符号位不变，其他按位取反<br>&#x2F;&#x2F; 补码：反码+1就是补码<br>&#x2F;&#x2F; 正整数的原反补相同<br>&#x2F;&#x2F;-1的原码 10000000000000000000000000000001<br>&#x2F;&#x2F;-1的反码 11111111111111111111111111111110<br>&#x2F;&#x2F;-1的补码 11111111111111111111111111111111      -1在内存中存的就是这个.<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;3.位操作符<br>&#x2F;&#x2F; &amp; —按位与  两个数的32位二进制进行比较，都是1输出1，其他输出0<br>&#x2F;&#x2F; | —按位或  2个数的32位二进制比较，   有一个是1输出1，其他输出0<br>&#x2F;&#x2F; ^ —按位异或 2个数的32位二进制比较，   相同为0，不同为1<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;作业：求一个整数存储在内存中的二进制中的1的个数<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;4.赋值操作符<br>&#x2F;&#x2F; +&#x3D;  -&#x3D;  *&#x3D;  &#x2F;&#x3D;  &gt;&gt;&#x3D;   &lt;&lt;&#x3D;  %&#x3D;  &amp;&#x3D;  |&#x3D;   ^&#x3D;<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;5.单目操作符<br>&#x2F;&#x2F; !  +   -   &amp;    sizeof   ~   –   ++    *   (类型)<br>&#x2F;&#x2F;1.！—逻辑反操作   把真变为假，把假变为真.例：如果数为0，!0 &#x3D;&#x3D; 1;    如果数不为零 !a &#x3D;&#x3D; 0;(a是不为0的任何数)<br>&#x2F;&#x2F;2.&amp; —取地址<br>&#x2F;&#x2F;3.~ —按位取反<br>&#x2F;&#x2F;4. （类型）—–强制类型转换 例，int a&#x3D;3.14  printf(“%d”, a);这样打印会报错，丢失数据.  （int）a&#x3D;3.14  printf（”%d”, a）,我非要用整形打印浮点数，那用强制类型转换就不会报错，数据还是会丢失.<br>&#x2F;&#x2F;5.sizeof() —计算所占空间，单位是字节  sizeof是操作符不是函数<br>&#x2F;&#x2F; int a &#x3D; 10;<br>&#x2F;&#x2F; int arr1[10] &#x3D; { 0 };<br>&#x2F;&#x2F; char arr2[10] &#x3D; { 0 };<br>&#x2F;&#x2F; printf(“%d”, sizeof(a));     4     一个整形占4个字节<br>&#x2F;&#x2F; printf(“%d”, sizeof(int));   4     一个整形占4个字节<br>&#x2F;&#x2F; printf(“%d”, sizeof a);      4     在计算变量的时候括号可以去掉，但是不建议. 一个整形占4个字节<br>&#x2F;&#x2F; printf(“%d”, sizeof(arr1));  40    数组一共有10个int元素，一个数（int）占4个大小，所以是40<br>&#x2F;&#x2F; printf(“%d”, sizeof(arr2));  10    数组一共有10个char元素  一个数（char）占1个大小 所以是10<br>&#x2F;&#x2F; short s &#x3D; 5 ;<br>&#x2F;&#x2F; int a &#x3D; 10 ;<br>&#x2F;&#x2F; printf(“%d”, sizeof(s &#x3D; a + 2) );  2     short是短整形的意思，一个短整型占2个大小<br>&#x2F;&#x2F; printf(“%d”, s );                  5     sizeof括号中放的表达式不参与运算<br>&#x2F;&#x2F;<br>&#x2F;&#x2F; 6.关系操作符<br>&#x2F;&#x2F; &gt;  &lt;  &gt;&#x3D;  &lt;&#x3D;  !&#x3D;  &#x3D;&#x3D;<br>&#x2F;&#x2F;<br>&#x2F;&#x2F; 7.逻辑操作符<br>&#x2F;&#x2F; 1. &amp;&amp; — 逻辑与  逻辑或遇到假（0）就停下不继续算下去   区分   &amp; — 按位与<br>&#x2F;&#x2F; 2. || — 逻辑或  逻辑或遇到真（非0）就停下不继续下去   区分   | — 按位或<br>&#x2F;&#x2F; 小练习34，在 练习作业.c<br>&#x2F;&#x2F;<br>&#x2F;&#x2F; 8.条件操作符<br>&#x2F;&#x2F; 1.条目操作符 exp1 ？ exp2 ：exp3<br>&#x2F;&#x2F;         表达式1结果为真表达式2计算，表达式1结果为假表达式3计算<br>&#x2F;&#x2F; 2.逗号表达式<br>&#x2F;&#x2F; exp1, exp2,exp3,……expN<br>&#x2F;&#x2F; int a &#x3D; 3  b &#x3D; 5  c &#x3D; 0<br>&#x2F;&#x2F; int d &#x3D; (c &#x3D; 5,a &#x3D; c + 3,b &#x3D; a - 4,c +&#x3D; 5 );<br>&#x2F;&#x2F;             a&#x3D;&#x3D;8     b&#x3D;&#x3D;4     c&#x3D;&#x3D;10        d&#x3D;10<br>&#x2F;&#x2F;   从左到右执行，整个表达式的结果是最后一个表达式的结果<br>&#x2F;&#x2F; 3.下标引用.函数调用和结构成员<br>&#x2F;&#x2F; 1.下标引用操作符：[]  一个操作符有他对应的操作数，例arr[a]   arr和a就是他的操作数<br>&#x2F;&#x2F; 2.函数调用操作符：（）    test（）    test是他的操作数   test（a,b）  test和a和b是他的操作数<br>&#x2F;&#x2F; 3.结构成员访问操作符 &#x2F;&#x2F; .    &#x2F;&#x2F;  -&gt;<br>&#x2F;&#x2F;<br>&#x2F;&#x2F; 9.表达式求值<br>&#x2F;&#x2F; 表达式求值的顺序一部分是由操作符的优先级和结合性决定<br>&#x2F;&#x2F; 同样，有的表达式的操作数在求值的过程中可能需要转换为其他类型<br>&#x2F;&#x2F;<br>&#x2F;&#x2F; 10.隐式类型转换<br>&#x2F;&#x2F; 整形提升：在表达式计算时，各种整型首先要提升为int类型，如果int类型不足以表示则要提升为unsigned int类型；然后执行表达式的运算。<br>&#x2F;&#x2F; char a &#x3D; 3;<br>&#x2F;&#x2F; 00000011 &#x3D;&#x3D; a    这里第一个符号位是0所以都补0，如果是1那就都补1<br>&#x2F;&#x2F; 00000000000000000000000000000011 — 整形提升<br>&#x2F;&#x2F; char b &#x3D; 127;<br>&#x2F;&#x2F; 01111111 &#x3D;&#x3D; b<br>&#x2F;&#x2F; 00000000000000000000000001111111 — 整形提升<br>&#x2F;&#x2F; char c &#x3D; a + b;<br>&#x2F;&#x2F; 00000000000000000000000000000011<br>&#x2F;&#x2F; 00000000000000000000000001111111     这里a+b<br>&#x2F;&#x2F; 00000000000000000000000010000010<br>&#x2F;&#x2F; 10000010  &#x3D;&#x3D; c     因为c是char类型所以截断<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;    发现a和b都是char类型，都没有达到一个int的大小<br>&#x2F;&#x2F;     这里就会发生整形提升<br>&#x2F;&#x2F; printf(“%d”, c);  输出  -126<br>&#x2F;&#x2F;    这里c是char类型，但是要输出的是整形，所以发生整形提升<br>&#x2F;&#x2F; 10000010   &#x3D;&#x3D; c<br>&#x2F;&#x2F; 11111111111111111111111110000010    因为符号位是1，所以前面都补1.这是整形提升后的c ，是c的补码<br>&#x2F;&#x2F; 11111111111111111111111110000001    要转换成原码才能打印， 这里是c的反码<br>&#x2F;&#x2F; 10000000000000000000000001111110    这里是原码  printf那里读的就是这个，这就是-126<br>&#x2F;&#x2F; char a &#x3D; 0xb6;<br>&#x2F;&#x2F; short b &#x3D; 0xb600;<br>&#x2F;&#x2F; int c &#x3D; 0xb6000000;<br>&#x2F;&#x2F; if(a &#x3D;&#x3D; 0xb6)<br>&#x2F;&#x2F;printf(a”);    因为a是char类型，在计算的时候发生整形提升，a就不是0xb6  所以不打印<br>&#x2F;&#x2F; if(b &#x3D;&#x3D; 0xb600);<br>&#x2F;&#x2F;printf(“b”);     因为b是short类型，在计算的时候发生整形提升，b也不是原来的数，所以不打印<br>&#x2F;&#x2F; if(c &#x3D;&#x3D; 0xb6000000)<br>&#x2F;&#x2F;printf(“c”);       因为c是int类型，在计算的时候不需要整形提升，c还是c ，所以最后结果是打印 c<br>&#x2F;&#x2F;<br>&#x2F;&#x2F; 11.算数转换<br>&#x2F;&#x2F;如果某个操作符的各个操作数属于不同的类型，那么除非其中一个操作数的转换为另一个操作数的类型，否则操作就无法进行。下面的层次体系称为寻常算术转换。<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;12.操作符的属性<br>&#x2F;&#x2F;1.操作符的优先级<br>&#x2F;&#x2F;2.操作符的结合性<br>&#x2F;&#x2F;3.是否控制求值顺序。<br>&#x2F;&#x2F;两个相邻的操作符先执行哪个？<br>&#x2F;&#x2F;取决于他们的优先级，如果两者优先级相同，取决于他们的结合性.<br>&#x2F;&#x2F;int fun()<br>&#x2F;&#x2F;{<br>&#x2F;&#x2F;static int count &#x3D; 1;<br>&#x2F;&#x2F;return ++count;<br>&#x2F;&#x2F;}<br>&#x2F;&#x2F;int main()<br>&#x2F;&#x2F;{                                                            &#x2F;&#x2F;计算过程：先走进fun(),count初始化为1，++count，第一个fun（）就是2，<br>&#x2F;&#x2F;int answer;                                                           在走进第二2，因为被static修饰过，所以第二次进fun（）的时候count不会被再次创建，count不会被初始化为1，count还是2<br>&#x2F;&#x2F;answer &#x3D; fun() - fun() * fun();   2 - 3 * 4 &#x3D;-10                       所以第二个fun（）为3，同理，第三个fun()是4.<br>&#x2F;&#x2F;printf(“%d”, answer);               输出-10            ！！但是，因为fun（）函数优先级一样，并不知道哪个fun先算，所以这个是问题代码.<br>&#x2F;&#x2F;return 0;<br>&#x2F;&#x2F;}<br>&#x2F;&#x2F;总结：如果我们写出的表达式不能确定唯一的计算路径，那这个表达式就是存在问题的.</p><h1 id="——————————————————————————–操作符详解完——————————————————————————"><a href="#——————————————————————————–操作符详解完——————————————————————————" class="headerlink" title="——————————————————————————–操作符详解完——————————————————————————"></a>——————————————————————————–操作符详解完——————————————————————————</h1><p>&#x2F;&#x2F;作业：1.实现函数init（）初始化数组为0<br>&#x2F;&#x2F;      2.实现print（）打印数组的每个元素<br>&#x2F;&#x2F;      3.实现对reverse（）函数完成数组元素的逆置   和字符串逆序一样</p><p>&#x2F;&#x2F;作业：将数组a中的内容和数组b中的内容交换</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a[] = &#123; 1,3,5,7,9 &#125;;</span></span><br><span class="line"><span class="comment">//int b[] = &#123; 2,4,6,8,10 &#125;;</span></span><br><span class="line"><span class="comment">//int sz = sizeof(a) / sizeof(a[0]);</span></span><br><span class="line"><span class="comment">//int i;</span></span><br><span class="line"><span class="comment">//for (i = 0; i &lt; sz; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int tmp = a[i];</span></span><br><span class="line"><span class="comment">//a[i] = b[i];</span></span><br><span class="line"><span class="comment">//b[i] = tmp;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h1 id="———————————————————————————–指针初阶———————————————————————————–"><a href="#———————————————————————————–指针初阶———————————————————————————–" class="headerlink" title="———————————————————————————–指针初阶———————————————————————————–"></a>———————————————————————————–指针初阶———————————————————————————–</h1><p>&#x2F;&#x2F;指针是编程语言中的一个对象，利用地址，他的值直接指向存在电脑储存器中另一个地方的值.由于同过指针能找到锁需要的变量单元，可以说地址指向该变量单元，因此，将地址形象化<br>&#x2F;&#x2F;的称为指针意思是通过他能找到以他为地址的内存单元<br>&#x2F;&#x2F;一个指针占4个字节<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;1.指针类型的意义<br>&#x2F;&#x2F;   1.指针类型决定了：指针解引用权限有多大<br>&#x2F;&#x2F;   2.指针类型决定了，指针走一步，能走多远（步长）<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;int a &#x3D; 0x11223344;   在内存中 44 33 22 11    4个字节<br>&#x2F;&#x2F;char* pc &#x3D; &amp;a;        因为char所以操作权限只有1个字节<br>&#x2F;&#x2F;*pc &#x3D; 0;              00 33 22 11<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;2.野指针<br>&#x2F;&#x2F; 1.指针未初始化<br>&#x2F;&#x2F;就是指指针指向的位置是不可知的（随机的，不确定的，没有明确限制的）<br>&#x2F;&#x2F;int &#x3D; <em>p；     野指针      p是一个局部的指针变量，局部变量不初始化的话，默认是随机值<br>&#x2F;&#x2F;<em>p &#x3D; 20;       非法访问内存了<br>&#x2F;&#x2F; 2.指针越界访问<br>&#x2F;&#x2F; int arr[10] &#x3D; { 0 };<br>&#x2F;&#x2F; int * p &#x3D; arr;<br>&#x2F;&#x2F; int i &#x3D; 0;<br>&#x2F;&#x2F; for(i&#x3D;0;i&lt;&#x3D;10;i++)       循环了11次，但是一共只有10个位置，超过了p的最多位置，这就是越界访问<br>&#x2F;&#x2F; {<br>&#x2F;&#x2F;<em>p &#x3D; i;<br>&#x2F;&#x2F;p++;<br>&#x2F;&#x2F; }<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;3.指针指向的空间释放<br>&#x2F;&#x2F; 解释：就本来有个指针p，指向某个地址，这没问题，过了一会这个地址里的内容因为某些原因被释放了，被干掉了，那这个指针也变成了野指针<br>&#x2F;&#x2F;这里简单提示一下，会在动态内存开辟的时候讲<br>&#x2F;&#x2F; int</em> test()<br>&#x2F;&#x2F; {                               &#x2F;&#x2F;创建一个test函数，在test函数中创建一个a，返回a的地址，回到主函数后用p来接收，最后解引用通过</em>p来改变a的值<br>&#x2F;&#x2F;int a &#x3D; 10;                &#x2F;&#x2F;a的地址是会如实的放到p里，但是a出了test函数就被销毁了，这时再用</em>p&#x3D;20，就是非法访问内存.<br>&#x2F;&#x2F;return &amp;a;<br>&#x2F;&#x2F; }<br>&#x2F;&#x2F; int main()<br>&#x2F;&#x2F; {<br>&#x2F;&#x2F;int * p &#x3D; test();<br>&#x2F;&#x2F;*p &#x3D; 20;<br>&#x2F;&#x2F;return 0;<br>&#x2F;&#x2F; }<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;4.如何规避野指针<br>&#x2F;&#x2F; 1.指针初始化<br>&#x2F;&#x2F;      当前不知道p应该初始化为什么地址的时候（下面可能会初始化），直接先初始化为NULL .    int *p &#x3D; NULL（空指针）;<br>&#x2F;&#x2F;      初始化成空指针的指针是不能访问的.不能用的.<br>&#x2F;&#x2F; 2.小心指针越界<br>&#x2F;&#x2F;      c语言本身是不会检查数据的越界行为的<br>&#x2F;&#x2F; 3.指针指向空间释放的时候要及时把它置成NULL<br>&#x2F;&#x2F; 4.指针使用之前检查有效性<br>&#x2F;&#x2F;     if（p !&#x3D; NULL）  判断一下能不能用，是不是空指针<br>&#x2F;&#x2F;<br>&#x2F;&#x2F; 3.指针运算<br>&#x2F;&#x2F;    1.指针加减整数<br>&#x2F;&#x2F;       #define N_VALUES 5        定义一个变量（N_VALUES）为5<br>&#x2F;&#x2F; float values[N_VALUES];     创建类型为单精度浮点数的数组，数组大小为5，也就是N_VALUES的大小<br>&#x2F;&#x2F;       float *vp<br>&#x2F;&#x2F; for(vp &#x3D; &amp;values[0]; vp &lt; &amp;values[N_VALUES];)      &#x2F;&#x2F;vp&#x3D;&amp;values[0]是初始化部分，vp&lt;&amp;values[N_VALUES]是判断部分，后面的调整部分没写，语法上可以不写<br>&#x2F;&#x2F; {<br>&#x2F;&#x2F;*vp++;<br>&#x2F;&#x2F; }<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;     int arr[10] &#x3D; {1,2,3,4,5,6,7,8,9,10};<br>&#x2F;&#x2F;     printf(“%d”, &amp;arr[9] - &amp;arr[0]);      输出9.   指针-指针得到的是两个指针之间的元素个数<br>&#x2F;&#x2F;         指针和指针相减的前提是：两个指针指向同一块空间<br>&#x2F;&#x2F;用指针实现strlen（）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int my_strlen(char* str) </span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//char* start = str;                  //先把首元素地址穿过去，然后用start把首元素地址拷贝下来，循环str，直到停下，这时候str就是‘\0’的地址，</span></span><br><span class="line"><span class="comment">//while (*str != &#x27;\0&#x27;)               //用最后一位的地址减去首元素的地址，得到的就是元素个数.</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//str++;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return str - start;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int len = my_strlen(&quot;abcgdfdhdfh&quot;);</span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, len);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 注意区分指针加减，和，指针加指针，指针减指针的区别<br>&#x2F;&#x2F; 指针减指针得到的是两个指针之间的元素个数<br>&#x2F;&#x2F; 指针加指针并没有什么用<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;5.指针和数组<br>&#x2F;&#x2F; 因为指针就是一个地址，那数组也是一个地址，所以可以写成<br>&#x2F;&#x2F; int arr[] &#x3D; { 0 };<br>&#x2F;&#x2F; int *p &#x3D; arr;<br>&#x2F;&#x2F;<br>&#x2F;&#x2F; p[2] –&gt; *(p+2)<br>&#x2F;&#x2F;<br>&#x2F;&#x2F; arr[2] –&gt; *(arr+2) –&gt; *(2+arr) –&gt; 2[arr]<br>&#x2F;&#x2F;<br>&#x2F;&#x2F; arr[2] &lt;&#x3D;&#x3D;&gt; *(arr+2) &lt;&#x3D;&#x3D;&gt; *(p+2) &lt;&#x3D;&#x3D;&gt; *(2+p) &lt;&#x3D;&#x3D;&gt; *(2+arr) &lt;&#x3D;&#x3D;&gt; 2[arr]<br>&#x2F;&#x2F;<br>&#x2F;&#x2F; 6.二级指针<br>&#x2F;&#x2F;  int a &#x3D; 0 ;<br>&#x2F;&#x2F;  int * pa &#x3D; &amp;a ;    &#x2F;&#x2F;一级指针<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;  int ** ppa &#x3D; &amp;pa ;   &#x2F;&#x2F;二级指针  *的位置无所谓，贴着int或者ppa都一样.<br>&#x2F;&#x2F;     **ppa &#x3D; 0;       &#x2F;&#x2F;解引用也要两颗星<br>&#x2F;&#x2F;  return 0 ;<br>&#x2F;&#x2F;<br>&#x2F;&#x2F; 7.指针数组<br>&#x2F;&#x2F;<br>&#x2F;&#x2F; int arr[10];  &#x2F;&#x2F;整形数组 – 存放整形的数组就是整形数组<br>&#x2F;&#x2F;<br>&#x2F;&#x2F; char ch[5];   &#x2F;&#x2F;字符数组 - 存放的是字符<br>&#x2F;&#x2F;<br>&#x2F;&#x2F; &#x2F;&#x2F;指针数组  –存放指针的数组<br>&#x2F;&#x2F; int * parr[] ;   &#x2F;&#x2F;整形指针的数组<br>&#x2F;&#x2F; char * pch[] ;   &#x2F;&#x2F;字符指针的数组<br>&#x2F;&#x2F; </p><h1 id="—————————————————————————————-指针初阶完—————————————————————————–"><a href="#—————————————————————————————-指针初阶完—————————————————————————–" class="headerlink" title="—————————————————————————————-指针初阶完—————————————————————————–"></a>—————————————————————————————-指针初阶完—————————————————————————–</h1><h1 id="————————————————————————————–结构体初阶——————————————————————————–"><a href="#————————————————————————————–结构体初阶——————————————————————————–" class="headerlink" title="————————————————————————————–结构体初阶——————————————————————————–"></a>————————————————————————————–结构体初阶——————————————————————————–</h1><p>&#x2F;&#x2F;数组 - 一组相同类型的集合<br>&#x2F;&#x2F;<br>&#x2F;&#x2F; 结构体：<br>&#x2F;&#x2F;   也是一些值的集合，但值的类型可以不同！<br>&#x2F;&#x2F; struct – 结构体<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;1.结构体变量的定义和初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//struct b</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//char c;</span></span><br><span class="line"><span class="comment">//short s;</span></span><br><span class="line"><span class="comment">//double d;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//struct stu</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//struct b;</span></span><br><span class="line"><span class="comment">////成员变量    成员变量可以是标量，数组，指针，甚至是其他结构体</span></span><br><span class="line"><span class="comment">//char name[20];  //名字</span></span><br><span class="line"><span class="comment">//int age;       //年龄 </span></span><br><span class="line"><span class="comment">//char id[20];</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;s1,s2;  //这里创建的s1和s2也是结构体的2个变量</span></span><br><span class="line"><span class="comment">////s1和s2是全局变量</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////struct stu s;  //对象</span></span><br><span class="line"><span class="comment">//struct stu s = &#123; &#123;&#x27;w&#x27;,20,3.14&#125;, &quot;张三&quot;,30,&quot;2020305&quot;&#125;;    //结构体初始化，里面的大括号是初始化 struct b 这个结构体.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;2.结构体成员的访问<br>&#x2F;&#x2F;.操作符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//struct B</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//char c;</span></span><br><span class="line"><span class="comment">//short s;</span></span><br><span class="line"><span class="comment">//double d;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//struct stu                //stu是结构体</span></span><br><span class="line"><span class="comment">//&#123;                        //sb是结构体变量</span></span><br><span class="line"><span class="comment">//                    //下面的s是结构体对象</span></span><br><span class="line"><span class="comment">////结构体成员                   </span></span><br><span class="line"><span class="comment">//struct B sb;</span></span><br><span class="line"><span class="comment">////成员变量    成员变量可以是标量，数组，指针，甚至是其他结构体</span></span><br><span class="line"><span class="comment">//char name[20];  //名字</span></span><br><span class="line"><span class="comment">//int age;       //年龄 </span></span><br><span class="line"><span class="comment">//char id[20];</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;s1, s2;  //这里创建的s1和s2也是结构体的2个变量</span></span><br><span class="line"><span class="comment">////s1和s2是全局变量</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////struct stu s;  //对象</span></span><br><span class="line"><span class="comment">//struct stu s = &#123; &#123;&#x27;w&#x27;,20,3.14&#125;, &quot;张三&quot;,30,&quot;2020305&quot; &#125;;    //结构体初始化，里面的大括号是初始化 struct b 这个结构体.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//printf(&quot;%c\n&quot;, s.sb.c);  //打印s里面sb结构体里面c的值  输出20200305</span></span><br><span class="line"><span class="comment">//printf(&quot;%s\n&quot;, s.id);   //输出 &#x27; w &#x27; </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////  -&gt; 箭头操作符</span></span><br><span class="line"><span class="comment">//struct stu* ps = &amp;s;</span></span><br><span class="line"><span class="comment">//printf(&quot;%c\n&quot;, (*ps).sb.c);  //先找到s，在找到sb，最后找到sb里的c</span></span><br><span class="line"><span class="comment">//printf(&quot;%c\n&quot;, ps-&gt;sb.c);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;3.结构体传参</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//struct B</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//char c;</span></span><br><span class="line"><span class="comment">//short s;</span></span><br><span class="line"><span class="comment">//double d;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//struct stu                //stu是结构体</span></span><br><span class="line"><span class="comment">//&#123;                        //sb是结构体变量</span></span><br><span class="line"><span class="comment">////下面的s是结构体对象</span></span><br><span class="line"><span class="comment">////结构体成员                   </span></span><br><span class="line"><span class="comment">//struct B sb;</span></span><br><span class="line"><span class="comment">////成员变量    成员变量可以是标量，数组，指针，甚至是其他结构体</span></span><br><span class="line"><span class="comment">//char name[20];  //名字</span></span><br><span class="line"><span class="comment">//int age;       //年龄 </span></span><br><span class="line"><span class="comment">//char id[20];</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;s1, s2;  //这里创建的s1和s2也是结构体的2个变量</span></span><br><span class="line"><span class="comment">////s1和s2是全局变量</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//void print1(struct stu t)     //普通</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;%c %d %lf %s %d %s \n&quot;, t.sb.c, t.sb.s, t.sb.d, t.name, t.age, t.id);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//void print2(struct stu* ps)   //指针</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;%c %d %lf %s %d %s &quot;, ps-&gt;sb.c, ps-&gt;sb.s, ps-&gt;sb.d, ps-&gt;name, ps-&gt;age, ps-&gt;id);      </span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////struct stu s;  //对象</span></span><br><span class="line"><span class="comment">//struct stu s = &#123; &#123;&#x27;w&#x27;,20,3.14&#125;, &quot;张三&quot;,30,&quot;2020305&quot; &#125;;    //结构体初始化，里面的大括号是初始化 struct b 这个结构体.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//printf(&quot;%c\n&quot;, s.sb.c);  //打印s里面sb结构体里面c的值  输出20200305</span></span><br><span class="line"><span class="comment">//printf(&quot;%s\n&quot;, s.id);   //输出 &#x27; w &#x27; </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////  -&gt; 箭头操作符</span></span><br><span class="line"><span class="comment">//struct stu* ps = &amp;s;</span></span><br><span class="line"><span class="comment">//printf(&quot;%c\n&quot;, (*ps).sb.c);  //先找到s，在找到sb，最后找到sb里的c</span></span><br><span class="line"><span class="comment">//printf(&quot;%c\n&quot;, ps-&gt;sb.c);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//print1(s);</span></span><br><span class="line"><span class="comment">//print2(&amp;s);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 4.参数压栈<br>&#x2F;&#x2F; 栈 - 一种数据结构<br>&#x2F;&#x2F; 先进的后出，后进的先出    可以理解为和弹匣差不多<br>&#x2F;&#x2F; 压栈       压子弹<br>&#x2F;&#x2F; 出栈       用子弹<br>&#x2F;&#x2F; </p><h1 id="—————————————————————————————-结构体初阶完———————————————————————–"><a href="#—————————————————————————————-结构体初阶完———————————————————————–" class="headerlink" title="—————————————————————————————-结构体初阶完———————————————————————–"></a>—————————————————————————————-结构体初阶完———————————————————————–</h1><h1 id="———————————————————————————–调试技巧———————————————————————————–"><a href="#———————————————————————————–调试技巧———————————————————————————–" class="headerlink" title="———————————————————————————–调试技巧———————————————————————————–"></a>———————————————————————————–调试技巧———————————————————————————–</h1><p>&#x2F;&#x2F; 掌握基本的快捷键<br>&#x2F;&#x2F; 熟悉调试的方法，调试中有哪些问题<br>&#x2F;&#x2F; 多刷题，多看书，多调试，多写代码<br>&#x2F;&#x2F; 鹏哥推荐的书籍：<br>&#x2F;&#x2F; 1.《c陷阱和缺陷》<br>&#x2F;&#x2F; 2.《明解C语言》初级和进阶2版<br>&#x2F;&#x2F; 3.《c和指针》<br>&#x2F;&#x2F; 4.《比特c课件》<br>&#x2F;&#x2F; 5.《C语言深度解剖》<br>&#x2F;&#x2F; 6.《C primer plus》  太厚了容易放弃<br>&#x2F;&#x2F; 7.谭浩强的C语言 —- 看起来通俗易懂，但是代码风格写的很差，只看他的语法，不模仿代码</p><h1 id="———————————————————————-调试模拟实现字符串相关函数———————————————————————"><a href="#———————————————————————-调试模拟实现字符串相关函数———————————————————————" class="headerlink" title="———————————————————————-调试模拟实现字符串相关函数———————————————————————"></a>———————————————————————-调试模拟实现字符串相关函数———————————————————————</h1><p>&#x2F;&#x2F;作业：模拟实现库函数 strcpy<br>&#x2F;&#x2F;strcpy — 字符串拷贝<br>&#x2F;&#x2F;strcpy会吧字符串里的\0也拷贝过来<br>&#x2F;&#x2F; strcpy（目标空间的起始地址，源空间的起始地址）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//char arr1[20] = &#123; 0 &#125;;     //arr1里的内容是 0 0 0 0 0 0 0 0 0..... 一共20个0</span></span><br><span class="line"><span class="comment">//char arr2[] = &quot;hello&quot;;    //arr2里的内容是 h e l l o \0 ;</span></span><br><span class="line"><span class="comment">//strcpy(arr1,arr2 );          //此时arr1里的内容是 h e l l o \0 0 0 0 0 0 0 ......14个0</span></span><br><span class="line"><span class="comment">//printf(&quot;%s&quot;, arr1);       //输出 hello  因为打印到\0就停止打印了，不管后面还有没有内容.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//char* my_strcpy(char* arr1, const char* arr2)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">// strcpy这个库函数，其实返回的是目标空间的起始地址</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// 我们要是想返回目标空间的的起始地址直接return arr1；是不行的</span></span><br><span class="line"><span class="comment">// char *ret = arr1;</span></span><br><span class="line"><span class="comment">// return ret；</span></span><br><span class="line"><span class="comment">// 需要新建一个指针在返回</span></span><br><span class="line"><span class="comment">// 返回ret后，同样的要把函数返回值从void变成char*</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//             const在这里的作用：防止写反 本来是把arr2里的复制给arr1，如果写反了，写成了arr1复制给arr2那么程序就会报错</span></span><br><span class="line"><span class="comment">// const --- 限定一个变量不允许被改变</span></span><br><span class="line"><span class="comment">// const修饰变量，这个变量就被称为常变量，不能被修改，但是本质上还是变量</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// assert(arr1 != &quot;NULL&quot;);   --- 断言</span></span><br><span class="line"><span class="comment">// assert(arr2 != &quot;NULL&quot;);</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// assert --- 断言 引头文件#include &lt;assert.h&gt;;</span></span><br><span class="line"><span class="comment">// 断言的作用：如果满足某个条件不允许某件事的时候，断言就会报个错出来.</span></span><br><span class="line"><span class="comment">//             说人话：在这个场景里，如果传过来空指针，就会报错，并告诉你错在哪一行</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">////while (*arr2!=&#x27;\0&#x27;)</span></span><br><span class="line"><span class="comment">////&#123;</span></span><br><span class="line"><span class="comment">////*arr1 = *arr2;</span></span><br><span class="line"><span class="comment">////arr1++;</span></span><br><span class="line"><span class="comment">////arr2++;</span></span><br><span class="line"><span class="comment">////&#125;</span></span><br><span class="line"><span class="comment">////*arr1 = *arr2;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////while (*arr2 != &#x27;\0&#x27;)   //优化1</span></span><br><span class="line"><span class="comment">////&#123;</span></span><br><span class="line"><span class="comment">////*arr1++ = *arr2++;                   </span></span><br><span class="line"><span class="comment">////&#125;</span></span><br><span class="line"><span class="comment">////*arr1 = *arr2;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//while (*arr1++ = *arr2++)    //优化2</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//;                        //思路：不断赋值，当*arr2是\0的时候，while（）括号里面就是0（\0的ASCLL码值是0），循环就停止</span></span><br><span class="line"><span class="comment">//&#125;                             //这里的代码有问题，还不完美，还能优化</span></span><br><span class="line"><span class="comment">//                                //arr1传过来的是空指针，那程序就会坏掉.</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//&#125;                              </span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//char arr1[20] = &#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">//char arr2[] = &quot;hello&quot;;</span></span><br><span class="line"><span class="comment">//my_strcpy(arr1, arr2);</span></span><br><span class="line"><span class="comment">//   //my_strcpy(arr1,NULL);</span></span><br><span class="line"><span class="comment">//printf(&quot;%s&quot;, arr1);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; const int num &#x3D; 10;       const修饰了num，那么就不能直接用num &#x3D; 20；来修改变量<br>&#x2F;&#x2F; int <em>p &#x3D; &amp;num;           但是！可以把num交给指针，指针可以修改  &#x2F;&#x2F;如果想指针也不能改，在指针前面也加上const就行了<br>&#x2F;&#x2F; <em>p &#x3D; 20;<br>&#x2F;&#x2F; const修饰指针变量的时候<br>&#x2F;&#x2F; const如果放在</em>的左边，修饰的是</em>p，表示指针指向的内容是不能通过指针来改变的<br>&#x2F;&#x2F;    但是指针变量本身是可以修改的<br>&#x2F;&#x2F;<br>&#x2F;&#x2F; 当const放在*左边<br>&#x2F;&#x2F; 例如<br>&#x2F;&#x2F;const int num &#x3D; 0;<br>&#x2F;&#x2F;const int *p &#x3D; &amp;num;<br>&#x2F;&#x2F;int n &#x3D; 0;<br>&#x2F;&#x2F;<em>p &#x3D; 20;         &#x2F;&#x2F;<em>p不可以改<br>&#x2F;&#x2F;p &#x3D; &amp;n;         &#x2F;&#x2F;p可以改<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;当const放在</em>的右边<br>&#x2F;&#x2F;例如：<br>&#x2F;&#x2F;const int num &#x3D; 0；<br>&#x2F;&#x2F;int</em> const p &#x3D; &amp;num;<br>&#x2F;&#x2F;int n &#x3D; 0；<br>&#x2F;&#x2F;*p &#x3D; 20;         &#x2F;&#x2F;*p可以改<br>&#x2F;&#x2F;p &#x3D; &amp;n;        &#x2F;&#x2F;p不可以改<br>&#x2F;&#x2F;  </p><p>&#x2F;&#x2F;作业：模拟实现库函数 strlen</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//size_t my_strlen(const char* arr)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">////size_t的意思是无符号整数</span></span><br><span class="line"><span class="comment">////这里写int也可以，因为不可能算出负数</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//int cont = 0;</span></span><br><span class="line"><span class="comment">//assert( arr != &#x27;\0&#x27;);//也可以写成 assert(arr);  </span></span><br><span class="line"><span class="comment">//while (*arr != &#x27;\0&#x27;)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//*arr++;</span></span><br><span class="line"><span class="comment">//cont++;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return cont;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//char arr[] = &quot;abcdefg&quot;;</span></span><br><span class="line"><span class="comment">//int ret = my_strlen(arr);             //字符串长度，&quot;\0&quot;不算</span></span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;, ret);           </span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, sizeof(arr));   //元素个数，&quot;\0&quot;也算1个</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h1 id="———————————————————————————–作业讲解———————————————————————————–"><a href="#———————————————————————————–作业讲解———————————————————————————–" class="headerlink" title="———————————————————————————–作业讲解———————————————————————————–"></a>———————————————————————————–作业讲解———————————————————————————–</h1><p>&#x2F;&#x2F;作业：求两个数二进制中不同的个数（两个int（32位）整数m和n的二进制表达中，有多少个位（bit）不同？）<br>&#x2F;&#x2F;例子：输入 1999  2299  输出7</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int m = 0;</span></span><br><span class="line"><span class="comment">//int n = 0;</span></span><br><span class="line"><span class="comment">//int cont = 0;</span></span><br><span class="line"><span class="comment">//int i = 0;</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d%d&quot;, &amp;n, &amp;m);</span></span><br><span class="line"><span class="comment">//for (i = 0; i &lt; 32; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if ( ( (n &gt;&gt; i) &amp; 1 ) != ( ( (m &gt;&gt; i) &amp; 1 ) ) )     //按位与</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cont++;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, cont);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;优化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int m = 0;</span></span><br><span class="line"><span class="comment">//int n = 0;</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d%d&quot;, &amp;n, &amp;m);</span></span><br><span class="line"><span class="comment">//int ret = m ^ n;            //异或：32位二进制比较，相同为0，不同为1.</span></span><br><span class="line"><span class="comment">////然后统计一下ret二进制中有几个1，就说明m和n中有几个二进制位不同</span></span><br><span class="line"><span class="comment">//int cont = Numberof1(ret);</span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, cont);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;作业：计算参数n的二进制补码中有几个一 Numberof1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int Numberof1(int n)    //可以加上无符号整形代码就对了（unsigned int ）</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int cont = 0;</span></span><br><span class="line"><span class="comment">//while (n)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (n % 2 == 1)                      //这样写正数可以，负数就不对了</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cont++;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//n = n / 2;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return cont;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int n = 10;</span></span><br><span class="line"><span class="comment">//int ret = Numberof1(n);</span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, ret);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int Numberof1(int n)    //在不用无符号整形的时候怎么办</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int cont = 0;</span></span><br><span class="line"><span class="comment">//int i = 0;</span></span><br><span class="line"><span class="comment">//for (i = 0; i &lt;32; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (((n &gt;&gt; i) &amp; 1) == 1)         //n的二进制右移，并逻辑与（&amp;）上1，如果等于1就说明是1，cont++;</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cont++;                        </span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return cont;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int n = 10;</span></span><br><span class="line"><span class="comment">//int ret = Numberof1(n);</span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, ret);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;优化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int Numberof1(int n)   </span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int cont = 0;</span></span><br><span class="line"><span class="comment">//while (n)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//n = n &amp; (n - 1);       //这里是按位与（&amp;）  //原理</span></span><br><span class="line"><span class="comment">//cont++;                                    //       00001010    ==  n</span></span><br><span class="line"><span class="comment">//&#125;//      00001001   ==n-1</span></span><br><span class="line"><span class="comment">//                                               //       00001000    == n &amp; (n-1)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// return cont;                                   //       00001000   == n</span></span><br><span class="line"><span class="comment">//                                               //       00000111  == n-1</span></span><br><span class="line"><span class="comment">//&#125;                                                   //      00000000    == n &amp; (n-1)</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int n = 10;</span></span><br><span class="line"><span class="comment">//int ret = Numberof1(n);</span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, ret);                  </span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;作业：写一个代码判断一个数字是不是2的n次方</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//n &amp; （n-1）== 0;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;作业：打印一个数（n）二进制的奇数位和偶数位（获取一个整数二进制中所有的偶数位和奇数位，分别打印出二进制序列）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int n = 0;</span></span><br><span class="line"><span class="comment">//int i;</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d&quot;, &amp;n);</span></span><br><span class="line"><span class="comment">////打印偶数位</span></span><br><span class="line"><span class="comment">//for (i = 31; i &gt;= 1; i-=2)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d &quot;, ((n &gt;&gt; i) &amp; 1));</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">////打印奇数位</span></span><br><span class="line"><span class="comment">//for (i = 30; i &gt;= 0; i -= 2)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d &quot;, ((n &gt;&gt; i) &amp; 1));</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;作业：交换两个变量（不创建临时变量）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a = 10;</span></span><br><span class="line"><span class="comment">//int b = 20;</span></span><br><span class="line"><span class="comment">//a = a ^ b;</span></span><br><span class="line"><span class="comment">//b = a ^ b;</span></span><br><span class="line"><span class="comment">//a = a ^ b;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d %d&quot;, a, b);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;作业：找出两个数的最大公倍数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a = 0;</span></span><br><span class="line"><span class="comment">//int b = 0;</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d%d&quot;, &amp;a, &amp;b);</span></span><br><span class="line"><span class="comment">//int max = a &gt; b ? a : b; </span></span><br><span class="line"><span class="comment">//while (1)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (max % a == 0 &amp;&amp; max % b == 0)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, max);</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//max++;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//优化：</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a = 0;</span></span><br><span class="line"><span class="comment">//int b = 0;</span></span><br><span class="line"><span class="comment">//int i;</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d%d&quot;, &amp;a, &amp;b);</span></span><br><span class="line"><span class="comment">//for (i = 1;; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if ((a * i) % b == 0)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, a * i);</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;在优化：辗转相除法</p><p>&#x2F;&#x2F;作业：将一句话的单词进行倒置，标点不倒置，比如 i like beijing. 经过倒置后变成 beijing.like i<br>&#x2F;&#x2F;三步翻转法<br>&#x2F;&#x2F;1.字符串整体翻转 .gnijieb ekil i<br>&#x2F;&#x2F;2.每个单词逆序   beijing. like i</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">//void reverse(char* left,char *right)    //字符串逆序</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//while (left &lt; right) </span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//char tmp = *left;</span></span><br><span class="line"><span class="comment">//*left = *right;</span></span><br><span class="line"><span class="comment">//*right = tmp;</span></span><br><span class="line"><span class="comment">//left++;</span></span><br><span class="line"><span class="comment">//right--;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//char arr[100] = &#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">//gets(arr);                 //把输入的内容放到arr这个数组中</span></span><br><span class="line"><span class="comment">//int len = strlen(arr);</span></span><br><span class="line"><span class="comment">//reverse(arr,arr+len-1);</span></span><br><span class="line"><span class="comment">//char* start = arr;</span></span><br><span class="line"><span class="comment">//while (*start)              //当*start是&#x27;\0&#x27;的时候循环就停下</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//char* end = start;      </span></span><br><span class="line"><span class="comment">//while (*end!= &#x27; &#x27;&amp;&amp;*end!=&#x27;\0&#x27;)    </span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//end++;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//reverse(start, end-1);</span></span><br><span class="line"><span class="comment">//if (*end == &#x27; &#x27;)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//start = end+1;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//start = end;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//printf(&quot;%s&quot;, arr);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识c语言</title>
      <link href="/2022/04/28/%E5%88%9D%E8%AF%86c%E8%AF%AD%E8%A8%80/"/>
      <url>/2022/04/28/%E5%88%9D%E8%AF%86c%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="初识c语言"><a href="#初识c语言" class="headerlink" title="初识c语言"></a>初识c语言</h1><h1 id="————————————————–hello-word———————————"><a href="#————————————————–hello-word———————————" class="headerlink" title="————————————————–hello word———————————-"></a>————————————————–hello word———————————-</h1><p>&#x2F;&#x2F; 1.创建一个项目<br>&#x2F;&#x2F; 2.创建一个源文件（.c）<br>&#x2F;&#x2F; 3.写代码<br>&#x2F;&#x2F; 4.编译代码+运行<br>&#x2F;&#x2F; 写代码   &#x2F;&#x2F;注意在写代码过程中一定要用英文输入法，中文的没法读.每段代码结束后面加上；<br>&#x2F;&#x2F; 1.写出主函数（main函数）<br>&#x2F;&#x2F; c语言是从主函数的第一行开始执行<br>&#x2F;&#x2F; int&#x3D;返回类型 &#x2F;&#x2F;返回一个值<br>&#x2F;&#x2F; printf  &#x2F;&#x2F;输出  &#x2F;&#x2F;库函数 在屏幕上打印信息<br>&#x2F;&#x2F; stdio.h  &#x2F;&#x2F;引用头文件<br>&#x2F;&#x2F; include &#x2F;&#x2F;包含头文件的意思<br>&#x2F;&#x2F; getchar();CMD不闪退<br>&#x2F;&#x2F; **\n  n的意思是分行<br>&#x2F;&#x2F; 一个.c文件只能有一个main（）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">//  int main()</span></span><br><span class="line"><span class="comment">//  &#123;</span></span><br><span class="line"><span class="comment">//     printf(&quot;hello word\n&quot;);</span></span><br><span class="line"><span class="comment">//     getchar ();</span></span><br><span class="line"><span class="comment">//     return 0;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br></pre></td></tr></table></figure><h1 id="———————————————–字符数据类型—————————————–"><a href="#———————————————–字符数据类型—————————————–" class="headerlink" title="———————————————–字符数据类型—————————————–"></a>———————————————–字符数据类型—————————————–</h1><p>&#x2F;&#x2F; char  &#x2F;&#x2F;字符数据类型<br>&#x2F;&#x2F; short    &#x2F;&#x2F;短整型<br>&#x2F;&#x2F; int   &#x2F;&#x2F;整形<br>&#x2F;&#x2F; long   &#x2F;&#x2F;长整形<br>&#x2F;&#x2F; longlong   &#x2F;&#x2F;长长整形<br>&#x2F;&#x2F; float    &#x2F;&#x2F;单精度浮点数<br>&#x2F;&#x2F; double   &#x2F;&#x2F;双精度浮点数<br>&#x2F;&#x2F; sizeof   &#x2F;&#x2F;关键字-操作符-计算机类型或变量所占空间的大小 &#x2F;&#x2F;单位是字节（byte）<br>&#x2F;&#x2F; c语言规定sizeof（long）只要大于等于sizeof（int）就可以，不需要大于.<br>&#x2F;&#x2F; 计算机单位：计算机最小单位bit-比特位<br>&#x2F;&#x2F; byte字节 1byte&#x3D;8bit &#x2F;&#x2F;kb&#x3D;1024byte  &#x2F;&#x2F;mb&#x3D;1024kb  &#x2F;&#x2F;gb&#x3D;1024mb  &#x2F;&#x2F;tb&#x3D;1024gb &#x2F;&#x2F;pb&#x3D;1024tb<br>&#x2F;&#x2F; 8进制0-7  &#x2F;&#x2F;10进制0-9</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   #include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">//  int main()</span></span><br><span class="line"><span class="comment">//  &#123;</span></span><br><span class="line"><span class="comment">//    printf(&quot;%d\n&quot;,100);//%d是打印一个整数</span></span><br><span class="line"><span class="comment">//       return 0;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br></pre></td></tr></table></figure><h1 id="————————————————-初始长量变量———————————————–"><a href="#————————————————-初始长量变量———————————————–" class="headerlink" title="————————————————-初始长量变量———————————————–"></a>————————————————-初始长量变量———————————————–</h1><p>&#x2F;&#x2F; 定义变量的方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   #include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">//   int main()</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//   int age = 150;   //age是自己随便取的名字 //创建一个变量</span></span><br><span class="line"><span class="comment">//   double weight = 75.3;  //weight是体重的意思</span></span><br><span class="line"><span class="comment">//   age = age + 1;   //变量可变</span></span><br><span class="line"><span class="comment">//   printf(&quot;%lf\n&quot;,weight);  //打印体重  //%lf是浮点数用%lf  //整数用%d,小数用%lf</span></span><br><span class="line"><span class="comment">//   printf(&quot;%d\n&quot;,age);</span></span><br><span class="line"><span class="comment">//   return 0;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h1 id="——————————————变量的分类——————————————"><a href="#——————————————变量的分类——————————————" class="headerlink" title="——————————————变量的分类——————————————-"></a>——————————————变量的分类——————————————-</h1><p>&#x2F;&#x2F; 局部变量  全局变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">// int main()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//    int a = 10;</span></span><br><span class="line"><span class="comment">//    return 0;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 在大括号({})里面的叫局部变量,在大括号外面的叫全局变量<br>&#x2F;&#x2F; 当局部变量和全局变量冲突的时候（比如局部a&#x3D;10，全局a&#x3D;100）那么是局部变量优先 ps：不建议全局变量和局部变量用同一个字符</p><h1 id="———————————————-求和————————————————"><a href="#———————————————-求和————————————————" class="headerlink" title="———————————————-求和————————————————"></a>———————————————-求和————————————————</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  #include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">//  int main()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     int a = 0;</span></span><br><span class="line"><span class="comment">//     int b = 0;   </span></span><br><span class="line"><span class="comment">//     int sum = 0;</span></span><br><span class="line"><span class="comment">//   scanf (&quot;%d %d&quot;,&amp;a,&amp;b);  //scanf是输入函数  //%d之间要有空格 //只是对数据做一个存放</span></span><br><span class="line"><span class="comment">//   sum = a + b;    //sum=和</span></span><br><span class="line"><span class="comment">//   printf(&quot;sum = %d\n&quot;, sum);   //sum=%d表示的是sum的和是一个整数 后面的sum是要输出的值</span></span><br><span class="line"><span class="comment">//   getchar ();</span></span><br><span class="line"><span class="comment">//   return 0;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 以上直接编译会报错，因为用了scanf<br>&#x2F;&#x2F; VScode2022可能不会报错，如果报错还一定要用的话，在整个程序第一行，一定要第一行输入#define _CRT_SECURE_NO_WARNINGS 1；</p><h1 id="—————————————-变量的作用域和声明周期————————————————–"><a href="#—————————————-变量的作用域和声明周期————————————————–" class="headerlink" title="—————————————-变量的作用域和声明周期————————————————–"></a>—————————————-变量的作用域和声明周期————————————————–</h1><p>&#x2F;&#x2F;作用域：哪里起作用哪里就是作用域.<br>&#x2F;&#x2F;局部变量的作用域；就是局部变量所在的范围，{}包起来的就是局部变量的范围<br>&#x2F;&#x2F;全局变量的作用域：整个工程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">//int a = 10;</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//    printf(&quot;1:%d\n&quot;, a);</span></span><br><span class="line"><span class="comment">//    printf(&quot;hehe\n&quot;);</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//        int b = 5;</span></span><br><span class="line"><span class="comment">//        printf(&quot;2:%d\n&quot;, a);</span></span><br><span class="line"><span class="comment">//        printf(&quot;3:%d\n&quot;, b);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    printf(&quot;4:%d\n&quot;, a);</span></span><br><span class="line"><span class="comment">//    return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;extern 声明函数在另一个.c文件中指明目前.c文件的全局变量，就可以在另一个.c文件中使用.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">//extern int d;</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;, d);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h1 id="————————————————变量生命周期————————————————–"><a href="#————————————————变量生命周期————————————————–" class="headerlink" title="————————————————变量生命周期————————————————–"></a>————————————————变量生命周期————————————————–</h1><p>&#x2F;&#x2F;局部变量的生命周期：进入局部范围开始出局部范围生命结束<br>&#x2F;&#x2F;全局变量的生命周期：程序的生命周期（main函数开始到结束）<br>#————————————————常量——————————————————-<br>&#x2F;&#x2F;1.字面常量<br>&#x2F;&#x2F;不会变的常量，可以是一个数字比如1,2,3,可以是一个字符一个字符串比如”a”,”b”，”bc,”hjahf”<br>&#x2F;&#x2F;2.const修饰的常变量<br>&#x2F;&#x2F;在变量前面加上const变量就不会变.见下文<br>&#x2F;&#x2F;常变量还是变量，数组里不能用变量.<br>&#x2F;&#x2F;常变量属于变量，不是常量. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">// int main()</span></span><br><span class="line"><span class="comment">// &#123; </span></span><br><span class="line"><span class="comment">//    const int a = 10；   //常变量</span></span><br><span class="line"><span class="comment">//    a = 20;              </span></span><br><span class="line"><span class="comment">//    printf(&quot;%d\n&quot;, a);   //加上了constd在输入a = 20 运行就会报错</span></span><br><span class="line"><span class="comment">//    return 0;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;就算加上了const变量还是变量，不会变成常量</p><p>&#x2F;&#x2F;3.#define定义的标识符常量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">//#define MAX 10000     //此时MAX是一个标识符常量，不可以被 MAX = ***；更改为其他数</span></span><br><span class="line"><span class="comment">// MAX = 20000         //上面加上#define后， MAX的数不可以被更改</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;4.枚举常量（enum）<br>&#x2F;&#x2F;可以被一一列举的常量.枚举常量从0开始.<br>&#x2F;&#x2F;枚举常量的格式:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//enum Sex       //sex是性别的意思</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">// MALE            //可以在&#123;&#125;里面加上值，比如MALE = 2,这种值叫赋初值.只能在&#123;&#125;里面赋初值，不能在&#123;&#125;外面赋初值.</span></span><br><span class="line"><span class="comment">// FEMALE         //这三个英文是男，女，保密，的意思</span></span><br><span class="line"><span class="comment">// SECRET</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// enum Sex s = ***     //***只能是上面三个英文其中一个</span></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><h1 id="—————————————————-初识字符串———————————————"><a href="#—————————————————-初识字符串———————————————" class="headerlink" title="—————————————————-初识字符串———————————————-"></a>—————————————————-初识字符串———————————————-</h1><p>&#x2F;&#x2F;1.字符<br>&#x2F;&#x2F;被””包起来的就是字符<br>&#x2F;&#x2F;2.字符数组<br>&#x2F;&#x2F;是一组相同类型的元素<br>&#x2F;&#x2F;每个字符串在结尾的位置隐藏了一个\0的字符，\0是字符串结束标志.<br>&#x2F;&#x2F;比如”hello”,是由 h、e、l、l、o、\0六个元素组成.<br>&#x2F;&#x2F;char arr[] &#x3D; “hello”      &#x2F;&#x2F;char是字符串类型 arr[]是创建数组<br>&#x2F;&#x2F;char arr1[] &#x3D; “abc”<br>&#x2F;&#x2F;char arr2[] &#x3D; {’a’，’b’，’c’}        &#x2F;&#x2F;可以在添加一个\0作为结束<br>&#x2F;&#x2F;%s是引用char类型的意思<br>&#x2F;&#x2F;printf（”%s\n”, arr1);    输出为abc<br>&#x2F;&#x2F;printf（”%s\n”, arr2);    输出为abc烫烫烫bc   &#x2F;&#x2F;烫烫烫bc是乱码    &#x2F;&#x2F;加上\0结果为abc不加上则为乱码<br>&#x2F;&#x2F;int len &#x3D; strlen（”***”）&#x2F;&#x2F;strlen全名是string length是求字符串长度的意思，len是自己给的名字<br>&#x2F;&#x2F; printf(“%d\n”, len);        &#x2F;&#x2F;结果为3<br>&#x2F;&#x2F; 在计算字符串长度的时候\0是不计算在长度里的.<br>&#x2F;&#x2F;提示报错strlen未定义，因为没有引用头文件#include &lt;string.h&gt;,头文件可以多个引用.<br>&#x2F;&#x2F;如果没在数组后加上\0,在计算数组长度的时候会是一个随机值.<br>&#x2F;&#x2F;监视窗口打开方法：F10-调试-窗口-监视</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//char arr[] = &quot;abc&quot;;</span></span><br><span class="line"><span class="comment">//printf(&quot;%s\n&quot;, arr);</span></span><br><span class="line"><span class="comment">//int bl = strlen(&quot;arr&quot;);</span></span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;, bl);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h1 id="————————————————-初识转义字符———————————————"><a href="#————————————————-初识转义字符———————————————" class="headerlink" title="————————————————-初识转义字符———————————————-"></a>————————————————-初识转义字符———————————————-</h1><p>&#x2F;&#x2F;在想输出三字母词的时候会被变成别的，比如想输出??),会变成],想输出\n的时候会变成换行.<br>&#x2F;&#x2F;vs2022已经不支持三字母了<br>&#x2F;&#x2F;%c是打印字符<br>&#x2F;&#x2F;转移字符就是\加上某字母有特殊效果，比如\n是换行的意思</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;%c\n&quot;, &#x27;\&#x27;&#x27;);   //如果想输出一个逗号，直接用逗号包起来不行，要加上一个反斜杠，这就是转义字符</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;%c\n&quot;, &#x27;a&#x27;);        //%c打印字符，字符用英文单引号包起来</span></span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;, 100);       //%d打印整形，整形不用包起来直接用</span></span><br><span class="line"><span class="comment">//printf(&quot;%s\n&quot;, &quot;abc&quot;);     //%s打印字符串，字符串用英文双引号 </span></span><br><span class="line"><span class="comment">//printf(&quot;%lf\n&quot;, 3.1415);    //$lf打印浮点数，浮点数不用包起来直接用</span></span><br><span class="line"><span class="comment">//  printf(&quot;%p\n&quot;, a);          //%p用来打印地址</span></span><br><span class="line"><span class="comment">//printf(&quot;%s\n&quot;, &quot;b&quot;);        //如果用%s打印字符，要用双引号包起来</span></span><br><span class="line"><span class="comment">//printf(&quot;%s\n&quot;, &quot;\\t&quot;);     //想输出\t \n 之类的，在前面加上\就好了</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;ASCII码值：详情百度.<br>&#x2F;&#x2F; \ddd:ddd是自己取的3个数字，数字必须是8进制的<br>&#x2F;&#x2F; \xdd:dd是自己取的2个数字，数字必须是16进制的<br>&#x2F;&#x2F;8进制转换：从最右边开始，第一个数乘以8的0次方，第二个数乘以8的二次方，以此类推<br>&#x2F;&#x2F; 例：130是8进制     等于1乘8的2次方+3乘8的1次方+0乘8的0次方<br>&#x2F;&#x2F;10进制转换：从最右边开始，第一个数乘以10的0次方，第二个数乘以10的1次方，以此类推<br>&#x2F;&#x2F;printf（”%c\n”, ’\130’）   &#x2F;&#x2F;输出结果是X. &#x2F;&#x2F;用%d会输出8进制数88，用%c会输出X<br>&#x2F;&#x2F; \130中130表示的的8进制数，加上\后，会把130从8进制转换成10进制数，在把10进制数转换成对应的ASCII码值<br>&#x2F;&#x2F; 因为\130从8进制转换成10进制数是88，而88对应的10进制ASCII码值是X，所以最后输出的结果是X   &#x2F;&#x2F;ASCII码值对应值请百度</p><h1 id="—————————————————初识选择语句—————————————————"><a href="#—————————————————初识选择语句—————————————————" class="headerlink" title="—————————————————初识选择语句—————————————————-"></a>—————————————————初识选择语句—————————————————-</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int input = 0;   //输入的值,ibput是输入的意思，可以自己取名字</span></span><br><span class="line"><span class="comment">//printf(&quot;加入比特:&gt;\n&quot;);</span></span><br><span class="line"><span class="comment">//printf(&quot;那要好好学习吗(1/0)?:&gt;\n&quot;);</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d&quot;, &amp;input);        //scanf是放一个可以输入的空间</span></span><br><span class="line"><span class="comment">//if (input == 1)</span></span><br><span class="line"><span class="comment">//printf(&quot;好offer\n&quot;);</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//printf(&quot;卖红薯\n&quot;);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h1 id="—————————————————初识循环语句———————————————–"><a href="#—————————————————初识循环语句———————————————–" class="headerlink" title="—————————————————初识循环语句———————————————–"></a>—————————————————初识循环语句———————————————–</h1><p>&#x2F;&#x2F;1.while循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a = 0;  //line自定义</span></span><br><span class="line"><span class="comment">//while(a&lt;1145)    //while是循环   //while后面不能有分号！！！</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;写代码:%d\n&quot;, a);      </span></span><br><span class="line"><span class="comment">//a++; </span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//if (a == 1145)         //if后面不能有分号</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;好offer\n&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h1 id="—————————————————-函数———————————————————"><a href="#—————————————————-函数———————————————————" class="headerlink" title="—————————————————-函数———————————————————"></a>—————————————————-函数———————————————————</h1><p>&#x2F;&#x2F;什么是函数，y&#x3D;kx+b就是函数也可以写成f(x)&#x3D;kx+b</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int Add(int axy, int bxy)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int d = 0;</span></span><br><span class="line"><span class="comment">//d = axy + bxy;                        //用函数做加法</span></span><br><span class="line"><span class="comment">//return d;                               //先创建2个可以输入值的地方（scanf），别忘记加上&amp;</span></span><br><span class="line"><span class="comment">//&#125;                                         //在加上函数，Add就是创建的函数，只是创建了一个函数，该函数还不知道干什么</span></span><br><span class="line"><span class="comment">//int main()                             //对函数做定义&#123;int Add（）&#125;，就是这个函数该干什么</span></span><br><span class="line"><span class="comment">//&#123;                                       //最后returm d；输出函数的值</span></span><br><span class="line"><span class="comment">//int a = 0;                           //要打印出来函数值，先给他赋值，int c = Add（a，b）；</span></span><br><span class="line"><span class="comment">//int b = 0;                          </span></span><br><span class="line"><span class="comment">//scanf(&quot;%d%d&quot;, &amp;a, &amp;b);</span></span><br><span class="line"><span class="comment">//int c = Add(a, b);</span></span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;, c);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h1 id="—————————————————-数组——————————————————–"><a href="#—————————————————-数组——————————————————–" class="headerlink" title="—————————————————-数组——————————————————–"></a>—————————————————-数组——————————————————–</h1><p>&#x2F;&#x2F;数组-一种相同类型的元素集合<br>&#x2F;&#x2F;char ch[5] &#x3D; {‘a’,’b’,’c’};   &#x2F;&#x2F;给了5个元素的位置，但是只放了三个，这种没放满的叫不完全初始化，剩余的默认为0</p><h1 id="——————————————————操作符——————————————————–"><a href="#——————————————————操作符——————————————————–" class="headerlink" title="——————————————————操作符——————————————————–"></a>——————————————————操作符——————————————————–</h1><p>&#x2F;&#x2F;1.算数操作符：+ - * &#x2F; %    &#x2F;&#x2F;%是取模（余） &#x2F;&#x2F;什么是余？ &#x2F;&#x2F;比如9&#x2F;2，那么2乘4等于8,9-8&#x3D;1，这个1就是余数<br>&#x2F;&#x2F; int a &#x3D; 9&#x2F;2          &#x2F;&#x2F;输出结果是4<br>&#x2F;&#x2F; float a &#x3D; 9&#x2F;2         &#x2F;&#x2F;输出结果还是4   &#x2F;&#x2F;flota是单精度浮点数<br>&#x2F;&#x2F; 如果9&#x2F;2，9和2都是整数那么得到的结果都是整数，只要其中一个加上小数点就是4.5. 比如9&#x2F;2.0、9.0&#x2F;2、9.0&#x2F;2.0.<br>&#x2F;&#x2F;2.移位操作符：&gt;&gt;   &lt;&lt;<br>&#x2F;&#x2F; int a &#x3D; 2;<br>&#x2F;&#x2F; int b &#x3D;a &lt;&lt; 1；<br>&#x2F;&#x2F;列出二进制的32位操作符，00000000000000000000000000000000,32个0别数了.<br>&#x2F;&#x2F;比如说现在数值是2那么， 00000000000000000000000000000010.<br>&#x2F;&#x2F;那么b就等于            00000000000000000000000000000010 . &#x2F;&#x2F;最后这个空格会被0补上<br>&#x2F;&#x2F;所以b最后等于           00000000000000000000000000000100. &#x2F;&#x2F;b输出结果为4<br>&#x2F;&#x2F;3.赋值操作符：&#x3D; , +&#x3D; , -&#x3D; , *&#x3D; , &#x2F;&#x3D; , &amp;&#x3D; , ^&#x3D; , |&#x3D; , &gt;&gt;&#x3D; , &lt;&lt;&#x3D;,<br>&#x2F;&#x2F;解释:           加   减   乘   除   与   或   非   左移  右移<br>&#x2F;&#x2F;赋值操作符怎么用，比如a &#x3D; a-3可以写成 a -&#x3D; 3,  a &#x3D; a &lt;&lt; 1写成 a &lt;&lt;&#x3D; 3.<br>&#x2F;&#x2F;4.双目操作符<br>&#x2F;&#x2F; 有两个操作数，比如a+b，a和b是两个操作数，<br>&#x2F;&#x2F; 单目操作符<br>&#x2F;&#x2F; 1.！逻辑操作符 ：把假变成真，真变成假。c语言中0代表假，非0为真<br>&#x2F;&#x2F; int a &#x3D; 0；<br>&#x2F;&#x2F; printf（”%d\n”, !a）;   &#x2F;&#x2F;结果为 1    &#x2F;&#x2F;0代表假，!a把假变为真，真就输出1（c语言规定）<br>&#x2F;&#x2F; int a &#x3D; 1；<br>&#x2F;&#x2F; printf（”%d\n”, !a）;  &#x2F;&#x2F;结果为 0    &#x2F;&#x2F;1代表真，!a把真变为假 ，假就输出0<br>&#x2F;&#x2F; 2.-<br>&#x2F;&#x2F; 负值<br>&#x2F;&#x2F; 3.+<br>&#x2F;&#x2F; 正值<br>&#x2F;&#x2F; 4.&amp;<br>&#x2F;&#x2F; 取地址<br>&#x2F;&#x2F; 5.sizeof<br>&#x2F;&#x2F; 操作数的类型长度（单位&#x2F;字节）1字节&#x3D;8比特   整形占用4字节<br>&#x2F;&#x2F; sizeof计算的是字节，所以在计算数组的时候，数组中一个数字（整形）占用4字节<br>&#x2F;&#x2F; 6.~<br>&#x2F;&#x2F; 按位取反<br>&#x2F;&#x2F; 原码取反得到反码，反码+1得到补码（反之亦然）<br>&#x2F;&#x2F; 整数在内存中存的是补码（最后输出的是原码）<br>&#x2F;&#x2F; 1的原码   00000000000000000000000000000001<br>&#x2F;&#x2F; 原码      00000000000000000000000000000001<br>&#x2F;&#x2F; 反码      00000000000000000000000000000001<br>&#x2F;&#x2F; 补码      00000000000000000000000000000001<br>&#x2F;&#x2F; 补码      11111111111111111111111111111110  &#x2F;&#x2F;<del>a<br>&#x2F;&#x2F; 反码      11111111111111111111111111111101  &#x2F;&#x2F;补码-1<br>&#x2F;&#x2F; 原码      10000000000000000000000000000010  &#x2F;&#x2F;原码输出 -2<br>&#x2F;&#x2F; 正整数的原反补一样（规定）<br>&#x2F;&#x2F; -1的原码  10000000000000000000000000000001 （第一个1代表符号位）<br>&#x2F;&#x2F;原码       10000000000000000000000000000001    &#x2F;&#x2F;在负数求反码的时候，第一个符号位不变<br>&#x2F;&#x2F;反码       11111111111111111111111111111110     &#x2F;&#x2F;反码+1得到补码<br>&#x2F;&#x2F;补码       11111111111111111111111111111111<br>&#x2F;&#x2F;</del>a         00000000000000000000000000000000<br>&#x2F;&#x2F; 反码      10000000000000000000000000000001<br>&#x2F;&#x2F; 原码      11111111111111111111111111111110<br>&#x2F;&#x2F; ！！！！！-1的取反暂时没懂！！！！！<br>&#x2F;&#x2F;负数的第一个值叫符号位，负数的符号位为1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a = 0;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;, ~a);  //结果为0   </span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;7.++ –<br>&#x2F;&#x2F;前置++<br>&#x2F;&#x2F;例：++a     先加在用<br>&#x2F;&#x2F;后置++<br>&#x2F;&#x2F;例：a++     先用在加<br>&#x2F;&#x2F;–一样<br>&#x2F;&#x2F;8.*<br>&#x2F;&#x2F;间接访问操作符（解引用操作符）<br>&#x2F;&#x2F;9.（类型）<br>&#x2F;&#x2F;例 int a &#x3D; 3.14<br>&#x2F;&#x2F;   printf（”%d\n”, a）;<br>&#x2F;&#x2F;这样输出会报警 ，从浮点数到整形会丢失数据<br>&#x2F;&#x2F;这时在前面加上 int a &#x3D; 3.14<br>&#x2F;&#x2F;                printf（”%d\n”, (int)a);<br>&#x2F;&#x2F;这样就不会报警<br>&#x2F;&#x2F;10.     11.   12.     13.        14.    15.<br>&#x2F;&#x2F;&gt;,     &lt;,    &lt;&#x3D;,       &gt;&#x3D;，      !&#x3D;,    &#x3D;&#x3D;,<br>&#x2F;&#x2F;大于，小于，小于等于，大于等于，不等于，等于<br>&#x2F;&#x2F;16.逻辑与：&amp;&amp;<br>&#x2F;&#x2F;17.逻辑或：||<br>&#x2F;&#x2F;逻辑与和逻辑或反应真假问题.就是{与（&amp;&amp;）}起来或者{或（||）}起来.是真就输出真（1），假就输出假（0）.<br>&#x2F;&#x2F;18.条件操作符，也叫三目操作符<br>&#x2F;&#x2F; exp1 ? exp2 : exp3<br>&#x2F;&#x2F;exp1成立，exp2计算 整个表达式的结果是：exp2的结果<br>&#x2F;&#x2F;exp1不成立，exp3计算 整个表达式的结果是:exp3的结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a = 1;</span></span><br><span class="line"><span class="comment">//int b = 2;</span></span><br><span class="line"><span class="comment">//int d = 0;</span></span><br><span class="line"><span class="comment">//if (a &gt; b)</span></span><br><span class="line"><span class="comment">//d = a;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//d = b;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//以上语句可以直接写成:d = a &gt; b ? a : b;</span></span><br><span class="line"><span class="comment">//19.逗号表达式</span></span><br><span class="line"><span class="comment">//逗号隔开的一串表达式</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a = 1;</span></span><br><span class="line"><span class="comment">//int b = 2;</span></span><br><span class="line"><span class="comment">//int c = 3;</span></span><br><span class="line"><span class="comment">//int d = (a = b + c, b = a + c, c = a + b);//计算顺序是，先算a=b+c，然后把算出来a的值代入b=a+c，最后吧计算后的a和b的值代入c.</span></span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;, d);//输出13                 //逗号表达式是从左到右依次计算</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;20.下标引用，函数调用和结构成员<br>&#x2F;&#x2F;[],  (),  .,  -&gt;</p><h1 id="———————————————–初识常见关键字———————————————————"><a href="#———————————————–初识常见关键字———————————————————" class="headerlink" title="———————————————–初识常见关键字———————————————————"></a>———————————————–初识常见关键字———————————————————</h1><p>&#x2F;&#x2F;c语言提供的关键字<br>&#x2F;&#x2F;1.c语言提供的，不能自己创建关键字<br>&#x2F;&#x2F;2.变量名不能是关键字<br>&#x2F;&#x2F;auto–是自动的，每个局部变量都是auto修饰的<br>&#x2F;&#x2F; break–跳出变量<br>&#x2F;&#x2F; case–没讲（case语句的时候会讲）<br>&#x2F;&#x2F; char–字符类型<br>&#x2F;&#x2F; const–常变量<br>&#x2F;&#x2F; continue–继续<br>&#x2F;&#x2F; default–默认<br>&#x2F;&#x2F; do–dowhile循环<br>&#x2F;&#x2F; double–双精度浮点数<br>&#x2F;&#x2F; else–else语句（if那里出现的）<br>&#x2F;&#x2F; enum–枚举<br>&#x2F;&#x2F; extern–声明外部符号–声明变量<br>&#x2F;&#x2F; float–单精度浮点数<br>&#x2F;&#x2F; for–for循环<br>&#x2F;&#x2F; goto–goto语句<br>&#x2F;&#x2F; if–if语句<br>&#x2F;&#x2F; int–整形<br>&#x2F;&#x2F; long–长整形<br>&#x2F;&#x2F; register–寄存器关键字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//register int a = 1;//作用是：建议a的值存放在寄存器中   ps：仅仅是建议，放不放不知道，编译器自己说了算</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;计算机中数据的存储<br>&#x2F;&#x2F;计算机中的数据可以存放到那些内容中去呢？<br>&#x2F;&#x2F; 内存，硬盘，网盘，高速缓存，寄存器<br>&#x2F;&#x2F; return–返回值<br>&#x2F;&#x2F; short–短整形<br>&#x2F;&#x2F; signed–有符号位的，描述的数字有符号的有正负的，和他相对应的有unsigned<br>&#x2F;&#x2F; unsigned–无符号的<br>&#x2F;&#x2F; sizeof–计算所占空间大小（单位&#x2F;字节）<br>&#x2F;&#x2F; static–静态的<br>&#x2F;&#x2F; struct–结构体<br>&#x2F;&#x2F; switch–switch结构语句<br>&#x2F;&#x2F; typedef–类型定义  也叫类型重命名，就是给特别长的关键字缩写<br>&#x2F;&#x2F; union–联合体（共用体）<br>&#x2F;&#x2F; void–无，没有，空的意思<br>&#x2F;&#x2F; volatile–体现c语言段位的意思，c语言暂时不讲<br>&#x2F;&#x2F; while–循环<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;define–不是关键字是预处理指令<br>&#x2F;&#x2F;include–不是关键字是预处理指令</p><h1 id="——————————————————常见关键字——————————————"><a href="#——————————————————常见关键字——————————————" class="headerlink" title="——————————————————常见关键字——————————————-"></a>——————————————————常见关键字——————————————-</h1><p>&#x2F;&#x2F;typedef–类型定义  也叫类型重命名，就是给特别长的关键字缩写<br>&#x2F;&#x2F;typedef unsigned int u_int;    &#x2F;&#x2F;typedef就是给特别长的关键字一个缩写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//unsigned int a = 0;   //unsigned是无符号的意思</span></span><br><span class="line"><span class="comment">//u_int a = 0;            //和上面那句话是一样的意思</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;static-静态的<br>&#x2F;&#x2F;1.static修饰局部变量<br>&#x2F;&#x2F;2.static修饰全局变量<br>&#x2F;&#x2F;3.static修饰函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//void sb()                                                         </span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a = 0;</span></span><br><span class="line"><span class="comment">//a++;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, a);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//int main()                       //输出10个1</span></span><br><span class="line"><span class="comment">//&#123;                                 //循环10次，每次新建一个a，所以是10个1</span></span><br><span class="line"><span class="comment">//int i = 0;</span></span><br><span class="line"><span class="comment">//while (i &lt; 10)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//sb();</span></span><br><span class="line"><span class="comment">//i++;                         static修饰局部变量，改变了局部变量的生命周期（本质上是改变了变量的存储类型）</span></span><br><span class="line"><span class="comment">//&#125;                                静态局部变量，生命周期是全局的，作用域是局部的</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//void sb()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">// static int a = 0;</span></span><br><span class="line"><span class="comment">//a++;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, a);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//int main()                       //输出1 2 3 4 5 6 7 8 9 10</span></span><br><span class="line"><span class="comment">//&#123;                                 //循环10次，每次不新建一个a，所以是1到10</span></span><br><span class="line"><span class="comment">//int i = 0;</span></span><br><span class="line"><span class="comment">//while (i &lt; 10)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//sb();</span></span><br><span class="line"><span class="comment">//i++;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;static修饰全局变量，会使这个全局变量只能在自己所在的源文件里使用<br>&#x2F;&#x2F;其他源文件不能用！！！<br>&#x2F;&#x2F;全局变量，在其他源文件可以使用，是因为全局变量具有外部链接属性<br>&#x2F;&#x2F;但是被static修饰之后，就变成了内部链接属性，其他源文件就链接不到这个静态的全局变量了<br>&#x2F;&#x2F;声明函数和声明全局变量一样，都是在extern后面跟名字<br>&#x2F;&#x2F;static修饰函数，使函数也只能在自己所在的源文件内部使用，和修饰全局变量一样</p><h1 id="—————————————————-定义常量和宏—————————————————"><a href="#—————————————————-定义常量和宏—————————————————" class="headerlink" title="—————————————————-定义常量和宏—————————————————"></a>—————————————————-定义常量和宏—————————————————</h1><p>&#x2F;&#x2F;define–预处理指令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义常量：</span></span><br><span class="line"><span class="comment">//#define MAX 1000；             </span></span><br><span class="line"><span class="comment">//定义宏</span></span><br><span class="line"><span class="comment">//#define hanshu(x,y) x+y         //这就是定义宏</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;                                          //上面宏最后的xy没加括号</span></span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;, 4*hanshu(2, 3));     //运算结果是 4*2+3=11  </span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//#define hanshu(x,y) ((x)+(y))</span></span><br><span class="line"><span class="comment">//int main()                                 //加上括号后才算的是整体</span></span><br><span class="line"><span class="comment">//&#123;                                          //4*（2+3）</span></span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;, 4 * hanshu(2, 3));</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h1 id="———————————————–初识指针—————————————————————"><a href="#———————————————–初识指针—————————————————————" class="headerlink" title="———————————————–初识指针—————————————————————"></a>———————————————–初识指针—————————————————————</h1><p>&#x2F;&#x2F; &amp;–取地址<br>&#x2F;&#x2F; <em>–解引用操作符<br>&#x2F;&#x2F;内存中地址是16进制，16进制1-9是数字表达，10，11,12是字母a，b ，c，<br>&#x2F;&#x2F;%p用来打印地址<br>&#x2F;&#x2F; 在新建一个变量的时候（int a &#x3D; 10 ）会在内存中分配一个4字节的空间，这个空间有自己的编号.（int</em> pa &#x3D;&amp;a；）就是把编号放到<br>&#x2F;&#x2F; 一个新的空间中（这个空间的大小等于变量的大小）.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a = 10;   //定义了一个a，a会在内存中被分配一个字节</span></span><br><span class="line"><span class="comment">//printf(&quot;%p\n&quot;, &amp;a);//%p打印地址  //&amp;是取地址的意思 //这里的地址每次都是随机的</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// int main()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   int a = 10；</span></span><br><span class="line"><span class="comment">//     int* pa = &amp;a   //pa是用来存放地址的，在c语言中pa叫指针变量  //在int 后面加上* ，就说明pa是指针变量</span></span><br><span class="line"><span class="comment">//     *pa = 20；    //*pa可以直接改变变量的值    //*--解引用操作符</span></span><br><span class="line"><span class="comment">//    通过pa中的地址，找到a的地址，改变a的值.</span></span><br><span class="line"><span class="comment">//     return 0；</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;指针变量的大小<br>&#x2F;&#x2F;指针需要多大的空间，取决地址的存储需要多大空间<br>&#x2F;&#x2F;32位系统是4字节，64位是8字节</p><h1 id="———————————————————结构体—————————————————–"><a href="#———————————————————结构体—————————————————–" class="headerlink" title="———————————————————结构体—————————————————–"></a>———————————————————结构体—————————————————–</h1><p>&#x2F;&#x2F;struct–结构体 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//struct jiegouti            //创建一个结构体</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//char mingzi[10];      //一一对应的类型和自定义名字</span></span><br><span class="line"><span class="comment">//int nianling;</span></span><br><span class="line"><span class="comment">//double tizhong;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;;</span></span><br><span class="line"><span class="comment">////.--点操作符</span></span><br><span class="line"><span class="comment">////-&gt;--箭头操作符</span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//struct jiegouti a = &#123; &quot;张三&quot;, 20, 75.5&#125;;       //结构体的创建和初始化</span></span><br><span class="line"><span class="comment">//printf(&quot;%s %d %lf\n&quot;, a.mingzi, a.nianling, a.tizhong); //结构体变量，成员变量</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//struct jiegouti* pa = &amp;a;           //指针     //结构体也可以用指针</span></span><br><span class="line"><span class="comment">//printf(&quot;%s %d %lf\n&quot;, (*pa).mingzi,(*pa).nianling,(*pa).tizhong); //</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//printf(&quot;%s %d %lf\n&quot;, pa-&gt;mingzi, pa-&gt;nianling, pa-&gt;tizhong);    //-&gt;箭头操作符  //要先（struct jiegouti* pa = &amp;a;）才能用</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h1 id="————————————————分支语句if-else—————————————————"><a href="#————————————————分支语句if-else—————————————————" class="headerlink" title="————————————————分支语句if else—————————————————"></a>————————————————分支语句if else—————————————————</h1><p>&#x2F;&#x2F;c语言是结构化的程序语言：顺序结构，选择结构，循环结构.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a = 100;</span></span><br><span class="line"><span class="comment">//if (a &lt; 10)                  //如果写成else（20&lt;=a&gt;=10）;结果是不对的，要用&amp;&amp;或者||</span></span><br><span class="line"><span class="comment">//printf(&quot;1&quot;);</span></span><br><span class="line"><span class="comment">//else if (a &gt;= 10 &amp;&amp; a &lt;= 20)</span></span><br><span class="line"><span class="comment">//printf(&quot;2&quot;);</span></span><br><span class="line"><span class="comment">//else if (a &gt; 20 &amp;&amp; a &lt; 30)</span></span><br><span class="line"><span class="comment">//printf(&quot;3&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a = 0;</span></span><br><span class="line"><span class="comment">//int b = 2;</span></span><br><span class="line"><span class="comment">//if (a == 1)               //什么都不输出</span></span><br><span class="line"><span class="comment">//if (b == 2)</span></span><br><span class="line"><span class="comment">//printf(&quot;1&quot;);            //else会和最近的一个if匹配</span></span><br><span class="line"><span class="comment">//else                       //if里面的内容可以直接用&#123;&#125;包起来</span></span><br><span class="line"><span class="comment">//printf(&quot;2&quot;);            //想要和上一个if匹配就用&#123;&#125;把他们分开</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h1 id="—————————————————-代码风格————————————————–"><a href="#—————————————————-代码风格————————————————–" class="headerlink" title="—————————————————-代码风格————————————————–"></a>—————————————————-代码风格————————————————–</h1><p>&#x2F;&#x2F; 编程时要注意代码的分行，养成好的书写代码习惯.<br>&#x2F;&#x2F;《高质量c++编程》作者：林锐（博士） 完成日期：2001.7.24  没实体书.</p><h1 id="—————————————————–switch语句———————————————–"><a href="#—————————————————–switch语句———————————————–" class="headerlink" title="—————————————————–switch语句———————————————–"></a>—————————————————–switch语句———————————————–</h1><p>&#x2F;&#x2F; case语句<br>&#x2F;&#x2F; break–跳出 ，停止<br>&#x2F;&#x2F;switch（整形表达式）<br>&#x2F;&#x2F;{<br>&#x2F;&#x2F;语句项<br>&#x2F;&#x2F;}</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a = 0;</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d&quot;, &amp;a);            //给一个可以输入的空间</span></span><br><span class="line"><span class="comment">//switch (a)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//case 1:</span></span><br><span class="line"><span class="comment">//printf(&quot;1&quot;);</span></span><br><span class="line"><span class="comment">//case 2:                       </span></span><br><span class="line"><span class="comment">//printf(&quot;2&quot;);         //case前面给一个值，你输入就输出对应的东西</span></span><br><span class="line"><span class="comment">//case 3:                   //这样写如果给1，会输出1 2 3 </span></span><br><span class="line"><span class="comment">//printf(&quot;3&quot;);          //给2会输出2 3 </span></span><br><span class="line"><span class="comment">//&#125;                        //他不会自己停下，会一直运行到结束</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a = 0;</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d&quot;, &amp;a);                  //break 跳出停止的意思</span></span><br><span class="line"><span class="comment">//switch (a)                        //要想不发生上面的情况在结尾加上break</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//case 1:</span></span><br><span class="line"><span class="comment">//printf(&quot;1&quot;);                       //case后面必须是整形常量表达式</span></span><br><span class="line"><span class="comment">//break;                              //字符也可以在case后面</span></span><br><span class="line"><span class="comment">//case 2:                       </span></span><br><span class="line"><span class="comment">//printf(&quot;2&quot;);</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//case 3:                  </span></span><br><span class="line"><span class="comment">//printf(&quot;3&quot;);</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//&#125;                        </span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;                                   //输入1-3输出1</span></span><br><span class="line"><span class="comment">//int a = 0;</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d&quot;, &amp;a);</span></span><br><span class="line"><span class="comment">//switch (a) </span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//case 1:</span></span><br><span class="line"><span class="comment">//case 2:</span></span><br><span class="line"><span class="comment">//case 3:</span></span><br><span class="line"><span class="comment">//printf(&quot;1&quot;);</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//case 5:                      //输入5-6输出2</span></span><br><span class="line"><span class="comment">//case 6:</span></span><br><span class="line"><span class="comment">//printf(&quot;2&quot;);</span></span><br><span class="line"><span class="comment">//break;                     //最后的break可加可不加，最好加上      </span></span><br><span class="line"><span class="comment">//default :                          //default语句，当输入的值没有出现在要求中，就可以使用default</span></span><br><span class="line"><span class="comment">//printf(&quot;输入错误&quot;);             //default和case的顺序无所谓，不过习惯放在最后</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h1 id="—————————————————-循环语句while-1—————————————————–"><a href="#—————————————————-循环语句while-1—————————————————–" class="headerlink" title="—————————————————-循环语句while 1—————————————————–"></a>—————————————————-循环语句while 1—————————————————–</h1><p>&#x2F;&#x2F;break–停止，跳出<br>&#x2F;&#x2F;continue–继续</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a = 0;</span></span><br><span class="line"><span class="comment">//while (a &lt; 10)                    //如果是break，则a走到5时程序结束</span></span><br><span class="line"><span class="comment">//&#123;                                 //如果是continue，则a走到5时程序会跳到while (a &lt; 10)这一行无限循环下去</span></span><br><span class="line"><span class="comment">//if (a == 5)</span></span><br><span class="line"><span class="comment">//break; / continue;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;, a);</span></span><br><span class="line"><span class="comment">//a++;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;EOF – end of file –文件结束标志<br>&#x2F;&#x2F;getchar（）–从键盘获得一个字符<br>&#x2F;&#x2F;putchar（）–输出获得的字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a = 0;</span></span><br><span class="line"><span class="comment">//while ((a = getchar()) != EOF)         //从键盘获得一个字符，获取错误就输出EOF</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//putchar(a);                </span></span><br><span class="line"><span class="comment">//&#125;                                      //想要结束就ctrl+z，就读取结束</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;写一个输入密码，并且确认密码代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a;               //用getchar（）记得要创建整形</span></span><br><span class="line"><span class="comment">//char mima[20] = &#123;0&#125;;       //记得要创建字符串  </span></span><br><span class="line"><span class="comment">//printf(&quot;请输入密码：&quot;);</span></span><br><span class="line"><span class="comment">//scanf(&quot;%s&quot;, mima);             //输入密码比如123，在缓冲区中其实有123\n,而scanf只会拿走123不会拿走\n.</span></span><br><span class="line"><span class="comment">//printf(&quot;请确认密码(Y/N)&quot;);         //scanf也不会拿走空格后面的东西，比如123 456\n,scanf只会拿走123</span></span><br><span class="line"><span class="comment">//int b = 0;                         //不拿光缓冲区里的东西会影响接下来的操作</span></span><br><span class="line"><span class="comment">//while ((b = getchar()) != &#x27;\n&#x27;)       //\n需要用&#x27;&#x27;包起来      //综上所述，要创建一个东西把他拿光.</span></span><br><span class="line"><span class="comment">//&#123;                                      //while ((b = getchar()) != &#x27;\n&#x27;)，不断循环拿走缓冲区里的东西，不打印</span></span><br><span class="line"><span class="comment">//;                               //直到拿到\n，循环停下来.</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//a = getchar();                      //获取“请确认密码”后的内容.</span></span><br><span class="line"><span class="comment">//if (a == &#x27;Y&#x27;)            //记得要用 “==” </span></span><br><span class="line"><span class="comment">//printf(&quot;成功&quot;);</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//printf(&quot;失败&quot;);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;小练习</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a = 0;</span></span><br><span class="line"><span class="comment">//while ((a=getchar()) != EOF)            //输入的是0-9就不显示继续循环，输入非0-9就打印</span></span><br><span class="line"><span class="comment">//&#123;                                  //ctrl+z结束</span></span><br><span class="line"><span class="comment">//if (a &lt; &#x27;0&#x27; || a&gt;&#x27;9&#x27;)</span></span><br><span class="line"><span class="comment">//continue;</span></span><br><span class="line"><span class="comment">//putchar(a);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h1 id="—————————————————–for循环————————————————————"><a href="#—————————————————–for循环————————————————————" class="headerlink" title="—————————————————–for循环————————————————————"></a>—————————————————–for循环————————————————————</h1><p>&#x2F;&#x2F;一个基本的while循环有三个部分</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// int main（）</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//int a = 1；               初始化</span></span><br><span class="line"><span class="comment">//while（a&lt;10）             判断部分</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf（&quot;***&quot;）</span></span><br><span class="line"><span class="comment">//a++；                 调整部分 </span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//return 0；</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;<br>&#x2F;&#x2F;for循环的基本结构：for (初始化; 判断部分; 调整部分)<br>&#x2F;&#x2F;for循环的特点，初始化部分只被循环一次<br>&#x2F;&#x2F;break–跳出，停止<br>&#x2F;&#x2F;continue–继续</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a = 0;</span></span><br><span class="line"><span class="comment">//for (a=1; a&lt;10; a++)      //a=1只被循环一次</span></span><br><span class="line"><span class="comment">//&#123;   </span></span><br><span class="line"><span class="comment">//if (a == 5)                   //加了continue之后，当a=5时会回到for (a=1; a&lt;10; a++)这一行，不执行printf(&quot;%d\n&quot;, a);</span></span><br><span class="line"><span class="comment">//continue;                  //break和while循环一样，满足要求后结束循环</span></span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;, a);           //for循环的循环体中就打印</span></span><br><span class="line"><span class="comment">//                               //break和continue和while循环差不多，但是有差异</span></span><br><span class="line"><span class="comment">//                             //输出1234 6789</span></span><br><span class="line"><span class="comment">//&#125;                                   //continue上去后会继续执行a&lt;10;a++;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;循环体内不建议在加循环（可以加但是不建议）</p><p>&#x2F;&#x2F;for循环的变种<br>&#x2F;&#x2F;变种1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a = 0;</span></span><br><span class="line"><span class="comment">//for (;;)    //for循环的三个部分从语法上都可以省略.但是判断部分的省略就会使得代码死循环</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;hh\n&quot;); //输出无限个hh</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h1 id="————————————————-do…while循环—————————————————–"><a href="#————————————————-do…while循环—————————————————–" class="headerlink" title="————————————————-do…while循环—————————————————–"></a>————————————————-do…while循环—————————————————–</h1><p>&#x2F;&#x2F;for和while都是先判断在循环，do..while是先循环在判断<br>&#x2F;&#x2F;因为循环体至少要执行一次，所以应用场合不多</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a = 0;</span></span><br><span class="line"><span class="comment">//do</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (a == 5)                 //brake和另外两个循环一样，结束循环</span></span><br><span class="line"><span class="comment">//continue;               </span></span><br><span class="line"><span class="comment">//            </span></span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;, a);         //输出01234无限循环</span></span><br><span class="line"><span class="comment">//a++;</span></span><br><span class="line"><span class="comment">//&#125; while (a &lt; 10);       //最后的分号不能省略 </span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h1 id="——————————————————初识完—————————————————–"><a href="#——————————————————初识完—————————————————–" class="headerlink" title="——————————————————初识完—————————————————–"></a>——————————————————初识完—————————————————–</h1><p>&#x2F;&#x2F;作业：计算n的阶乘</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int n = 0;</span></span><br><span class="line"><span class="comment">//int i = 0;</span></span><br><span class="line"><span class="comment">//int b = 1;</span></span><br><span class="line"><span class="comment">//printf(&quot;请输入n的值:&quot;);</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d&quot;, &amp;n);</span></span><br><span class="line"><span class="comment">//for (i = 1; i &lt;= n; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//b *= i;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;, b);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;作业2：计算1-10的阶乘相加</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int n = 0;</span></span><br><span class="line"><span class="comment">//int i = 0;</span></span><br><span class="line"><span class="comment">//int jiecheng = 1;</span></span><br><span class="line"><span class="comment">//int shuchu = 0;                     //不理解就F10，然后跟着老师的视频在理解一遍.</span></span><br><span class="line"><span class="comment">//for (n = 1; n &lt;=5; n++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int jiecheng = 1;</span></span><br><span class="line"><span class="comment">//for (i = 1; i &lt;= n; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//jiecheng *= i;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//shuchu += jiecheng;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;, shuchu);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;作业:在一个有序数组中找到一个数(k).<br>&#x2F;&#x2F;提示；二分查找（拆分查找）<br>&#x2F;&#x2F;原理：每次查找一半，无限循环直到查到.<br>&#x2F;&#x2F;先创建一个有序数组<br>&#x2F;&#x2F;在创建一个左边下标和一个右边下标<br>&#x2F;&#x2F;在创建一个被查找到的值<br>&#x2F;&#x2F;查找用到数组的下标数<br>&#x2F;&#x2F;用sizeof计算数组的个数<br>&#x2F;&#x2F;用到if、elseif、while、<br>&#x2F;&#x2F;找到了打印找到了并输出值<br>&#x2F;&#x2F;最后找不到，跳出循环打印找不到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int arr[] = &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;</span></span><br><span class="line"><span class="comment">//int sz = sizeof(arr) / sizeof(arr[0]);//计算数组中元素个数</span></span><br><span class="line"><span class="comment">//int k = 0;</span></span><br><span class="line"><span class="comment">//int zuo = 0;</span></span><br><span class="line"><span class="comment">//int you = sz - 1;          //因为第一位是从0开始，所以最右边数对应的下标数要减1</span></span><br><span class="line"><span class="comment">//while (zuo &lt;= you)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int zhong = (zuo + you) / 2;       //求出中间的数</span></span><br><span class="line"><span class="comment">//if (arr[zhong] &lt; k)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//zuo = zhong + 1;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else if (arr[zhong] &gt; k)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//you = zhong - 1;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;找到了;%d\n&quot;, zhong);    //这里打印的是数组中元素对应的下标数，</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//if (zuo &gt; you)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;找不到&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;作业：动态组名<br>&#x2F;&#x2F;提示<br>&#x2F;&#x2F;创建组名<br>&#x2F;&#x2F;创建格式<br>&#x2F;&#x2F;计算字符串长度（strlen）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//char arr1[] =  &quot;AIMWARE.net&quot; ;</span></span><br><span class="line"><span class="comment">//char arr2[] =  &quot;           &quot; ;</span></span><br><span class="line"><span class="comment">//int zuo = 0;</span></span><br><span class="line"><span class="comment">//int you = strlen(arr1) - 1;</span></span><br><span class="line"><span class="comment">//while (zuo&lt;=you)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//arr2[zuo] = arr1[zuo];</span></span><br><span class="line"><span class="comment">//arr2[you] = arr1[you];</span></span><br><span class="line"><span class="comment">//printf(&quot;%s\n&quot;, arr2);</span></span><br><span class="line"><span class="comment">//Sleep(1000);  //延迟（需引用头文件#include&lt;windows.h&gt;）</span></span><br><span class="line"><span class="comment">//system(&quot;cls&quot;);  //清空屏幕</span></span><br><span class="line"><span class="comment">//zuo++;</span></span><br><span class="line"><span class="comment">//you--;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//printf(&quot;%s\n&quot;, arr2);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;作业:模拟用户情景，用户输入密码，错误三次即退出程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int i;</span></span><br><span class="line"><span class="comment">//char password[20] = &#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">//printf(&quot;请输入密码:&quot;);</span></span><br><span class="line"><span class="comment">//for (i = 0; i &lt; 3; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//scanf(&quot;%s&quot;, password);                       //以为password是字符串类型，所以不用输入&amp;</span></span><br><span class="line"><span class="comment">//if(strcmp(password,&quot;aimware&quot;) == 0)          //比较两个字符串用strcmp. 如果相同，strcmp会返回0</span></span><br><span class="line"><span class="comment">//&#123;                                            //两个字符串比较不能用if（password==&quot;********&quot;）;</span></span><br><span class="line"><span class="comment">//printf(&quot;登录成功&quot;);</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;密码错误，请重新输入：\n&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//if (i == 3)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;超过三次，退出程序&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;作业：简单的猜数字游戏<br>&#x2F;&#x2F; srand–设置一个随机的起点（配合rand用）引用头文件&lt;stdlib.h&gt;<br>&#x2F;&#x2F; rand–生成随机数，最大为32767.<br>&#x2F;&#x2F; time()–生成时间戳<br>&#x2F;&#x2F; 模是什么？什么是模？打个比方，32767%100；的意思是32767&#x3D;100*327余下67，这个67就是模<br>&#x2F;&#x2F;要求：会自动产生一个1~100的随机数，然后你去猜，如果猜对了就恭喜，如果猜错了会告诉你猜大了还是猜小了继续猜，直到猜对.<br>&#x2F;&#x2F;游戏可以一直玩，除非退出游戏.<br>&#x2F;&#x2F;代码思路：因为游戏一开始就要玩，所以用do..while开头<br>&#x2F;&#x2F;上来先打印一个菜单<br>&#x2F;&#x2F; 输出1&#x2F;0开始或结束游戏，输入其他则提示错误<br>&#x2F;&#x2F; 输入1开始游戏后跳到游戏运行函数<br>&#x2F;&#x2F; 用rand和srand配合生成随机数，并用模把范围限制到1-100里<br>&#x2F;&#x2F; 猜大了就提示猜大了，猜小了就提示猜小了.<br>&#x2F;&#x2F; 猜对了之后输出猜对了并结束循环<br>&#x2F;&#x2F; 回到游戏开始选择界面</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//void menu()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;***************************\n&quot;);</span></span><br><span class="line"><span class="comment">//printf(&quot;********* 1.开始 **********\n&quot;);</span></span><br><span class="line"><span class="comment">//printf(&quot;********* 0.退出 **********\n&quot;);</span></span><br><span class="line"><span class="comment">//printf(&quot;***************************\n&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//void game()</span></span><br><span class="line"><span class="comment">//&#123;//unsigned int是一个类型，srand要用这个类型，这里是直接改变time的类型为（unsigned int）</span></span><br><span class="line"><span class="comment">////srand((unsigned int)time(NULL));//NULL是，time自己有个初始值，用NULL就没有初始值了</span></span><br><span class="line"><span class="comment">////设置一个随机的起点   //在srand中输入一个随机值，才能让rand产生的是随机值</span></span><br><span class="line"><span class="comment">//int a; //这里用到时间戳（详情百度）</span></span><br><span class="line"><span class="comment">////因为这个代码只用一次就好了所以放到了主函数里去   </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                                       //这里模的范围是0-99，那么加1就是0-100了</span></span><br><span class="line"><span class="comment">//int ret = rand()%100+1;               //rand生成一个随机数，最大为32767，类型为int，要引用头文件#include&lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">// //说是随机其实不随机，重新启动程序生成的都是一样的</span></span><br><span class="line"><span class="comment">//                                    //怎么办呢？用sranf（）</span></span><br><span class="line"><span class="comment">//while (1)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;请猜数字：&quot;);</span></span><br><span class="line"><span class="comment">//scanf(&quot; %d&quot;, &amp;a);</span></span><br><span class="line"><span class="comment">//if (a &lt; ret)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;猜小了\n&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else if (a &gt; ret)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;猜大了\n&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;猜对了\n&quot;);</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;                                 </span></span><br><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int input;</span></span><br><span class="line"><span class="comment">//srand((unsigned int)time(NULL)); //详情见上面</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//do</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//menu();  //打印菜单</span></span><br><span class="line"><span class="comment">//printf(&quot;请选择&quot;);                 //这一步选择是否开始游戏</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d&quot;, &amp;input);</span></span><br><span class="line"><span class="comment">//switch (input)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//case 1:</span></span><br><span class="line"><span class="comment">//game();                                           //printf(&quot;游戏开始\n&quot;);</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//case 0:</span></span><br><span class="line"><span class="comment">//printf(&quot;游戏结束\n&quot;);</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//default:</span></span><br><span class="line"><span class="comment">//printf(&quot;选择错误，重新选择\n&quot;);</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125; while (input);                        //把输入值代进去看看，逻辑不能错</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;作业：输入三个数（a，b，c），让三个数从大到小排列.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a, b, c;</span></span><br><span class="line"><span class="comment">//printf(&quot;请输入三个数：&quot;);</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d%d%d&quot;, &amp;a, &amp;b, &amp;c);</span></span><br><span class="line"><span class="comment">//while (1)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (a &lt; b)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int imp;</span></span><br><span class="line"><span class="comment">//imp = a;</span></span><br><span class="line"><span class="comment">//a = b;</span></span><br><span class="line"><span class="comment">//b = imp;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//if (a &lt; c)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int imp;</span></span><br><span class="line"><span class="comment">//imp = a;</span></span><br><span class="line"><span class="comment">//a = c;</span></span><br><span class="line"><span class="comment">//c = imp;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//if (b &lt; c)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int imp;</span></span><br><span class="line"><span class="comment">//imp = b;</span></span><br><span class="line"><span class="comment">//b = c;</span></span><br><span class="line"><span class="comment">//c = imp;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d%d%d&quot;, a, b, c);</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;作业：写一个代码，打印1-100里3的倍数.<br>&#x2F;&#x2F;思路：首先要产生1-100的数<br>&#x2F;&#x2F;      3的倍数肯定能被3整除<br>&#x2F;&#x2F;2种方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int i;</span></span><br><span class="line"><span class="comment">//for (i = 3; i &lt;= 100; i += 3)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d &quot;, i);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int i;</span></span><br><span class="line"><span class="comment">//for (i = 1; i &lt;= 100; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (i % 3 == 0)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d &quot;, i);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;作业：给定2个数，求这两个数的最大公约数.<br>&#x2F;&#x2F;提示，先找出2个数中小的那个（因为公约数不会比最小的那个数还小）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int m, n;</span></span><br><span class="line"><span class="comment">//printf(&quot;请输入2个数：&quot;);</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d%d&quot;, &amp;m, &amp;n);</span></span><br><span class="line"><span class="comment">//int min;</span></span><br><span class="line"><span class="comment">//if (m &gt; n)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//min = n;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//min = m;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//while (1)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (m % min == 0 &amp;&amp; n % min == 0)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;最大公约数为：%d&quot;, min);</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//min--;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;第二种方法：辗转相除法<br>&#x2F;&#x2F;辗转相除法：24 % 18 &#x3D; 6          48 % 18 &#x3D; 12             18 % 24 &#x3D;18<br>&#x2F;&#x2F;            这里是24-18&#x3D;6        这里是48-18*2&#x3D;12<br>&#x2F;&#x2F;辗转相除法：18 % 6 &#x3D; 0           18 % 12 &#x3D; 6              24 % 18 &#x3D; 6 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int m, n, t;</span></span><br><span class="line"><span class="comment">//printf(&quot;请输入2个数：&quot;);</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d%d&quot;, &amp;m, &amp;n);</span></span><br><span class="line"><span class="comment">//while (t=m%n)                    //不断循环直到m%n=0,因为0为假所以跳出循环，打印</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//m = n;</span></span><br><span class="line"><span class="comment">//n = t;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//printf(&quot;最大公约数为：%d&quot;, n);    //最小公倍数 == m*n/最小公约数</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;作业；打印闰年.打印1000-2000之间的闰年<br>&#x2F;&#x2F;什么是润年？<br>&#x2F;&#x2F;润年是，能被4整除，不能被100整除的，能被400整除的年份.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;1000-2000之间的闰年为:&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//int i;</span></span><br><span class="line"><span class="comment">//for (i = 1000; i &lt;= 2000; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (i % 4 == 0)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (i % 100 != 0)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d &quot;, i);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;作业：打印100-200的素数<br>&#x2F;&#x2F;素数&#x3D;质数<br>&#x2F;&#x2F;只能被1和他本身整除<br>&#x2F;&#x2F;判断i是不是素数，用2到i的数去除他，除不尽就是素数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int i ;</span></span><br><span class="line"><span class="comment">//int c = 0;</span></span><br><span class="line"><span class="comment">//for (i = 100; i &lt;= 200; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int j;</span></span><br><span class="line"><span class="comment">//for (j = 2; j &lt; i; j++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (i % j == 0)</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//if (j == i)</span></span><br><span class="line"><span class="comment">//c++;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d &quot;, i);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//printf(&quot;c=%d&quot;, c);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;作业：打印100-200之间的素数，第二种方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a, b;</span></span><br><span class="line"><span class="comment">//int d = 0;</span></span><br><span class="line"><span class="comment">//for (a = 100; a &lt;= 200; a++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int c = 1;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//for (b = 2; b&lt;a; b++)                  </span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//if (a % b == 0)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//c = 0;                </span></span><br><span class="line"><span class="comment">//break;                  </span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;                                 </span></span><br><span class="line"><span class="comment">//if (c==1)                        </span></span><br><span class="line"><span class="comment">//&#123; </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//d++;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d &quot;, a);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//printf(&quot;一共有%d个素数&quot;, d);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;作业：打印100-200之间的素数.第三种方法<br>&#x2F;&#x2F;sqrt–是开平方函数  需要引用头文件#include&lt;mth.h&gt;<br>&#x2F;&#x2F;如果有一个数m，  m &#x3D; a * b<br>&#x2F;&#x2F;那么a和b中至少有一个是小于等于m开平方的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a, b;</span></span><br><span class="line"><span class="comment">//int d = 0;</span></span><br><span class="line"><span class="comment">//for (a = 100; a &lt;= 200; a++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int c = 1;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//for (b = 2; b &lt;=sqrt(a); b++)     //开平方数比上面把所有的数一个一个试效率更高</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//if (a % b == 0)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//c = 0;</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//if (c == 1)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//d++;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d &quot;, a);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//printf(&quot;一共有%d个素数&quot;, d);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;作业：打印100-200之间的素数  对以上在进行优化<br>&#x2F;&#x2F;因为偶数都可以除以2所以偶数不可能是素数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int a, b;</span></span><br><span class="line"><span class="comment">//int d = 0;</span></span><br><span class="line"><span class="comment">//for (a = 101; a &lt;= 200; a+=2)            //排除所有的偶数，产生的是100-200中的奇数.</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int c = 1;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//for (b = 2; b &lt;= sqrt(a); b++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//if (a % b == 0)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//c = 0;</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//if (c == 1)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//d++;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d &quot;, a);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//printf(&quot;一共有%d个素数&quot;, d);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo插入图片问题解决方法（不是最优解）</title>
      <link href="/2022/04/27/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%8D%E6%98%AF%E6%9C%80%E4%BC%98%E8%A7%A3%EF%BC%89/"/>
      <url>/2022/04/27/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%8D%E6%98%AF%E6%9C%80%E4%BC%98%E8%A7%A3%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="解决插入本地图片的问题（）"><a href="#解决插入本地图片的问题（）" class="headerlink" title="解决插入本地图片的问题（）"></a>解决插入本地图片的问题（）</h1><h2 id="其实并没有完全解决，因为我的实力不允许所以我使用了偏方"><a href="#其实并没有完全解决，因为我的实力不允许所以我使用了偏方" class="headerlink" title="其实并没有完全解决，因为我的实力不允许所以我使用了偏方"></a>其实并没有完全解决，因为我的实力不允许所以我使用了偏方</h2><p>下面讲的是我的偏方，并不能从根本上解决问题，最好还是自己去看别人的博客.有好多种不同的问题，解决的方法也不相同。</p><p>第一步，我这里用的是插件，只要去别的地方复制图片，在回到code ctrl+alt+v就自动打出来.</p><p><img src="/2022/04/27/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%8D%E6%98%AF%E6%9C%80%E4%BC%98%E8%A7%A3%EF%BC%89/2022-04-27-10-32-52.png"></p><p>打出来的图片会自动生成本地的，并保存在下面图片的文件夹里</p><p><img src="/2022/04/27/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%8D%E6%98%AF%E6%9C%80%E4%BC%98%E8%A7%A3%EF%BC%89/2022-04-27-10-34-00.png"></p><p>这个时候，在vscode本地预览里是能看到图片的，但是hexo g然后hexo s之后在本例hexo里看不到图片.<br>怎么办呢？<br>找到blog（博客文件夹）文件下（一般新手建博客，博客的文件夹都是叫blog的吧，不会有人起个奇怪的名字吧）<br>找到blog下_config.yml文件，打开.找到post_asset_folder 第一次打开后面是false，吧false改成true<br><img src="/2022/04/27/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%8D%E6%98%AF%E6%9C%80%E4%BC%98%E8%A7%A3%EF%BC%89/2022-04-27-10-40-17.png"><br>这个改完之后保存一下.<br>改完后的效果应该是，每次在 Git bash here中运行hexo new “你自己起名字”<br>在生成一个.md文件的时候还会生成一个相同名字的文件夹<br>之前建的.md文件不会生成文件夹.<br>把在_posts下的图片&#x3D;&#x3D;复制&#x3D;&#x3D;到对应名字的文件下<br>复制粘贴到vscode的图片只会放在_posts下.<br>要自己挪到对应的文件里<br>为什么要跑这么操作？<br>1.放到对应的文件夹下才能在网页的hexo里显示<br>2._posts里有图片才能在VScode里预览效果.</p><p><img src="/2022/04/27/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%8D%E6%98%AF%E6%9C%80%E4%BC%98%E8%A7%A3%EF%BC%89/2022-04-27-10-45-56.png"></p><h4 id="因为是偏方，所以很拉胯，以后继续学习后肯定会改变这个方法-主要是目前的水平看不到别人的"><a href="#因为是偏方，所以很拉胯，以后继续学习后肯定会改变这个方法-主要是目前的水平看不到别人的" class="headerlink" title="因为是偏方，所以很拉胯，以后继续学习后肯定会改变这个方法.主要是目前的水平看不到别人的."></a>因为是偏方，所以很拉胯，以后继续学习后肯定会改变这个方法.主要是目前的水平看不到别人的.</h4>]]></content>
      
      
      <categories>
          
          <category> 疑难解答 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>你好</title>
      <link href="/2022/04/26/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2022/04/26/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>你好,Markdown<br>初识Markdown<br>Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯（英语：John Gruber）。 它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。<br>由于Markdown的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，许多网站都广泛使用Markdown来撰写帮助文档或是用于论坛上发表消息。 如GitHub、Reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge、简书等，甚至还能被使用来撰写电子书。 </p><h1 id="在VScode中配置和优化方便写Markdown"><a href="#在VScode中配置和优化方便写Markdown" class="headerlink" title="在VScode中配置和优化方便写Markdown"></a>在VScode中配置和优化方便写Markdown</h1><p>教程1：<br><a href="https://www.bilibili.com/video/BV1si4y1472o?from=search&amp;seid=9319540044298785757&amp;spm_id_from=333.337.0.0">https://www.bilibili.com/video/BV1si4y1472o?from=search&amp;seid=9319540044298785757&amp;spm_id_from=333.337.0.0</a></p><p>首先在拓展中下载安装工具<br>1.Markdown All in one  —- 他有很多快捷键和自动补全的操作，能让我们打markdown的时候更加方便<br>2.Markdown Preview Enhanced — 能让你在编写markdown的时候，能看到编写出来后的样子<br>3.Paste Image —  可以方便的把图片插入到markdown中<br>4.LimfxCodeEx —  可以把文章发表到Limfx上（因为我是用hexo+github搭建的博客，不需要什么limfx，所以没装）<br>4.Code Spell Checker — 可以检查出错别字（仅支持英文）  </p><p>首先，在右上角找到预览，看看自己写出来的效果是怎么样的</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>总的来说几级标题就是字体越来越小</p><p>想要换行就在最后打两个空格</p><p>空一行就是新起一段</p><h1 id="强调！"><a href="#强调！" class="headerlink" title="强调！"></a>强调！</h1><p>强调有2种.<br>1.加粗  — 在要加粗的内容两边加上” ** “  ，           <strong>加粗</strong>               快捷键ctrl+b<br>2.斜体  — 在要斜体的内容两边加上” * “   ，             <em>斜体</em>               快捷键ctrl+i</p><p>关于编号，Markdown会自动帮你编号</p><h1 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h1><h3 id="Markdown自己插入图片的办法"><a href="#Markdown自己插入图片的办法" class="headerlink" title="Markdown自己插入图片的办法"></a>Markdown自己插入图片的办法</h3><p>有插件了，这边就先放放吧。以后再说.</p><h3 id="插件插入图片的办法"><a href="#插件插入图片的办法" class="headerlink" title="插件插入图片的办法"></a>插件插入图片的办法</h3><p>因为之前有安装插入图片的插件所以这里很方便</p><p>第一步：先去找到想要的图片复制一下<br>第二部：回到这里ctrl+Ait+v<br>或者手动输入 ‘ ![ ] ()’ ,添加自己本地保存的图片，本地的图片要和你编辑的这个文件在同一个文件夹里（这好像是markdown自己的方法？我不清楚.）</p><p><img src="/2022/04/26/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/2022-04-26-17-31-48.png"></p><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><p>用ESC下面那个</p><p><img src="/2022/04/26/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/2022-04-26-17-47-54.png"></p><p><img src="/2022/04/26/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/2022-04-26-17-48-15.png"></p><p><img src="/2022/04/26/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/2022-04-26-17-48-33.png"></p><h1 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……"></a>未完待续……</h1><h1 id="第一次使用VScode"><a href="#第一次使用VScode" class="headerlink" title="第一次使用VScode"></a>第一次使用VScode</h1><h1 id="遇到了很多问题"><a href="#遇到了很多问题" class="headerlink" title="遇到了很多问题"></a>遇到了很多问题</h1><h1 id="比如，在vscode本地预览的时候图片能看到，但是在本地的hexo网页里是图片加载不出来"><a href="#比如，在vscode本地预览的时候图片能看到，但是在本地的hexo网页里是图片加载不出来" class="headerlink" title="比如，在vscode本地预览的时候图片能看到，但是在本地的hexo网页里是图片加载不出来"></a>比如，在vscode本地预览的时候图片能看到，但是在本地的hexo网页里是图片加载不出来</h1><h1 id="还有markdown部分其他功能的补充"><a href="#还有markdown部分其他功能的补充" class="headerlink" title="还有markdown部分其他功能的补充"></a>还有markdown部分其他功能的补充</h1><h1 id="用vscode打开Blog的-md文件中文为什么是乱码，为什么第一次下载完插件弄好vscode的时候是没问题的，下次在打开vscode的时候中文会被框框，框起来"><a href="#用vscode打开Blog的-md文件中文为什么是乱码，为什么第一次下载完插件弄好vscode的时候是没问题的，下次在打开vscode的时候中文会被框框，框起来" class="headerlink" title="用vscode打开Blog的.md文件中文为什么是乱码，为什么第一次下载完插件弄好vscode的时候是没问题的，下次在打开vscode的时候中文会被框框，框起来"></a>用vscode打开Blog的.md文件中文为什么是乱码，为什么第一次下载完插件弄好vscode的时候是没问题的，下次在打开vscode的时候中文会被框框，框起来</h1><h1 id="关于图片的插入，网上各种不同的办法，我是怎么解决的，"><a href="#关于图片的插入，网上各种不同的办法，我是怎么解决的，" class="headerlink" title="关于图片的插入，网上各种不同的办法，我是怎么解决的，"></a>关于图片的插入，网上各种不同的办法，我是怎么解决的，</h1><h1 id="都在第二篇文章里"><a href="#都在第二篇文章里" class="headerlink" title="都在第二篇文章里"></a>都在第二篇文章里</h1><p>教程2：<br><a href="https://www.bilibili.com/video/BV1hJ411X75X?from=search&amp;seid=2912445405318996653&amp;spm_id_from=333.337.0.0">https://www.bilibili.com/video/BV1hJ411X75X?from=search&amp;seid=2912445405318996653&amp;spm_id_from=333.337.0.0</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
